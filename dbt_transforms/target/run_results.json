{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.10", "generated_at": "2024-05-24T19:43:34.373478Z", "invocation_id": "8231c604-9f33-4ab5-b09d-20925a56b210", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:07.446542Z", "completed_at": "2024-05-24T19:42:07.506189Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:07.507208Z", "completed_at": "2024-05-24T19:42:07.598772Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2883129119873047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.base_noaa__catches", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['common', 'strat_id', 'psu_id', 'year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'kod', 'sp_code', 'claim', 'release', 'harvest', 'claim_unadj', 'harvest_unadj', 'release_unadj', 'tot_len_a', 'wgt_a', 'tot_len_b1', 'wgt_b1', 'region', 'month', 'tot_cat', 'wgt_ab1', 'tot_len', 'landing', 'var_id', 'alt_flag', 'strat_interval', 'fl_reg', 'wp_catch_precal', 'wp_int', 'wp_catch', 'date_published', 'arx_method', 'imp_rec', '_typex', '_freqx', 'wp_int_precal']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    common,\n    strat_id,\n    psu_id,\n    year,\n    st,\n    mode_fx,\n    area_x,\n    id_code,\n    sub_reg,\n    wave,\n    kod,\n    sp_code,\n    claim,\n    release,\n    harvest,\n    claim_unadj,\n    harvest_unadj,\n    release_unadj,\n    tot_len_a,\n    wgt_a,\n    tot_len_b1,\n    wgt_b1,\n    region,\n    month,\n    tot_cat,\n    wgt_ab1,\n    tot_len,\n    landing,\n    var_id,\n    alt_flag,\n    strat_interval,\n    fl_reg,\n    wp_catch_precal,\n    wp_int,\n    wp_catch,\n    date_published,\n    arx_method,\n    imp_rec,\n    _typex,\n    _freqx,\n    wp_int_precal\n    from \"noaa_dw\".\"raw\".\"catch\"\n\n\n\n)\n\nselect * from merge_cols", "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:07.737932Z", "completed_at": "2024-05-24T19:42:07.771311Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:07.772046Z", "completed_at": "2024-05-24T19:42:07.798143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.180558443069458, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.base_noaa__sizes", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'month', 'kod', 'sp_code', 'lngth', 'wgt', 'lngth_imp', 'wgt_imp', 'strat_id', 'psu_id', 'common', 'wp_size', 'l_in_bin', 'l_cm_bin', 'var_id', 'alt_flag', 'date_published', 'wgt_unadj', 'imp_rec']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    year,\n    st,\n    mode_fx,\n    area_x,\n    id_code,\n    sub_reg,\n    wave,\n    month,\n    kod,\n    sp_code,\n    lngth,\n    wgt,\n    lngth_imp,\n    wgt_imp,\n    strat_id,\n    psu_id,\n    common,\n    wp_size,\n    l_in_bin,\n    l_cm_bin,\n    var_id,\n    alt_flag,\n    date_published,\n    wgt_unadj,\n    imp_rec\n    from \"noaa_dw\".\"raw\".\"size\"\n\n\n\n)\n\nselect * from merge_cols", "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__sizes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:07.921511Z", "completed_at": "2024-05-24T19:42:07.955846Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:07.956923Z", "completed_at": "2024-05-24T19:42:07.984792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19260215759277344, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.base_noaa__trips", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['prim2_common', 'prim1_common', 'strat_id', 'psu_id', 'add_hrs', 'area', 'area_x', 'catch', 'cntrbtrs', 'cnty', 'cnty_res', 'coastal', 'ffdays2', 'ffdays12', 'hrsf', 'id_code', 'intsite', 'mode_f', 'mode_fx', 'num_typ2', 'num_typ3', 'num_typ4', 'reg_res', 'st', 'st_res', 'sub_reg', 'telefon', 'wave', 'year', 'asg_code', 'month', 'kod', 'prt_code', 'celltype', 'fshinsp_a', 'num_fish_a', 'fl_reg', 'add_ph', 'county', 'date1', 'dist', 'f_by_p', 'gear', 'prim1', 'prim2', 'pvt_res', 'rig', 'sep_fish', 'time', 'age', 'wp_int', 'var_id', 'alt_flag', 'leader', 'date_published', 'first', 'num_typ6', 'on_list', 'party', 'zip', 'area_nc', 'boat_hrs', 'mode2001', 'muni_res', 'num_typ9', 'new_list', 'mode_asg', 'tsn1', 'tsn2', 'distkeys', 'license', 'monitor', 'compflag', 'art_reef', 'gender', 'tourn', 'turtle', 'date', 'region', 'strat_interval', 'reefcode', 'wp_int_precal', 'imp_rec', 'muni_trp', 'arx_method', 'reef_code', 'reef']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    prim2_common,\n    prim1_common,\n    strat_id,\n    psu_id,\n    add_hrs,\n    area,\n    area_x,\n    catch,\n    cntrbtrs,\n    cnty,\n    cnty_res,\n    coastal,\n    ffdays2,\n    ffdays12,\n    hrsf,\n    id_code,\n    intsite,\n    mode_f,\n    mode_fx,\n    num_typ2,\n    num_typ3,\n    num_typ4,\n    reg_res,\n    st,\n    st_res,\n    sub_reg,\n    telefon,\n    wave,\n    year,\n    asg_code,\n    month,\n    kod,\n    prt_code,\n    celltype,\n    fshinsp_a,\n    num_fish_a,\n    fl_reg,\n    add_ph,\n    county,\n    date1,\n    dist,\n    f_by_p,\n    gear,\n    prim1,\n    prim2,\n    pvt_res,\n    rig,\n    sep_fish,\n    time,\n    age,\n    wp_int,\n    var_id,\n    alt_flag,\n    leader,\n    date_published,\n    first,\n    num_typ6,\n    on_list,\n    party,\n    zip,\n    area_nc,\n    boat_hrs,\n    mode2001,\n    muni_res,\n    num_typ9,\n    new_list,\n    mode_asg,\n    tsn1,\n    tsn2,\n    distkeys,\n    license,\n    monitor,\n    compflag,\n    art_reef,\n    gender,\n    tourn,\n    turtle,\n    date,\n    region,\n    strat_interval,\n    reefcode,\n    wp_int_precal,\n    imp_rec,\n    muni_trp,\n    arx_method,\n    reef_code,\n    reef\n    from \"noaa_dw\".\"raw\".\"trip\"\n\n\n\n)\n\nselect * from merge_cols", "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__trips\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:08.117184Z", "completed_at": "2024-05-24T19:42:10.701945Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:10.703105Z", "completed_at": "2024-05-24T19:42:10.753960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.9217519760131836, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.stg_noaa__catches", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"common\",\n  \"strat_id\",\n  \"psu_id\",\n  \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"kod\",\n  \"sp_code\",\n  \"claim\",\n  \"release\",\n  \"harvest\",\n  \"claim_unadj\",\n  \"harvest_unadj\",\n  \"release_unadj\",\n  \"tot_len_a\",\n  \"wgt_a\",\n  \"tot_len_b1\",\n  \"wgt_b1\",\n  \"month\",\n  \"tot_cat\",\n  \"wgt_ab1\",\n  \"tot_len\",\n  \"landing\",\n  \"var_id\",\n  \"alt_flag\",\n  \"fl_reg\",\n  \"wp_catch_precal\",\n  \"wp_int\",\n  \"wp_catch\",\n  \"date_published\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(common as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tot_cat as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tot_len as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as catch_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        try_cast(ceiling(try_cast(claim as float)) as int) as num_fish_harvested_observed_adjusted,\n        try_cast(ceiling(try_cast(claim_unadj as float)) as int) as num_fish_harvested_observed_unadjusted,\n        try_cast(ceiling(try_cast(harvest as float)) as int) as num_fish_harvested_unobserved_adjusted,\n        try_cast(ceiling(try_cast(harvest_unadj as float)) as int) as num_fish_harvested_unobserved_unadjusted,\n        try_cast(ceiling(try_cast(release as float)) as int) as num_fish_released_adjusted,\n        try_cast(ceiling(try_cast(release_unadj as float)) as int) as num_fish_released_unadjusted,\n        try_cast(ceiling(try_cast(tot_cat as float)) as int) as total_number_fish_caught,\n        round(try_cast(tot_len_a as double), 2) as total_length_fish_harvested_observed_mm,\n        round(try_cast(tot_len_b1 as double), 2) as total_length_fish_harvested_unobserved_mm,\n        round(try_cast(tot_len as double), 2) as total_length_fish_harvested_mm,\n        round(try_cast(wgt_a as double), 2) as total_weight_fish_harvested_observed_kg,\n        round(try_cast(wgt_b1 as double), 2) as total_weight_fish_harvested_unobserved_kg,\n        round(try_cast(wgt_ab1 as double), 2) as total_weight_fish_harvested_kg,  \n        \n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by catch_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:11.043269Z", "completed_at": "2024-05-24T19:42:12.357714Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:12.358699Z", "completed_at": "2024-05-24T19:42:12.400377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6062102317810059, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.stg_noaa__sizes", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"month\",\n  \"kod\",\n  \"sp_code\",\n  \"lngth\",\n  \"wgt\",\n  \"lngth_imp\",\n  \"wgt_imp\",\n  \"strat_id\",\n  \"psu_id\",\n  \"common\",\n  \"wp_size\",\n  \"l_in_bin\",\n  \"l_cm_bin\",\n  \"var_id\",\n  \"alt_flag\",\n  \"date_published\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(common as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(wgt as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(lngth as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as size_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        round(try_cast(wgt as double), 2) as fish_weight_kg,\n        round(fish_weight_kg * 2.20462) as fish_weight_lbs,\n        try_cast(wgt_imp as boolean) as imputed_weight,\n        round(try_cast(lngth as double), 2) as fish_length_mm,        \n        round(try_cast(l_cm_bin as double), 2) as fish_length_cm,        \n        round(try_cast(l_in_bin as double), 2) as fish_length_in,\n        try_cast(lngth_imp as boolean) as imputed_length\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by size_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__sizes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:12.656044Z", "completed_at": "2024-05-24T19:42:16.596337Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:16.597495Z", "completed_at": "2024-05-24T19:42:16.676013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.4551355838775635, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.stg_noaa__trips", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"strat_id\",\n  \"psu_id\",\n  \"area\",\n  \"area_x\",\n  \"catch\",\n  \"cntrbtrs\",\n  \"cnty\",\n  \"cnty_res\",\n  \"coastal\",\n  \"ffdays2\",\n  \"ffdays12\",\n  \"hrsf\",\n  \"id_code\",\n  \"intsite\",\n  \"mode_f\",\n  \"mode_fx\",\n  \"num_typ2\",\n  \"num_typ3\",\n  \"num_typ4\",\n  \"reg_res\",\n  \"st\",\n  \"st_res\",\n  \"sub_reg\",\n  \"wave\",\n  \"year\",\n  \"asg_code\",\n  \"month\",\n  \"kod\",\n  \"prt_code\",\n  \"fl_reg\",\n  \"add_ph\",\n  \"date1\",\n  \"dist\",\n  \"f_by_p\",\n  \"gear\",\n  \"pvt_res\",\n  \"sep_fish\",\n  \"time\",\n  \"wp_int\",\n  \"var_id\",\n  \"alt_flag\",\n  \"leader\",\n  \"date_published\",\n  \"num_typ6\",\n  \"zip\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as trip_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(lpad(cnty, 3, '0') as int) as county_code_where_caught,\n        try_cast(concat(cast(state_code_where_caught as varchar), cast(county_code_where_caught as varchar)) as int) as fips_code_where_caught,\n        try_cast(lpad(st_res, 2, '0') as int) as state_code_where_fisherman_resides,\n        try_cast(lpad(cnty_res, 3, '0') as int) as county_code_where_fisherman_resides,\n        try_cast(concat(cast(state_code_where_fisherman_resides as varchar), cast(county_code_where_fisherman_resides as varchar)) as int) as fips_code_where_fisherman_resides,\n        case\n            when coastal = 'N' then 'Non-coastal county resident'\n            when coastal = 'Y' then 'Coastal county resident'\n            when coastal = 'O' then 'Out-of-State'\n            else NULL\n        end as fisherman_state_residency_status,\n        case\n            when mode_f = '1' then 'Pier/Dock'\n            when mode_f = '2' then 'Jetty/Breakwater/Breachway'\n            when mode_f = '3' then 'Bridge/Causeway'\n            when mode_f = '4' then 'Other man-made'\n            when mode_f = '5' then 'Beach/Bank'\n            when mode_f = '6' then 'Head Boat'\n            when mode_f = '7' then 'Charter Boat'\n            when mode_f = '8' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_uncollapsed,\n        try_cast(ffdays12 as int) as number_of_outings_in_last_year,\n        try_cast(ffdays2 as int) as number_of_outings_in_last_2_months,\n        try_cast(cntrbtrs as int) as number_of_anglers_interviewed,\n        round(try_cast(hrsf as double), 2) as trip_fishing_effort_hours,\n        case\n            when catch = '1' or catch = '3' then true\n            when catch = '2' then false\n            else NULL\n        end as caught,\n        case\n            when \n            try_cast(left(time, 2) as int) between 1 and 23\n            and \n            try_cast(right(time, 2) as int) between 1 and 59\n            then make_time(try_cast(left(time, 2) as int), try_cast(right(time, 2) as int), 0.0)\n            else NULL\n        end as fish_caught_time,\n        make_timestamp(date_part('year', trip_date), \n                        date_part('month', trip_date), \n                        date_part('day', trip_date), \n                        date_part('hour', fish_caught_time), \n                        date_part('minute', fish_caught_time), \n                        date_part('second', fish_caught_time)\n                        ) as fish_caught_datetime,\n        case\n            when date_part('hour', fish_caught_time) between 0 and 5 then 'Before Dawn'\n            when date_part('hour', fish_caught_time) between 6 and 11 then 'Morning'\n            when date_part('hour', fish_caught_time) between 12 and 17 then 'Afternoon'\n            when date_part('hour', fish_caught_time) between 18 and 23 then 'After Dusk'\n            else NULL\n        end as fish_caught_time_of_day\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by trip_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__trips\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:17.117494Z", "completed_at": "2024-05-24T19:42:17.127890Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:17.131076Z", "completed_at": "2024-05-24T19:42:19.355653Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.520871639251709, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.top_species", "compiled": true, "compiled_code": "with \nsizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntop_species as (\n\n        select \n        species_common_name, \n        count(species_common_name) as num_trips_where_species_targeted\n        from sizes\n        group by species_common_name\n        order by num_trips_where_species_targeted desc\n        limit 10\n\n)\n\nselect * from top_species", "relation_name": "\"noaa_dw\".\"analytics\".\"top_species\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:19.650750Z", "completed_at": "2024-05-24T19:42:19.668220Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:19.669182Z", "completed_at": "2024-05-24T19:42:27.936910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 8.565277576446533, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.method_catches", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.fishing_method_uncollapsed,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_method_uncollapsed is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_method_uncollapsed,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_method_uncollapsed\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "relation_name": "\"noaa_dw\".\"analytics\".\"method_catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:28.219654Z", "completed_at": "2024-05-24T19:42:28.230224Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:28.231042Z", "completed_at": "2024-05-24T19:42:36.821530Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 9.097157955169678, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.region_catches", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.us_region,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.us_region is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        us_region,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on us_region\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "relation_name": "\"noaa_dw\".\"analytics\".\"region_catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:37.323972Z", "completed_at": "2024-05-24T19:42:37.347100Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:37.348522Z", "completed_at": "2024-05-24T19:42:48.751890Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 11.928917407989502, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.season_catches", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.fishing_season,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_season is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_season,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_season\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "relation_name": "\"noaa_dw\".\"analytics\".\"season_catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-24T19:42:49.258282Z", "completed_at": "2024-05-24T19:42:49.284284Z"}, {"name": "execute", "started_at": "2024-05-24T19:42:49.285861Z", "completed_at": "2024-05-24T19:43:33.691228Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 44.97463321685791, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbt_transforms.trip_details", "compiled": true, "compiled_code": "with  __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), catches as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n\n),\n\nsizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntrip_details as (\n        \n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_where_caught,\n        t.state_where_fisherman_resides,\n        t.county_where_caught,\n        t.county_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        s.species_common_name,\n        s.fish_weight_kg,\n        s.imputed_weight,\n        s.fish_length_in,\n        s.fish_length_cm,\n        s.imputed_length,\n        c.num_fish_harvested_observed_adjusted,\n        c.num_fish_harvested_observed_unadjusted,\n        c.num_fish_harvested_unobserved_adjusted,\n        c.num_fish_harvested_unobserved_unadjusted,\n        c.num_fish_released_adjusted,\n        c.num_fish_released_unadjusted,\n        c.total_number_fish_caught,\n        c.total_length_fish_harvested_observed_mm,\n        c.total_length_fish_harvested_unobserved_mm,\n        c.total_length_fish_harvested_mm,\n        c.total_weight_fish_harvested_observed_kg,\n        c.total_weight_fish_harvested_unobserved_kg,\n        c.total_weight_fish_harvested_kg\n        from trips t\n        left join catches c on c.survey_id = t.survey_id\n        left join sizes s on s.survey_id = t.survey_id\n\n)\n\nselect * from trip_details", "relation_name": "\"noaa_dw\".\"analytics\".\"trip_details\""}], "elapsed_time": 87.16941356658936, "args": {"log_format_file": "debug", "enable_legacy_logger": false, "invocation_command": "dbt run --profiles-dir /home/jlopez/de_projects/noaa_eda/.dbt", "log_path": "/home/jlopez/de_projects/noaa_eda/dbt_transforms/logs", "populate_cache": true, "log_file_max_bytes": 10485760, "exclude": [], "introspect": true, "profiles_dir": "/home/jlopez/de_projects/noaa_eda/.dbt", "use_colors_file": true, "strict_mode": false, "indirect_selection": "eager", "partial_parse": true, "show_resource_report": false, "log_level": "info", "quiet": false, "write_json": true, "project_dir": "/home/jlopez/de_projects/noaa_eda/dbt_transforms", "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "select": [], "log_format": "default", "macro_debugging": false, "vars": {}, "print": true, "use_colors": true, "cache_selected_only": false, "which": "run", "send_anonymous_usage_stats": true, "static_parser": true, "partial_parse_file_diff": true, "defer": false, "favor_state": false, "log_level_file": "debug", "printer_width": 80}}