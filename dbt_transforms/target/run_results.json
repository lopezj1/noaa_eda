{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.17", "generated_at": "2024-08-02T20:12:51.227221Z", "invocation_id": "b7c58867-c9c9-4c12-968f-866efcce5811", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:35.196488Z", "completed_at": "2024-08-02T20:12:35.315485Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:35.316891Z", "completed_at": "2024-08-02T20:12:35.316916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12959933280944824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.generate_staging_models", "compiled": true, "compiled_code": "\n\n\n\n\n\n    \n\nwith source as (\n\n    select * from {{ source('raw', 'catch') }}\n\n),\n\nrenamed as (\n\n    select\n        common,\n        strat_id,\n        psu_id,\n        year,\n        st,\n        mode_fx,\n        area_x,\n        id_code,\n        sub_reg,\n        wave,\n        kod,\n        sp_code,\n        claim,\n        release,\n        harvest,\n        claim_unadj,\n        harvest_unadj,\n        release_unadj,\n        tot_len_a,\n        wgt_a,\n        tot_len_b1,\n        wgt_b1,\n        region,\n        month,\n        tot_cat,\n        wgt_ab1,\n        tot_len,\n        landing,\n        var_id,\n        alt_flag,\n        strat_interval,\n        fl_reg,\n        wp_catch_precal,\n        wp_int,\n        wp_catch,\n        date_published,\n        arx_method,\n        imp_rec,\n        _typex,\n        _freqx,\n        wp_int_precal\n\n    from source\n\n)\n\nselect * from renamed\n\n\n\n\n    \n\nwith source as (\n\n    select * from {{ source('raw', 'size') }}\n\n),\n\nrenamed as (\n\n    select\n        year,\n        st,\n        mode_fx,\n        area_x,\n        id_code,\n        sub_reg,\n        wave,\n        month,\n        kod,\n        sp_code,\n        lngth,\n        wgt,\n        lngth_imp,\n        wgt_imp,\n        strat_id,\n        psu_id,\n        common,\n        wp_size,\n        l_in_bin,\n        l_cm_bin,\n        var_id,\n        alt_flag,\n        date_published,\n        wgt_unadj,\n        imp_rec\n\n    from source\n\n)\n\nselect * from renamed\n\n\n\n\n    \n\nwith source as (\n\n    select * from {{ source('raw', 'trip') }}\n\n),\n\nrenamed as (\n\n    select\n        prim2_common,\n        prim1_common,\n        strat_id,\n        psu_id,\n        add_hrs,\n        area,\n        area_x,\n        catch,\n        cntrbtrs,\n        cnty,\n        cnty_res,\n        coastal,\n        ffdays2,\n        ffdays12,\n        hrsf,\n        id_code,\n        intsite,\n        mode_f,\n        mode_fx,\n        num_typ2,\n        num_typ3,\n        num_typ4,\n        reg_res,\n        st,\n        st_res,\n        sub_reg,\n        telefon,\n        wave,\n        year,\n        asg_code,\n        month,\n        kod,\n        prt_code,\n        celltype,\n        fshinsp_a,\n        num_fish_a,\n        fl_reg,\n        add_ph,\n        county,\n        date1,\n        dist,\n        f_by_p,\n        gear,\n        prim1,\n        prim2,\n        pvt_res,\n        rig,\n        sep_fish,\n        time,\n        age,\n        wp_int,\n        var_id,\n        alt_flag,\n        leader,\n        date_published,\n        first,\n        num_typ6,\n        on_list,\n        party,\n        zip,\n        area_nc,\n        boat_hrs,\n        mode2001,\n        muni_res,\n        num_typ9,\n        new_list,\n        mode_asg,\n        tsn1,\n        tsn2,\n        distkeys,\n        license,\n        monitor,\n        compflag,\n        art_reef,\n        gender,\n        tourn,\n        turtle,\n        date,\n        region,\n        strat_interval,\n        reefcode,\n        wp_int_precal,\n        imp_rec,\n        muni_trp,\n        arx_method,\n        reef_code,\n        reef\n\n    from source\n\n)\n\nselect * from renamed\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:35.328395Z", "completed_at": "2024-08-02T20:12:35.491287Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:35.492260Z", "completed_at": "2024-08-02T20:12:35.492279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17226099967956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.generate_yaml_file_sources", "compiled": true, "compiled_code": "\n\n\nversion: 2\n\nsources:\n  - name: raw\n    description: \"\"\n    database: noaa_dw\n    schema: raw\n    tables:\n      - name: catch\n        description: \"\"\n        columns:\n          - name: common\n            data_type: varchar\n            description: \"\"\n          - name: strat_id\n            data_type: varchar\n            description: \"\"\n          - name: psu_id\n            data_type: varchar\n            description: \"\"\n          - name: year\n            data_type: varchar\n            description: \"\"\n          - name: st\n            data_type: varchar\n            description: \"\"\n          - name: mode_fx\n            data_type: varchar\n            description: \"\"\n          - name: area_x\n            data_type: varchar\n            description: \"\"\n          - name: id_code\n            data_type: varchar\n            description: \"\"\n          - name: sub_reg\n            data_type: varchar\n            description: \"\"\n          - name: wave\n            data_type: varchar\n            description: \"\"\n          - name: kod\n            data_type: varchar\n            description: \"\"\n          - name: sp_code\n            data_type: varchar\n            description: \"\"\n          - name: claim\n            data_type: varchar\n            description: \"\"\n          - name: release\n            data_type: varchar\n            description: \"\"\n          - name: harvest\n            data_type: varchar\n            description: \"\"\n          - name: claim_unadj\n            data_type: varchar\n            description: \"\"\n          - name: harvest_unadj\n            data_type: varchar\n            description: \"\"\n          - name: release_unadj\n            data_type: varchar\n            description: \"\"\n          - name: tot_len_a\n            data_type: varchar\n            description: \"\"\n          - name: wgt_a\n            data_type: varchar\n            description: \"\"\n          - name: tot_len_b1\n            data_type: varchar\n            description: \"\"\n          - name: wgt_b1\n            data_type: varchar\n            description: \"\"\n          - name: region\n            data_type: varchar\n            description: \"\"\n          - name: month\n            data_type: varchar\n            description: \"\"\n          - name: tot_cat\n            data_type: varchar\n            description: \"\"\n          - name: wgt_ab1\n            data_type: varchar\n            description: \"\"\n          - name: tot_len\n            data_type: varchar\n            description: \"\"\n          - name: landing\n            data_type: varchar\n            description: \"\"\n          - name: var_id\n            data_type: varchar\n            description: \"\"\n          - name: alt_flag\n            data_type: varchar\n            description: \"\"\n          - name: strat_interval\n            data_type: varchar\n            description: \"\"\n          - name: fl_reg\n            data_type: varchar\n            description: \"\"\n          - name: wp_catch_precal\n            data_type: varchar\n            description: \"\"\n          - name: wp_int\n            data_type: varchar\n            description: \"\"\n          - name: wp_catch\n            data_type: varchar\n            description: \"\"\n          - name: date_published\n            data_type: varchar\n            description: \"\"\n          - name: arx_method\n            data_type: varchar\n            description: \"\"\n          - name: imp_rec\n            data_type: varchar\n            description: \"\"\n          - name: _typex\n            data_type: varchar\n            description: \"\"\n          - name: _freqx\n            data_type: varchar\n            description: \"\"\n          - name: wp_int_precal\n            data_type: varchar\n            description: \"\"\n\n      - name: size\n        description: \"\"\n        columns:\n          - name: year\n            data_type: varchar\n            description: \"\"\n          - name: st\n            data_type: varchar\n            description: \"\"\n          - name: mode_fx\n            data_type: varchar\n            description: \"\"\n          - name: area_x\n            data_type: varchar\n            description: \"\"\n          - name: id_code\n            data_type: varchar\n            description: \"\"\n          - name: sub_reg\n            data_type: varchar\n            description: \"\"\n          - name: wave\n            data_type: varchar\n            description: \"\"\n          - name: month\n            data_type: varchar\n            description: \"\"\n          - name: kod\n            data_type: varchar\n            description: \"\"\n          - name: sp_code\n            data_type: varchar\n            description: \"\"\n          - name: lngth\n            data_type: varchar\n            description: \"\"\n          - name: wgt\n            data_type: varchar\n            description: \"\"\n          - name: lngth_imp\n            data_type: varchar\n            description: \"\"\n          - name: wgt_imp\n            data_type: varchar\n            description: \"\"\n          - name: strat_id\n            data_type: varchar\n            description: \"\"\n          - name: psu_id\n            data_type: varchar\n            description: \"\"\n          - name: common\n            data_type: varchar\n            description: \"\"\n          - name: wp_size\n            data_type: varchar\n            description: \"\"\n          - name: l_in_bin\n            data_type: varchar\n            description: \"\"\n          - name: l_cm_bin\n            data_type: varchar\n            description: \"\"\n          - name: var_id\n            data_type: varchar\n            description: \"\"\n          - name: alt_flag\n            data_type: varchar\n            description: \"\"\n          - name: date_published\n            data_type: varchar\n            description: \"\"\n          - name: wgt_unadj\n            data_type: varchar\n            description: \"\"\n          - name: imp_rec\n            data_type: varchar\n            description: \"\"\n\n      - name: trip\n        description: \"\"\n        columns:\n          - name: prim2_common\n            data_type: varchar\n            description: \"\"\n          - name: prim1_common\n            data_type: varchar\n            description: \"\"\n          - name: strat_id\n            data_type: varchar\n            description: \"\"\n          - name: psu_id\n            data_type: varchar\n            description: \"\"\n          - name: add_hrs\n            data_type: varchar\n            description: \"\"\n          - name: area\n            data_type: varchar\n            description: \"\"\n          - name: area_x\n            data_type: varchar\n            description: \"\"\n          - name: catch\n            data_type: varchar\n            description: \"\"\n          - name: cntrbtrs\n            data_type: varchar\n            description: \"\"\n          - name: cnty\n            data_type: varchar\n            description: \"\"\n          - name: cnty_res\n            data_type: varchar\n            description: \"\"\n          - name: coastal\n            data_type: varchar\n            description: \"\"\n          - name: ffdays2\n            data_type: varchar\n            description: \"\"\n          - name: ffdays12\n            data_type: varchar\n            description: \"\"\n          - name: hrsf\n            data_type: varchar\n            description: \"\"\n          - name: id_code\n            data_type: varchar\n            description: \"\"\n          - name: intsite\n            data_type: varchar\n            description: \"\"\n          - name: mode_f\n            data_type: varchar\n            description: \"\"\n          - name: mode_fx\n            data_type: varchar\n            description: \"\"\n          - name: num_typ2\n            data_type: varchar\n            description: \"\"\n          - name: num_typ3\n            data_type: varchar\n            description: \"\"\n          - name: num_typ4\n            data_type: varchar\n            description: \"\"\n          - name: reg_res\n            data_type: varchar\n            description: \"\"\n          - name: st\n            data_type: varchar\n            description: \"\"\n          - name: st_res\n            data_type: varchar\n            description: \"\"\n          - name: sub_reg\n            data_type: varchar\n            description: \"\"\n          - name: telefon\n            data_type: varchar\n            description: \"\"\n          - name: wave\n            data_type: varchar\n            description: \"\"\n          - name: year\n            data_type: varchar\n            description: \"\"\n          - name: asg_code\n            data_type: varchar\n            description: \"\"\n          - name: month\n            data_type: varchar\n            description: \"\"\n          - name: kod\n            data_type: varchar\n            description: \"\"\n          - name: prt_code\n            data_type: varchar\n            description: \"\"\n          - name: celltype\n            data_type: varchar\n            description: \"\"\n          - name: fshinsp_a\n            data_type: varchar\n            description: \"\"\n          - name: num_fish_a\n            data_type: varchar\n            description: \"\"\n          - name: fl_reg\n            data_type: varchar\n            description: \"\"\n          - name: add_ph\n            data_type: varchar\n            description: \"\"\n          - name: county\n            data_type: varchar\n            description: \"\"\n          - name: date1\n            data_type: varchar\n            description: \"\"\n          - name: dist\n            data_type: varchar\n            description: \"\"\n          - name: f_by_p\n            data_type: varchar\n            description: \"\"\n          - name: gear\n            data_type: varchar\n            description: \"\"\n          - name: prim1\n            data_type: varchar\n            description: \"\"\n          - name: prim2\n            data_type: varchar\n            description: \"\"\n          - name: pvt_res\n            data_type: varchar\n            description: \"\"\n          - name: rig\n            data_type: varchar\n            description: \"\"\n          - name: sep_fish\n            data_type: varchar\n            description: \"\"\n          - name: time\n            data_type: varchar\n            description: \"\"\n          - name: age\n            data_type: varchar\n            description: \"\"\n          - name: wp_int\n            data_type: varchar\n            description: \"\"\n          - name: var_id\n            data_type: varchar\n            description: \"\"\n          - name: alt_flag\n            data_type: varchar\n            description: \"\"\n          - name: leader\n            data_type: varchar\n            description: \"\"\n          - name: date_published\n            data_type: varchar\n            description: \"\"\n          - name: first\n            data_type: varchar\n            description: \"\"\n          - name: num_typ6\n            data_type: varchar\n            description: \"\"\n          - name: on_list\n            data_type: varchar\n            description: \"\"\n          - name: party\n            data_type: varchar\n            description: \"\"\n          - name: zip\n            data_type: varchar\n            description: \"\"\n          - name: area_nc\n            data_type: varchar\n            description: \"\"\n          - name: boat_hrs\n            data_type: varchar\n            description: \"\"\n          - name: mode2001\n            data_type: varchar\n            description: \"\"\n          - name: muni_res\n            data_type: varchar\n            description: \"\"\n          - name: num_typ9\n            data_type: varchar\n            description: \"\"\n          - name: new_list\n            data_type: varchar\n            description: \"\"\n          - name: mode_asg\n            data_type: varchar\n            description: \"\"\n          - name: tsn1\n            data_type: varchar\n            description: \"\"\n          - name: tsn2\n            data_type: varchar\n            description: \"\"\n          - name: distkeys\n            data_type: varchar\n            description: \"\"\n          - name: license\n            data_type: varchar\n            description: \"\"\n          - name: monitor\n            data_type: varchar\n            description: \"\"\n          - name: compflag\n            data_type: varchar\n            description: \"\"\n          - name: art_reef\n            data_type: varchar\n            description: \"\"\n          - name: gender\n            data_type: varchar\n            description: \"\"\n          - name: tourn\n            data_type: varchar\n            description: \"\"\n          - name: turtle\n            data_type: varchar\n            description: \"\"\n          - name: date\n            data_type: varchar\n            description: \"\"\n          - name: region\n            data_type: varchar\n            description: \"\"\n          - name: strat_interval\n            data_type: varchar\n            description: \"\"\n          - name: reefcode\n            data_type: varchar\n            description: \"\"\n          - name: wp_int_precal\n            data_type: varchar\n            description: \"\"\n          - name: imp_rec\n            data_type: varchar\n            description: \"\"\n          - name: muni_trp\n            data_type: varchar\n            description: \"\"\n          - name: arx_method\n            data_type: varchar\n            description: \"\"\n          - name: reef_code\n            data_type: varchar\n            description: \"\"\n          - name: reef\n            data_type: varchar\n            description: \"\"\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:35.501465Z", "completed_at": "2024-08-02T20:12:35.505031Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:35.505933Z", "completed_at": "2024-08-02T20:12:35.505950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006698131561279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.information_schema_queries", "compiled": true, "compiled_code": "select * from information_schema.tables", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:35.509836Z", "completed_at": "2024-08-02T20:12:35.577208Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:35.578738Z", "completed_at": "2024-08-02T20:12:35.578761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07794308662414551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.merge_duplicate_column_names", "compiled": true, "compiled_code": "-- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n--['year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'month', 'kod', 'sp_code', 'lngth', 'wgt', 'lngth_imp', 'wgt_imp', 'strat_id', 'psu_id', 'common', 'wp_size', 'l_in_bin', 'l_cm_bin', 'var_id', 'alt_flag', 'date_published', 'wgt_unadj', 'imp_rec']\n\n-- Loop through column names and append any duplicated column names to a new list\n\n\n--[]\n\n-- Get the original column name and append to separate list\n\n\n--[]\n\n-- Merge the original and duplicated column name using coalesce\nselect \n\nyear,\nst,\nmode_fx,\narea_x,\nid_code,\nsub_reg,\nwave,\nmonth,\nkod,\nsp_code,\nlngth,\nwgt,\nlngth_imp,\nwgt_imp,\nstrat_id,\npsu_id,\ncommon,\nwp_size,\nl_in_bin,\nl_cm_bin,\nvar_id,\nalt_flag,\ndate_published,\nwgt_unadj,\nimp_rec\nfrom \"noaa_dw\".\"raw\".\"size\"", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:35.590337Z", "completed_at": "2024-08-02T20:12:38.483152Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:38.484026Z", "completed_at": "2024-08-02T20:12:38.484042Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.0313408374786377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.source_profiler", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith drop_cols as (\n    -- drop cols with high null proportion\n    select\n    \"common\",\n  \"strat_id\",\n  \"psu_id\",\n  \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"kod\",\n  \"sp_code\",\n  \"claim\",\n  \"release\",\n  \"harvest\",\n  \"claim_unadj\",\n  \"harvest_unadj\",\n  \"release_unadj\",\n  \"tot_len_a\",\n  \"wgt_a\",\n  \"tot_len_b1\",\n  \"wgt_b1\",\n  \"month\",\n  \"tot_cat\",\n  \"wgt_ab1\",\n  \"tot_len\",\n  \"landing\",\n  \"var_id\",\n  \"alt_flag\",\n  \"fl_reg\",\n  \"wp_int\",\n  \"wp_catch\",\n  \"date_published\"\n    from \"noaa_dw\".\"raw\".\"catch\"\n\n)\n\nselect * from drop_cols\n\nvalid_records as (\n    -- filter records where id_code is valid\n    -- how to pass a cte as a relation to this macro look at the source code for deduplication macro\n    \n\n    with unfiltered as (\n\n        select * from \"noaa_dw\".\"raw\".\"catch\"\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n)\n\nselect * from valid_records", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:38.623665Z", "completed_at": "2024-08-02T20:12:38.709132Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:38.711223Z", "completed_at": "2024-08-02T20:12:38.711250Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10236454010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.base_noaa__catches", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['common', 'strat_id', 'psu_id', 'year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'kod', 'sp_code', 'claim', 'release', 'harvest', 'claim_unadj', 'harvest_unadj', 'release_unadj', 'tot_len_a', 'wgt_a', 'tot_len_b1', 'wgt_b1', 'region', 'month', 'tot_cat', 'wgt_ab1', 'tot_len', 'landing', 'var_id', 'alt_flag', 'strat_interval', 'fl_reg', 'wp_catch_precal', 'wp_int', 'wp_catch', 'date_published', 'arx_method', 'imp_rec', '_typex', '_freqx', 'wp_int_precal']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    common,\n    strat_id,\n    psu_id,\n    year,\n    st,\n    mode_fx,\n    area_x,\n    id_code,\n    sub_reg,\n    wave,\n    kod,\n    sp_code,\n    claim,\n    release,\n    harvest,\n    claim_unadj,\n    harvest_unadj,\n    release_unadj,\n    tot_len_a,\n    wgt_a,\n    tot_len_b1,\n    wgt_b1,\n    region,\n    month,\n    tot_cat,\n    wgt_ab1,\n    tot_len,\n    landing,\n    var_id,\n    alt_flag,\n    strat_interval,\n    fl_reg,\n    wp_catch_precal,\n    wp_int,\n    wp_catch,\n    date_published,\n    arx_method,\n    imp_rec,\n    _typex,\n    _freqx,\n    wp_int_precal\n    from \"noaa_dw\".\"raw\".\"catch\"\n\n\n\n)\n\nselect * from merge_cols", "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:38.729023Z", "completed_at": "2024-08-02T20:12:38.785186Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:38.786899Z", "completed_at": "2024-08-02T20:12:38.786923Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06783819198608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.base_noaa__sizes", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'month', 'kod', 'sp_code', 'lngth', 'wgt', 'lngth_imp', 'wgt_imp', 'strat_id', 'psu_id', 'common', 'wp_size', 'l_in_bin', 'l_cm_bin', 'var_id', 'alt_flag', 'date_published', 'wgt_unadj', 'imp_rec']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    year,\n    st,\n    mode_fx,\n    area_x,\n    id_code,\n    sub_reg,\n    wave,\n    month,\n    kod,\n    sp_code,\n    lngth,\n    wgt,\n    lngth_imp,\n    wgt_imp,\n    strat_id,\n    psu_id,\n    common,\n    wp_size,\n    l_in_bin,\n    l_cm_bin,\n    var_id,\n    alt_flag,\n    date_published,\n    wgt_unadj,\n    imp_rec\n    from \"noaa_dw\".\"raw\".\"size\"\n\n\n\n)\n\nselect * from merge_cols", "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__sizes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:38.798369Z", "completed_at": "2024-08-02T20:12:38.854147Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:38.855340Z", "completed_at": "2024-08-02T20:12:38.855358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06528496742248535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.base_noaa__trips", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['prim2_common', 'prim1_common', 'strat_id', 'psu_id', 'add_hrs', 'area', 'area_x', 'catch', 'cntrbtrs', 'cnty', 'cnty_res', 'coastal', 'ffdays2', 'ffdays12', 'hrsf', 'id_code', 'intsite', 'mode_f', 'mode_fx', 'num_typ2', 'num_typ3', 'num_typ4', 'reg_res', 'st', 'st_res', 'sub_reg', 'telefon', 'wave', 'year', 'asg_code', 'month', 'kod', 'prt_code', 'celltype', 'fshinsp_a', 'num_fish_a', 'fl_reg', 'add_ph', 'county', 'date1', 'dist', 'f_by_p', 'gear', 'prim1', 'prim2', 'pvt_res', 'rig', 'sep_fish', 'time', 'age', 'wp_int', 'var_id', 'alt_flag', 'leader', 'date_published', 'first', 'num_typ6', 'on_list', 'party', 'zip', 'area_nc', 'boat_hrs', 'mode2001', 'muni_res', 'num_typ9', 'new_list', 'mode_asg', 'tsn1', 'tsn2', 'distkeys', 'license', 'monitor', 'compflag', 'art_reef', 'gender', 'tourn', 'turtle', 'date', 'region', 'strat_interval', 'reefcode', 'wp_int_precal', 'imp_rec', 'muni_trp', 'arx_method', 'reef_code', 'reef']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    prim2_common,\n    prim1_common,\n    strat_id,\n    psu_id,\n    add_hrs,\n    area,\n    area_x,\n    catch,\n    cntrbtrs,\n    cnty,\n    cnty_res,\n    coastal,\n    ffdays2,\n    ffdays12,\n    hrsf,\n    id_code,\n    intsite,\n    mode_f,\n    mode_fx,\n    num_typ2,\n    num_typ3,\n    num_typ4,\n    reg_res,\n    st,\n    st_res,\n    sub_reg,\n    telefon,\n    wave,\n    year,\n    asg_code,\n    month,\n    kod,\n    prt_code,\n    celltype,\n    fshinsp_a,\n    num_fish_a,\n    fl_reg,\n    add_ph,\n    county,\n    date1,\n    dist,\n    f_by_p,\n    gear,\n    prim1,\n    prim2,\n    pvt_res,\n    rig,\n    sep_fish,\n    time,\n    age,\n    wp_int,\n    var_id,\n    alt_flag,\n    leader,\n    date_published,\n    first,\n    num_typ6,\n    on_list,\n    party,\n    zip,\n    area_nc,\n    boat_hrs,\n    mode2001,\n    muni_res,\n    num_typ9,\n    new_list,\n    mode_asg,\n    tsn1,\n    tsn2,\n    distkeys,\n    license,\n    monitor,\n    compflag,\n    art_reef,\n    gender,\n    tourn,\n    turtle,\n    date,\n    region,\n    strat_interval,\n    reefcode,\n    wp_int_precal,\n    imp_rec,\n    muni_trp,\n    arx_method,\n    reef_code,\n    reef\n    from \"noaa_dw\".\"raw\".\"trip\"\n\n\n\n)\n\nselect * from merge_cols", "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__trips\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:38.864851Z", "completed_at": "2024-08-02T20:12:38.867416Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:38.868499Z", "completed_at": "2024-08-02T20:12:38.868509Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006396293640136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_transforms.county_fips_codes", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:38.872476Z", "completed_at": "2024-08-02T20:12:38.874787Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:38.875732Z", "completed_at": "2024-08-02T20:12:38.875738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055844783782958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_transforms.state_fips_codes", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:38.879576Z", "completed_at": "2024-08-02T20:12:41.603721Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:41.604688Z", "completed_at": "2024-08-02T20:12:41.604698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.806291341781616, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.stg_noaa__catches", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"common\",\n  \"strat_id\",\n  \"psu_id\",\n  \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"kod\",\n  \"sp_code\",\n  \"claim\",\n  \"release\",\n  \"harvest\",\n  \"claim_unadj\",\n  \"harvest_unadj\",\n  \"release_unadj\",\n  \"tot_len_a\",\n  \"wgt_a\",\n  \"tot_len_b1\",\n  \"wgt_b1\",\n  \"month\",\n  \"tot_cat\",\n  \"wgt_ab1\",\n  \"tot_len\",\n  \"landing\",\n  \"var_id\",\n  \"alt_flag\",\n  \"fl_reg\",\n  \"wp_int\",\n  \"wp_catch\",\n  \"date_published\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(common as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tot_cat as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tot_len as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as catch_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        try_cast(ceiling(try_cast(claim as float)) as int) as num_fish_harvested_observed_adjusted,\n        try_cast(ceiling(try_cast(claim_unadj as float)) as int) as num_fish_harvested_observed_unadjusted,\n        try_cast(ceiling(try_cast(harvest as float)) as int) as num_fish_harvested_unobserved_adjusted,\n        try_cast(ceiling(try_cast(harvest_unadj as float)) as int) as num_fish_harvested_unobserved_unadjusted,\n        try_cast(ceiling(try_cast(release as float)) as int) as num_fish_released_adjusted,\n        try_cast(ceiling(try_cast(release_unadj as float)) as int) as num_fish_released_unadjusted,\n        try_cast(ceiling(try_cast(tot_cat as float)) as int) as total_number_fish_caught,\n        round(try_cast(tot_len_a as double), 2) as total_length_fish_harvested_observed_mm,\n        round(try_cast(tot_len_b1 as double), 2) as total_length_fish_harvested_unobserved_mm,\n        round(try_cast(tot_len as double), 2) as total_length_fish_harvested_mm,\n        round(try_cast(wgt_a as double), 2) as total_weight_fish_harvested_observed_kg,\n        round(try_cast(wgt_b1 as double), 2) as total_weight_fish_harvested_unobserved_kg,\n        round(try_cast(wgt_ab1 as double), 2) as total_weight_fish_harvested_kg,  \n        \n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by catch_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:41.687211Z", "completed_at": "2024-08-02T20:12:41.708789Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:41.709807Z", "completed_at": "2024-08-02T20:12:41.709816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02486872673034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year.b5d6cb5fbd", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_code, common, tot_cat, tot_len, year\n    from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\n    group by id_code, common, tot_cat, tot_len, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:41.712901Z", "completed_at": "2024-08-02T20:12:43.402794Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:43.403890Z", "completed_at": "2024-08-02T20:12:43.403901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7745795249938965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.stg_noaa__sizes", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"month\",\n  \"kod\",\n  \"sp_code\",\n  \"lngth\",\n  \"wgt\",\n  \"lngth_imp\",\n  \"wgt_imp\",\n  \"strat_id\",\n  \"psu_id\",\n  \"common\",\n  \"wp_size\",\n  \"l_in_bin\",\n  \"l_cm_bin\",\n  \"var_id\",\n  \"alt_flag\",\n  \"date_published\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(common as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(wgt as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(lngth as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as size_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        round(try_cast(wgt as double), 2) as fish_weight_kg,\n        round(fish_weight_kg * 2.20462) as fish_weight_lbs,\n        try_cast(wgt_imp as boolean) as imputed_weight,\n        round(try_cast(lngth as double), 2) as fish_length_mm,        \n        round(try_cast(l_cm_bin as double), 2) as fish_length_cm,        \n        round(try_cast(l_in_bin as double), 2) as fish_length_in,\n        try_cast(lngth_imp as boolean) as imputed_length\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by size_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__sizes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:43.490064Z", "completed_at": "2024-08-02T20:12:43.497210Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:43.498125Z", "completed_at": "2024-08-02T20:12:43.498133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010589599609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year.3b7dcbbb9b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_code, common, wgt, lngth, year\n    from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\n    group by id_code, common, wgt, lngth, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:43.501549Z", "completed_at": "2024-08-02T20:12:43.736434Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:43.737401Z", "completed_at": "2024-08-02T20:12:43.737412Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2500796318054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.generate_yaml_file_base_models", "compiled": true, "compiled_code": "\n\ndepends_on: \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\ndepends_on: \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\ndepends_on: \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n\n    \n    version: 2\n\nmodels:\n  - name: base_noaa__catches\n    description: \"\"\n    columns:\n      - name: common\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_id\n        data_type: varchar\n        description: \"\"\n\n      - name: psu_id\n        data_type: varchar\n        description: \"\"\n\n      - name: year\n        data_type: varchar\n        description: \"\"\n\n      - name: st\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_fx\n        data_type: varchar\n        description: \"\"\n\n      - name: area_x\n        data_type: varchar\n        description: \"\"\n\n      - name: id_code\n        data_type: varchar\n        description: \"\"\n\n      - name: sub_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: wave\n        data_type: varchar\n        description: \"\"\n\n      - name: kod\n        data_type: varchar\n        description: \"\"\n\n      - name: sp_code\n        data_type: varchar\n        description: \"\"\n\n      - name: claim\n        data_type: varchar\n        description: \"\"\n\n      - name: release\n        data_type: varchar\n        description: \"\"\n\n      - name: harvest\n        data_type: varchar\n        description: \"\"\n\n      - name: claim_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: harvest_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: release_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_len_a\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_a\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_len_b1\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_b1\n        data_type: varchar\n        description: \"\"\n\n      - name: region\n        data_type: varchar\n        description: \"\"\n\n      - name: month\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_cat\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_ab1\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_len\n        data_type: varchar\n        description: \"\"\n\n      - name: landing\n        data_type: varchar\n        description: \"\"\n\n      - name: var_id\n        data_type: varchar\n        description: \"\"\n\n      - name: alt_flag\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_interval\n        data_type: varchar\n        description: \"\"\n\n      - name: fl_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_catch_precal\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_catch\n        data_type: varchar\n        description: \"\"\n\n      - name: date_published\n        data_type: varchar\n        description: \"\"\n\n      - name: arx_method\n        data_type: varchar\n        description: \"\"\n\n      - name: imp_rec\n        data_type: varchar\n        description: \"\"\n\n      - name: _typex\n        data_type: varchar\n        description: \"\"\n\n      - name: _freqx\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int_precal\n        data_type: varchar\n        description: \"\"\n\n  - name: base_noaa__sizes\n    description: \"\"\n    columns:\n      - name: year\n        data_type: varchar\n        description: \"\"\n\n      - name: st\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_fx\n        data_type: varchar\n        description: \"\"\n\n      - name: area_x\n        data_type: varchar\n        description: \"\"\n\n      - name: id_code\n        data_type: varchar\n        description: \"\"\n\n      - name: sub_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: wave\n        data_type: varchar\n        description: \"\"\n\n      - name: month\n        data_type: varchar\n        description: \"\"\n\n      - name: kod\n        data_type: varchar\n        description: \"\"\n\n      - name: sp_code\n        data_type: varchar\n        description: \"\"\n\n      - name: lngth\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt\n        data_type: varchar\n        description: \"\"\n\n      - name: lngth_imp\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_imp\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_id\n        data_type: varchar\n        description: \"\"\n\n      - name: psu_id\n        data_type: varchar\n        description: \"\"\n\n      - name: common\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_size\n        data_type: varchar\n        description: \"\"\n\n      - name: l_in_bin\n        data_type: varchar\n        description: \"\"\n\n      - name: l_cm_bin\n        data_type: varchar\n        description: \"\"\n\n      - name: var_id\n        data_type: varchar\n        description: \"\"\n\n      - name: alt_flag\n        data_type: varchar\n        description: \"\"\n\n      - name: date_published\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: imp_rec\n        data_type: varchar\n        description: \"\"\n\n  - name: base_noaa__trips\n    description: \"\"\n    columns:\n      - name: prim2_common\n        data_type: varchar\n        description: \"\"\n\n      - name: prim1_common\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_id\n        data_type: varchar\n        description: \"\"\n\n      - name: psu_id\n        data_type: varchar\n        description: \"\"\n\n      - name: add_hrs\n        data_type: varchar\n        description: \"\"\n\n      - name: area\n        data_type: varchar\n        description: \"\"\n\n      - name: area_x\n        data_type: varchar\n        description: \"\"\n\n      - name: catch\n        data_type: varchar\n        description: \"\"\n\n      - name: cntrbtrs\n        data_type: varchar\n        description: \"\"\n\n      - name: cnty\n        data_type: varchar\n        description: \"\"\n\n      - name: cnty_res\n        data_type: varchar\n        description: \"\"\n\n      - name: coastal\n        data_type: varchar\n        description: \"\"\n\n      - name: ffdays2\n        data_type: varchar\n        description: \"\"\n\n      - name: ffdays12\n        data_type: varchar\n        description: \"\"\n\n      - name: hrsf\n        data_type: varchar\n        description: \"\"\n\n      - name: id_code\n        data_type: varchar\n        description: \"\"\n\n      - name: intsite\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_f\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_fx\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ2\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ3\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ4\n        data_type: varchar\n        description: \"\"\n\n      - name: reg_res\n        data_type: varchar\n        description: \"\"\n\n      - name: st\n        data_type: varchar\n        description: \"\"\n\n      - name: st_res\n        data_type: varchar\n        description: \"\"\n\n      - name: sub_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: telefon\n        data_type: varchar\n        description: \"\"\n\n      - name: wave\n        data_type: varchar\n        description: \"\"\n\n      - name: year\n        data_type: varchar\n        description: \"\"\n\n      - name: asg_code\n        data_type: varchar\n        description: \"\"\n\n      - name: month\n        data_type: varchar\n        description: \"\"\n\n      - name: kod\n        data_type: varchar\n        description: \"\"\n\n      - name: prt_code\n        data_type: varchar\n        description: \"\"\n\n      - name: celltype\n        data_type: varchar\n        description: \"\"\n\n      - name: fshinsp_a\n        data_type: varchar\n        description: \"\"\n\n      - name: num_fish_a\n        data_type: varchar\n        description: \"\"\n\n      - name: fl_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: add_ph\n        data_type: varchar\n        description: \"\"\n\n      - name: county\n        data_type: varchar\n        description: \"\"\n\n      - name: date1\n        data_type: varchar\n        description: \"\"\n\n      - name: dist\n        data_type: varchar\n        description: \"\"\n\n      - name: f_by_p\n        data_type: varchar\n        description: \"\"\n\n      - name: gear\n        data_type: varchar\n        description: \"\"\n\n      - name: prim1\n        data_type: varchar\n        description: \"\"\n\n      - name: prim2\n        data_type: varchar\n        description: \"\"\n\n      - name: pvt_res\n        data_type: varchar\n        description: \"\"\n\n      - name: rig\n        data_type: varchar\n        description: \"\"\n\n      - name: sep_fish\n        data_type: varchar\n        description: \"\"\n\n      - name: time\n        data_type: varchar\n        description: \"\"\n\n      - name: age\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int\n        data_type: varchar\n        description: \"\"\n\n      - name: var_id\n        data_type: varchar\n        description: \"\"\n\n      - name: alt_flag\n        data_type: varchar\n        description: \"\"\n\n      - name: leader\n        data_type: varchar\n        description: \"\"\n\n      - name: date_published\n        data_type: varchar\n        description: \"\"\n\n      - name: first\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ6\n        data_type: varchar\n        description: \"\"\n\n      - name: on_list\n        data_type: varchar\n        description: \"\"\n\n      - name: party\n        data_type: varchar\n        description: \"\"\n\n      - name: zip\n        data_type: varchar\n        description: \"\"\n\n      - name: area_nc\n        data_type: varchar\n        description: \"\"\n\n      - name: boat_hrs\n        data_type: varchar\n        description: \"\"\n\n      - name: mode2001\n        data_type: varchar\n        description: \"\"\n\n      - name: muni_res\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ9\n        data_type: varchar\n        description: \"\"\n\n      - name: new_list\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_asg\n        data_type: varchar\n        description: \"\"\n\n      - name: tsn1\n        data_type: varchar\n        description: \"\"\n\n      - name: tsn2\n        data_type: varchar\n        description: \"\"\n\n      - name: distkeys\n        data_type: varchar\n        description: \"\"\n\n      - name: license\n        data_type: varchar\n        description: \"\"\n\n      - name: monitor\n        data_type: varchar\n        description: \"\"\n\n      - name: compflag\n        data_type: varchar\n        description: \"\"\n\n      - name: art_reef\n        data_type: varchar\n        description: \"\"\n\n      - name: gender\n        data_type: varchar\n        description: \"\"\n\n      - name: tourn\n        data_type: varchar\n        description: \"\"\n\n      - name: turtle\n        data_type: varchar\n        description: \"\"\n\n      - name: date\n        data_type: varchar\n        description: \"\"\n\n      - name: region\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_interval\n        data_type: varchar\n        description: \"\"\n\n      - name: reefcode\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int_precal\n        data_type: varchar\n        description: \"\"\n\n      - name: imp_rec\n        data_type: varchar\n        description: \"\"\n\n      - name: muni_trp\n        data_type: varchar\n        description: \"\"\n\n      - name: arx_method\n        data_type: varchar\n        description: \"\"\n\n      - name: reef_code\n        data_type: varchar\n        description: \"\"\n\n      - name: reef\n        data_type: varchar\n        description: \"\"\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:43.753558Z", "completed_at": "2024-08-02T20:12:49.825445Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:49.827375Z", "completed_at": "2024-08-02T20:12:49.827394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.374239444732666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.stg_noaa__trips", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"strat_id\",\n  \"psu_id\",\n  \"area\",\n  \"area_x\",\n  \"catch\",\n  \"cntrbtrs\",\n  \"cnty\",\n  \"cnty_res\",\n  \"coastal\",\n  \"ffdays2\",\n  \"ffdays12\",\n  \"hrsf\",\n  \"id_code\",\n  \"intsite\",\n  \"mode_f\",\n  \"mode_fx\",\n  \"num_typ2\",\n  \"num_typ3\",\n  \"num_typ4\",\n  \"reg_res\",\n  \"st\",\n  \"st_res\",\n  \"sub_reg\",\n  \"wave\",\n  \"year\",\n  \"asg_code\",\n  \"month\",\n  \"kod\",\n  \"prt_code\",\n  \"add_ph\",\n  \"date1\",\n  \"dist\",\n  \"f_by_p\",\n  \"gear\",\n  \"sep_fish\",\n  \"time\",\n  \"wp_int\",\n  \"var_id\",\n  \"alt_flag\",\n  \"leader\",\n  \"date_published\",\n  \"num_typ6\",\n  \"zip\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as trip_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(lpad(cnty, 3, '0') as int) as county_code_where_caught,\n        try_cast(concat(cast(state_code_where_caught as varchar), cast(county_code_where_caught as varchar)) as int) as fips_code_where_caught,\n        try_cast(lpad(st_res, 2, '0') as int) as state_code_where_fisherman_resides,\n        try_cast(lpad(cnty_res, 3, '0') as int) as county_code_where_fisherman_resides,\n        try_cast(concat(cast(state_code_where_fisherman_resides as varchar), cast(county_code_where_fisherman_resides as varchar)) as int) as fips_code_where_fisherman_resides,\n        case\n            when coastal = 'N' then 'Non-coastal county resident'\n            when coastal = 'Y' then 'Coastal county resident'\n            when coastal = 'O' then 'Out-of-State'\n            else NULL\n        end as fisherman_state_residency_status,\n        case\n            when mode_f = '1' then 'Pier/Dock'\n            when mode_f = '2' then 'Jetty/Breakwater/Breachway'\n            when mode_f = '3' then 'Bridge/Causeway'\n            when mode_f = '4' then 'Other man-made'\n            when mode_f = '5' then 'Beach/Bank'\n            when mode_f = '6' then 'Head Boat'\n            when mode_f = '7' then 'Charter Boat'\n            when mode_f = '8' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_uncollapsed,\n        try_cast(ffdays12 as int) as number_of_outings_in_last_year,\n        try_cast(ffdays2 as int) as number_of_outings_in_last_2_months,\n        try_cast(cntrbtrs as int) as number_of_anglers_interviewed,\n        round(try_cast(hrsf as double), 2) as trip_fishing_effort_hours,\n        case\n            when catch = '1' or catch = '3' then true\n            when catch = '2' then false\n            else NULL\n        end as caught,\n        case\n            when \n            try_cast(left(time, 2) as int) between 1 and 23\n            and \n            try_cast(right(time, 2) as int) between 1 and 59\n            then make_time(try_cast(left(time, 2) as int), try_cast(right(time, 2) as int), 0.0)\n            else NULL\n        end as fish_caught_time,\n        make_timestamp(date_part('year', trip_date), \n                        date_part('month', trip_date), \n                        date_part('day', trip_date), \n                        date_part('hour', fish_caught_time), \n                        date_part('minute', fish_caught_time), \n                        date_part('second', fish_caught_time)\n                        ) as fish_caught_datetime,\n        case\n            when date_part('hour', fish_caught_time) between 0 and 5 then 'Before Dawn'\n            when date_part('hour', fish_caught_time) between 6 and 11 then 'Morning'\n            when date_part('hour', fish_caught_time) between 12 and 17 then 'Afternoon'\n            when date_part('hour', fish_caught_time) between 18 and 23 then 'After Dusk'\n            else NULL\n        end as fish_caught_time_of_day\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by trip_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__trips\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.133897Z", "completed_at": "2024-08-02T20:12:50.147895Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.150017Z", "completed_at": "2024-08-02T20:12:50.150034Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021881580352783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year.91756b9da8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_code, year\n    from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n    group by id_code, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.157437Z", "completed_at": "2024-08-02T20:12:50.170020Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.171696Z", "completed_at": "2024-08-02T20:12:50.171716Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018740177154541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name.cdf30988b4", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when species_common_name is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.177850Z", "completed_at": "2024-08-02T20:12:50.188244Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.190060Z", "completed_at": "2024-08-02T20:12:50.190079Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016005754470825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.7c0c7bd69c", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.196485Z", "completed_at": "2024-08-02T20:12:50.209375Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.212039Z", "completed_at": "2024-08-02T20:12:50.212060Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019541501998901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year.1c7b6d880b", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_year is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.217227Z", "completed_at": "2024-08-02T20:12:50.228826Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.231827Z", "completed_at": "2024-08-02T20:12:50.231848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018037080764770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm.ec0cdda650", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when total_length_fish_harvested_mm is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.237981Z", "completed_at": "2024-08-02T20:12:50.248824Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.250904Z", "completed_at": "2024-08-02T20:12:50.250918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017023801803588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught.c1f86bd118", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when total_number_fish_caught is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.256867Z", "completed_at": "2024-08-02T20:12:50.267249Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.268865Z", "completed_at": "2024-08-02T20:12:50.268885Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015445709228515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year.ea7f3d6e05", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, species_common_name, total_number_fish_caught, total_length_fish_harvested_mm, survey_year\n    from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n    group by survey_id, species_common_name, total_number_fish_caught, total_length_fish_harvested_mm, survey_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.275440Z", "completed_at": "2024-08-02T20:12:50.295237Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.297577Z", "completed_at": "2024-08-02T20:12:50.297734Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027020692825317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.not_null_stg_noaa__catches_catch_id.7603e1e6a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect catch_id\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nwhere catch_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.304509Z", "completed_at": "2024-08-02T20:12:50.324032Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.325818Z", "completed_at": "2024-08-02T20:12:50.325835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024698734283447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.unique_stg_noaa__catches_catch_id.56754d28a3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    catch_id as unique_field,\n    count(*) as n_records\n\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nwhere catch_id is not null\ngroup by catch_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.331898Z", "completed_at": "2024-08-02T20:12:50.338674Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.340209Z", "completed_at": "2024-08-02T20:12:50.340225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01174306869506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.top_species", "compiled": true, "compiled_code": "with \nsizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntop_species as (\n\n        select \n        species_common_name, \n        count(species_common_name) as num_trips_where_species_targeted\n        from sizes\n        group by species_common_name\n        order by num_trips_where_species_targeted desc\n        limit 10\n\n)\n\nselect * from top_species", "relation_name": "\"noaa_dw\".\"analytics\".\"top_species\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.345807Z", "completed_at": "2024-08-02T20:12:50.356567Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.359541Z", "completed_at": "2024-08-02T20:12:50.359660Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018261194229125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm.ee2978697c", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_length_cm is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.367159Z", "completed_at": "2024-08-02T20:12:50.387610Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.389927Z", "completed_at": "2024-08-02T20:12:50.389948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027745962142944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in.1754ca6676", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_length_in is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.397097Z", "completed_at": "2024-08-02T20:12:50.410718Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.412644Z", "completed_at": "2024-08-02T20:12:50.412664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01982569694519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm.9cee64e486", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_length_mm is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.420194Z", "completed_at": "2024-08-02T20:12:50.432393Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.434650Z", "completed_at": "2024-08-02T20:12:50.434670Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01909184455871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg.be668c8a6e", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_weight_kg is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.441963Z", "completed_at": "2024-08-02T20:12:50.455326Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.457344Z", "completed_at": "2024-08-02T20:12:50.457359Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020045757293701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name.37f4556c80", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when species_common_name is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.464025Z", "completed_at": "2024-08-02T20:12:50.475701Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.477538Z", "completed_at": "2024-08-02T20:12:50.477554Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017925024032592773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.a4ffba5c5a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.485946Z", "completed_at": "2024-08-02T20:12:50.498364Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.501097Z", "completed_at": "2024-08-02T20:12:50.501117Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021162748336791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.9eede4301f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_year is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.508379Z", "completed_at": "2024-08-02T20:12:50.518956Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.520770Z", "completed_at": "2024-08-02T20:12:50.520792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016724586486816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year.896904c4ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, species_common_name, fish_weight_kg, fish_length_mm, survey_year\n    from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n    group by survey_id, species_common_name, fish_weight_kg, fish_length_mm, survey_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.526467Z", "completed_at": "2024-08-02T20:12:50.539819Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.541457Z", "completed_at": "2024-08-02T20:12:50.541471Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018482446670532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.not_null_stg_noaa__sizes_size_id.0f6052fe92", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect size_id\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nwhere size_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.547026Z", "completed_at": "2024-08-02T20:12:50.556792Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.558228Z", "completed_at": "2024-08-02T20:12:50.558243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01534891128540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.unique_stg_noaa__sizes_size_id.05b5a2e641", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    size_id as unique_field,\n    count(*) as n_records\n\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nwhere size_id is not null\ngroup by size_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.564924Z", "completed_at": "2024-08-02T20:12:50.645728Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.648175Z", "completed_at": "2024-08-02T20:12:50.648195Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09735846519470215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.adhoc_queries", "compiled": true, "compiled_code": "--get number of records in sources\nselect count(*) from \"noaa_dw\".\"raw\".\"catch\"\nselect count(*) from \"noaa_dw\".\"raw\".\"size\"\nselect count(*) from \"noaa_dw\".\"raw\".\"trip\"\n\n--get number of records in base models\nselect count(*) from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n--get number of records in staging models\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--get distinct survey ids in stg_noaa__trips\nselect count(survey_id) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\nselect count(distinct survey_id) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--inspect records with duplicate id_code\nwith catch as (select * from \"noaa_dw\".\"raw\".\"catch\")\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\nwith catch as (select * from \"noaa_dw\".\"raw\".\"size\")\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\nwith catch as (select * from \"noaa_dw\".\"raw\".\"trip\")\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\n--get number of records in staging models\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--find missing years\nwith date_spine as (\n\n                    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 43\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    date_add(cast('1981-01-01' as date), interval (row_number() over (order by 1) - 1) year)\n\n\n    ) as date_year\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_year <= cast('2024-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n\n),\n\nyear_spine as (\n\n                    SELECT year(date_year) as year\n                    from date_spine\n\n)\n\nSELECT distinct year\nFROM year_spine\nLEFT JOIN \"noaa_dw\".\"analytics\".\"stg_noaa__trips\" c ON year_spine.year = c.trip_year\nWHERE c.trip_year IS NULL\n\n--get trips where target species identified and not identified and compare to total number of trips\nselect count(*) as num_trips_total, count(*) - count(species_common_name) as num_trips_without_target_species, count(species_common_name) as num_trips_with_target_species from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n--get top 10 species by number of trips were targeted\nselect sum(num_trips_where_species_targeted)\nfrom\n(\nselect \nspecies_common_name, \ncount(species_common_name) as num_trips_where_species_targeted\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\ngroup by species_common_name\norder by num_trips_where_species_targeted desc\nlimit 10\n)\n\n--create catch rate column partitioned by region\nselect caught, us_region, try_cast(caught as int) / sum(try_cast(caught as int)) over (partition by us_region) as catch_rate from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--\nselect count(*) from analytics.trip_details", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.666420Z", "completed_at": "2024-08-02T20:12:50.909998Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.912265Z", "completed_at": "2024-08-02T20:12:50.912282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28599047660827637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_transforms.generate_yaml_file_staging_models", "compiled": true, "compiled_code": "\n\ndepends_on: \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\ndepends_on: \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\ndepends_on: \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n\n    \n    version: 2\n\nmodels:\n  - name: stg_noaa__sizes\n    description: \"\"\n    columns:\n      - name: size_id\n        data_type: varchar\n        description: \"\"\n\n      - name: survey_id\n        data_type: bigint\n        description: \"\"\n\n      - name: data_publish_date\n        data_type: date\n        description: \"\"\n\n      - name: survey_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_month_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_day_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_date\n        data_type: date\n        description: \"\"\n\n      - name: trip_day_of_week\n        data_type: varchar\n        description: \"\"\n\n      - name: trip_month_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_season\n        data_type: varchar\n        description: \"\"\n\n      - name: sampling_period\n        data_type: varchar\n        description: \"\"\n\n      - name: weekend\n        data_type: boolean\n        description: \"\"\n\n      - name: us_region\n        data_type: varchar\n        description: \"\"\n\n      - name: nautical_zone\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_collapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: state_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: species_common_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fish_weight_kg\n        data_type: double\n        description: \"\"\n\n      - name: fish_weight_lbs\n        data_type: double\n        description: \"\"\n\n      - name: imputed_weight\n        data_type: boolean\n        description: \"\"\n\n      - name: fish_length_mm\n        data_type: double\n        description: \"\"\n\n      - name: fish_length_cm\n        data_type: double\n        description: \"\"\n\n      - name: fish_length_in\n        data_type: double\n        description: \"\"\n\n      - name: imputed_length\n        data_type: boolean\n        description: \"\"\n\n  - name: stg_noaa__catches\n    description: \"\"\n    columns:\n      - name: catch_id\n        data_type: varchar\n        description: \"\"\n\n      - name: survey_id\n        data_type: bigint\n        description: \"\"\n\n      - name: data_publish_date\n        data_type: date\n        description: \"\"\n\n      - name: survey_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_month_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_day_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_date\n        data_type: date\n        description: \"\"\n\n      - name: trip_day_of_week\n        data_type: varchar\n        description: \"\"\n\n      - name: trip_month_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_season\n        data_type: varchar\n        description: \"\"\n\n      - name: sampling_period\n        data_type: varchar\n        description: \"\"\n\n      - name: weekend\n        data_type: boolean\n        description: \"\"\n\n      - name: us_region\n        data_type: varchar\n        description: \"\"\n\n      - name: nautical_zone\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_collapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: state_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: species_common_name\n        data_type: varchar\n        description: \"\"\n\n      - name: num_fish_harvested_observed_adjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_harvested_observed_unadjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_harvested_unobserved_adjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_harvested_unobserved_unadjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_released_adjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_released_unadjusted\n        data_type: integer\n        description: \"\"\n\n      - name: total_number_fish_caught\n        data_type: integer\n        description: \"\"\n\n      - name: total_length_fish_harvested_observed_mm\n        data_type: double\n        description: \"\"\n\n      - name: total_length_fish_harvested_unobserved_mm\n        data_type: double\n        description: \"\"\n\n      - name: total_length_fish_harvested_mm\n        data_type: double\n        description: \"\"\n\n      - name: total_weight_fish_harvested_observed_kg\n        data_type: double\n        description: \"\"\n\n      - name: total_weight_fish_harvested_unobserved_kg\n        data_type: double\n        description: \"\"\n\n      - name: total_weight_fish_harvested_kg\n        data_type: double\n        description: \"\"\n\n  - name: stg_noaa__trips\n    description: \"\"\n    columns:\n      - name: trip_id\n        data_type: varchar\n        description: \"\"\n\n      - name: survey_id\n        data_type: bigint\n        description: \"\"\n\n      - name: data_publish_date\n        data_type: date\n        description: \"\"\n\n      - name: survey_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_month_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_day_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_date\n        data_type: date\n        description: \"\"\n\n      - name: trip_day_of_week\n        data_type: varchar\n        description: \"\"\n\n      - name: trip_month_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_season\n        data_type: varchar\n        description: \"\"\n\n      - name: sampling_period\n        data_type: varchar\n        description: \"\"\n\n      - name: weekend\n        data_type: boolean\n        description: \"\"\n\n      - name: us_region\n        data_type: varchar\n        description: \"\"\n\n      - name: nautical_zone\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_collapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: state_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: county_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: fips_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: state_code_where_fisherman_resides\n        data_type: integer\n        description: \"\"\n\n      - name: county_code_where_fisherman_resides\n        data_type: integer\n        description: \"\"\n\n      - name: fips_code_where_fisherman_resides\n        data_type: integer\n        description: \"\"\n\n      - name: fisherman_state_residency_status\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_uncollapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: number_of_outings_in_last_year\n        data_type: integer\n        description: \"\"\n\n      - name: number_of_outings_in_last_2_months\n        data_type: integer\n        description: \"\"\n\n      - name: number_of_anglers_interviewed\n        data_type: integer\n        description: \"\"\n\n      - name: trip_fishing_effort_hours\n        data_type: double\n        description: \"\"\n\n      - name: caught\n        data_type: boolean\n        description: \"\"\n\n      - name: fish_caught_time\n        data_type: time\n        description: \"\"\n\n      - name: fish_caught_datetime\n        data_type: timestamp\n        description: \"\"\n\n      - name: fish_caught_time_of_day\n        data_type: varchar\n        description: \"\"\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.969760Z", "completed_at": "2024-08-02T20:12:50.979701Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:50.982163Z", "completed_at": "2024-08-02T20:12:50.982180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017472028732299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.32c7e5b173", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:50.989523Z", "completed_at": "2024-08-02T20:12:51.000181Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.002255Z", "completed_at": "2024-08-02T20:12:51.002270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01735210418701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.ae4bd30101", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_year is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.007946Z", "completed_at": "2024-08-02T20:12:51.019051Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.020653Z", "completed_at": "2024-08-02T20:12:51.020665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016064882278442383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year.c15b2ce1b2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, survey_year\n    from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n    group by survey_id, survey_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.025640Z", "completed_at": "2024-08-02T20:12:51.034182Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.035438Z", "completed_at": "2024-08-02T20:12:51.035450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012916803359985352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.not_null_stg_noaa__trips_trip_id.718263be21", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\nwhere trip_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.040560Z", "completed_at": "2024-08-02T20:12:51.049726Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.051242Z", "completed_at": "2024-08-02T20:12:51.051259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01397705078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_transforms.unique_stg_noaa__trips_trip_id.15bb77a9de", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    trip_id as unique_field,\n    count(*) as n_records\n\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\nwhere trip_id is not null\ngroup by trip_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.056485Z", "completed_at": "2024-08-02T20:12:51.084455Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.086251Z", "completed_at": "2024-08-02T20:12:51.086267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0334620475769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.method_catches", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.fishing_method_uncollapsed,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_method_uncollapsed is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_method_uncollapsed,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_method_uncollapsed\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "relation_name": "\"noaa_dw\".\"analytics\".\"method_catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.091533Z", "completed_at": "2024-08-02T20:12:51.128349Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.130416Z", "completed_at": "2024-08-02T20:12:51.130435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042473793029785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.region_catches", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.us_region,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.us_region is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        us_region,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on us_region\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "relation_name": "\"noaa_dw\".\"analytics\".\"region_catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.135806Z", "completed_at": "2024-08-02T20:12:51.166588Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.168158Z", "completed_at": "2024-08-02T20:12:51.168170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03585529327392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.season_catches", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.fishing_season,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_season is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_season,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_season\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "relation_name": "\"noaa_dw\".\"analytics\".\"season_catches\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-02T20:12:51.174427Z", "completed_at": "2024-08-02T20:12:51.216081Z"}, {"name": "execute", "started_at": "2024-08-02T20:12:51.217745Z", "completed_at": "2024-08-02T20:12:51.217763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04747486114501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_transforms.trip_details", "compiled": true, "compiled_code": "with  __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), catches as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n\n),\n\nsizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntrip_details as (\n        \n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_where_caught,\n        t.state_where_fisherman_resides,\n        t.county_where_caught,\n        t.county_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        s.species_common_name,\n        s.fish_weight_kg,\n        s.imputed_weight,\n        s.fish_length_in,\n        s.fish_length_cm,\n        s.imputed_length,\n        c.num_fish_harvested_observed_adjusted,\n        c.num_fish_harvested_observed_unadjusted,\n        c.num_fish_harvested_unobserved_adjusted,\n        c.num_fish_harvested_unobserved_unadjusted,\n        c.num_fish_released_adjusted,\n        c.num_fish_released_unadjusted,\n        c.total_number_fish_caught,\n        c.total_length_fish_harvested_observed_mm,\n        c.total_length_fish_harvested_unobserved_mm,\n        c.total_length_fish_harvested_mm,\n        c.total_weight_fish_harvested_observed_kg,\n        c.total_weight_fish_harvested_unobserved_kg,\n        c.total_weight_fish_harvested_kg\n        from trips t\n        left join catches c on c.survey_id = t.survey_id\n        left join sizes s on s.survey_id = t.survey_id\n\n)\n\nselect * from trip_details", "relation_name": "\"noaa_dw\".\"analytics\".\"trip_details\""}], "elapsed_time": 16.15336585044861, "args": {"quiet": false, "exclude": [], "log_level_file": "debug", "send_anonymous_usage_stats": true, "version_check": true, "empty_catalog": false, "select": [], "print": true, "which": "generate", "log_format": "default", "partial_parse_file_diff": true, "cache_selected_only": false, "log_path": "/app/dbt_transforms/logs", "static": false, "log_level": "info", "project_dir": "/app/dbt_transforms", "compile": true, "log_file_max_bytes": 10485760, "static_parser": true, "introspect": true, "macro_debugging": false, "populate_cache": true, "indirect_selection": "eager", "write_json": true, "profiles_dir": "/app/.dbt", "use_colors": true, "enable_legacy_logger": false, "defer": false, "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "use_colors_file": true, "strict_mode": false, "require_explicit_package_overrides_for_builtin_materializations": false, "printer_width": 80, "show_resource_report": false, "favor_state": false, "log_format_file": "debug", "invocation_command": "dbt docs generate", "partial_parse": true}}