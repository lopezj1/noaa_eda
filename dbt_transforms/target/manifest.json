{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.17", "generated_at": "2024-08-02T20:12:31.472056Z", "invocation_id": "b7c58867-c9c9-4c12-968f-866efcce5811", "env": {}, "project_name": "dbt_transforms", "project_id": "f8a4777b9dc59dc9aacfa8b1aac3f7c7", "user_id": "cc65bcc3-18e7-4bf4-9b2f-1fe82b428ff8", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.dbt_transforms.season_catches": {"database": "noaa_dw", "schema": "analytics", "name": "season_catches", "resource_type": "model", "package_name": "dbt_transforms", "path": "_marts/season_catches.sql", "original_file_path": "models/_marts/season_catches.sql", "unique_id": "model.dbt_transforms.season_catches", "fqn": ["dbt_transforms", "_marts", "season_catches"], "alias": "season_catches", "checksum": {"name": "sha256", "checksum": "9e223f6bf42deba48e570e6c3d3380d281ca203e84b298e6d682db4a7e4242ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1722629553.4461336, "relation_name": "\"noaa_dw\".\"analytics\".\"season_catches\"", "raw_code": "with\nsizes as (\n\n        select * from {{ ref('stg_noaa__sizes') }}\n\n),\n\ntrips as (\n\n        select * from {{ ref('int_trips_fips_join') }}\n\n),\n\ntop_species as (\n\n        select * from {{ ref('top_species') }}\n\n),\n\njoined as (\n\n        select\n        t.fishing_season,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_season is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_season,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_season\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "int_trips_fips_join", "package": null, "version": null}, {"name": "top_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.top_species"]}, "compiled_path": "target/compiled/dbt_transforms/models/_marts/season_catches.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.fishing_season,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_season is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_season,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_season\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_transforms.int_trips_fips_join", "sql": " __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.top_species": {"database": "noaa_dw", "schema": "analytics", "name": "top_species", "resource_type": "model", "package_name": "dbt_transforms", "path": "_marts/top_species.sql", "original_file_path": "models/_marts/top_species.sql", "unique_id": "model.dbt_transforms.top_species", "fqn": ["dbt_transforms", "_marts", "top_species"], "alias": "top_species", "checksum": {"name": "sha256", "checksum": "69a74670880b761b6265deadb4da75c8487070b5ca49a390277908a42ad75def"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1722629553.4932988, "relation_name": "\"noaa_dw\".\"analytics\".\"top_species\"", "raw_code": "with \nsizes as (\n\n        select * from {{ ref('stg_noaa__sizes') }}\n\n),\n\ntop_species as (\n\n        select \n        species_common_name, \n        count(species_common_name) as num_trips_where_species_targeted\n        from sizes\n        group by species_common_name\n        order by num_trips_where_species_targeted desc\n        limit 10\n\n)\n\nselect * from top_species", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/_marts/top_species.sql", "compiled": true, "compiled_code": "with \nsizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntop_species as (\n\n        select \n        species_common_name, \n        count(species_common_name) as num_trips_where_species_targeted\n        from sizes\n        group by species_common_name\n        order by num_trips_where_species_targeted desc\n        limit 10\n\n)\n\nselect * from top_species", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.trip_details": {"database": "noaa_dw", "schema": "analytics", "name": "trip_details", "resource_type": "model", "package_name": "dbt_transforms", "path": "_marts/trip_details.sql", "original_file_path": "models/_marts/trip_details.sql", "unique_id": "model.dbt_transforms.trip_details", "fqn": ["dbt_transforms", "_marts", "trip_details"], "alias": "trip_details", "checksum": {"name": "sha256", "checksum": "68265523d4ad483d98a4a2cf23f1d250d7b0c330bd592a141ca8edc94bdd69be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1722629553.4966912, "relation_name": "\"noaa_dw\".\"analytics\".\"trip_details\"", "raw_code": "with catches as (\n\n        select * from {{ ref('stg_noaa__catches') }}\n\n),\n\nsizes as (\n\n        select * from {{ ref('stg_noaa__sizes') }}\n\n),\n\ntrips as (\n\n        select * from {{ ref('int_trips_fips_join') }}\n\n),\n\ntrip_details as (\n        \n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_where_caught,\n        t.state_where_fisherman_resides,\n        t.county_where_caught,\n        t.county_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        s.species_common_name,\n        s.fish_weight_kg,\n        s.imputed_weight,\n        s.fish_length_in,\n        s.fish_length_cm,\n        s.imputed_length,\n        c.num_fish_harvested_observed_adjusted,\n        c.num_fish_harvested_observed_unadjusted,\n        c.num_fish_harvested_unobserved_adjusted,\n        c.num_fish_harvested_unobserved_unadjusted,\n        c.num_fish_released_adjusted,\n        c.num_fish_released_unadjusted,\n        c.total_number_fish_caught,\n        c.total_length_fish_harvested_observed_mm,\n        c.total_length_fish_harvested_unobserved_mm,\n        c.total_length_fish_harvested_mm,\n        c.total_weight_fish_harvested_observed_kg,\n        c.total_weight_fish_harvested_unobserved_kg,\n        c.total_weight_fish_harvested_kg\n        from trips t\n        left join catches c on c.survey_id = t.survey_id\n        left join sizes s on s.survey_id = t.survey_id\n\n)\n\nselect * from trip_details", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}, {"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "int_trips_fips_join", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transforms.stg_noaa__catches", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.int_trips_fips_join"]}, "compiled_path": "target/compiled/dbt_transforms/models/_marts/trip_details.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), catches as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n\n),\n\nsizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntrip_details as (\n        \n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_where_caught,\n        t.state_where_fisherman_resides,\n        t.county_where_caught,\n        t.county_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        s.species_common_name,\n        s.fish_weight_kg,\n        s.imputed_weight,\n        s.fish_length_in,\n        s.fish_length_cm,\n        s.imputed_length,\n        c.num_fish_harvested_observed_adjusted,\n        c.num_fish_harvested_observed_unadjusted,\n        c.num_fish_harvested_unobserved_adjusted,\n        c.num_fish_harvested_unobserved_unadjusted,\n        c.num_fish_released_adjusted,\n        c.num_fish_released_unadjusted,\n        c.total_number_fish_caught,\n        c.total_length_fish_harvested_observed_mm,\n        c.total_length_fish_harvested_unobserved_mm,\n        c.total_length_fish_harvested_mm,\n        c.total_weight_fish_harvested_observed_kg,\n        c.total_weight_fish_harvested_unobserved_kg,\n        c.total_weight_fish_harvested_kg\n        from trips t\n        left join catches c on c.survey_id = t.survey_id\n        left join sizes s on s.survey_id = t.survey_id\n\n)\n\nselect * from trip_details", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_transforms.int_trips_fips_join", "sql": " __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.region_catches": {"database": "noaa_dw", "schema": "analytics", "name": "region_catches", "resource_type": "model", "package_name": "dbt_transforms", "path": "_marts/region_catches.sql", "original_file_path": "models/_marts/region_catches.sql", "unique_id": "model.dbt_transforms.region_catches", "fqn": ["dbt_transforms", "_marts", "region_catches"], "alias": "region_catches", "checksum": {"name": "sha256", "checksum": "e2735ea49e8eb5e24d8eee99758568138b349aad24ee2da4949c797ac46f49df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1722629553.5008762, "relation_name": "\"noaa_dw\".\"analytics\".\"region_catches\"", "raw_code": "with\nsizes as (\n\n        select * from {{ ref('stg_noaa__sizes') }}\n\n),\n\ntrips as (\n\n        select * from {{ ref('int_trips_fips_join') }}\n\n),\n\ntop_species as (\n\n        select * from {{ ref('top_species') }}\n\n),\n\njoined as (\n\n        select\n        t.us_region,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.us_region is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        us_region,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on us_region\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "int_trips_fips_join", "package": null, "version": null}, {"name": "top_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.top_species"]}, "compiled_path": "target/compiled/dbt_transforms/models/_marts/region_catches.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.us_region,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.us_region is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        us_region,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on us_region\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_transforms.int_trips_fips_join", "sql": " __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.method_catches": {"database": "noaa_dw", "schema": "analytics", "name": "method_catches", "resource_type": "model", "package_name": "dbt_transforms", "path": "_marts/method_catches.sql", "original_file_path": "models/_marts/method_catches.sql", "unique_id": "model.dbt_transforms.method_catches", "fqn": ["dbt_transforms", "_marts", "method_catches"], "alias": "method_catches", "checksum": {"name": "sha256", "checksum": "0bb50a038128cb106cbc21af1e4734ecded5688a3b226f729326f1e873be30cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1722629553.5055661, "relation_name": "\"noaa_dw\".\"analytics\".\"method_catches\"", "raw_code": "with\nsizes as (\n\n        select * from {{ ref('stg_noaa__sizes') }}\n\n),\n\ntrips as (\n\n        select * from {{ ref('int_trips_fips_join') }}\n\n),\n\ntop_species as (\n\n        select * from {{ ref('top_species') }}\n\n),\n\njoined as (\n\n        select\n        t.fishing_method_uncollapsed,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_method_uncollapsed is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_method_uncollapsed,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_method_uncollapsed\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "int_trips_fips_join", "package": null, "version": null}, {"name": "top_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.top_species"]}, "compiled_path": "target/compiled/dbt_transforms/models/_marts/method_catches.sql", "compiled": true, "compiled_code": "with\n __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n), sizes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n),\n\ntrips as (\n\n        select * from __dbt__cte__int_trips_fips_join\n\n),\n\ntop_species as (\n\n        select * from \"noaa_dw\".\"analytics\".\"top_species\"\n\n),\n\njoined as (\n\n        select\n        t.fishing_method_uncollapsed,\n        s.species_common_name,\n        try_cast(t.caught as int) as caught\n        from trips t\n        left join sizes s on s.survey_id = t.survey_id\n        where \n        t.fishing_method_uncollapsed is not null\n        and\n        t.caught is not null\n        and\n        s.species_common_name in (select species_common_name from top_species)\n\n),\n\nwindowed as (\n\n        select\n        fishing_method_uncollapsed,\n        species_common_name,\n        caught / sum(caught) over (partition by species_common_name) as catch_rate \n        from joined        \n\n),\n\npivoted as (\n\n        pivot windowed \n        on fishing_method_uncollapsed\n        using sum(catch_rate)\n        order by species_common_name\n\n)\n\nselect * from pivoted", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_transforms.int_trips_fips_join", "sql": " __dbt__cte__int_trips_fips_join as (\nwith trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.int_trips_fips_join": {"database": "noaa_dw", "schema": "analytics", "name": "int_trips_fips_join", "resource_type": "model", "package_name": "dbt_transforms", "path": "intermediate/int_trips_fips_join.sql", "original_file_path": "models/intermediate/int_trips_fips_join.sql", "unique_id": "model.dbt_transforms.int_trips_fips_join", "fqn": ["dbt_transforms", "intermediate", "int_trips_fips_join"], "alias": "int_trips_fips_join", "checksum": {"name": "sha256", "checksum": "8e900fc311274d5f3ee596fed0279f729dc9be25da2f1de929edbc11cc20759b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1722629553.50923, "relation_name": null, "raw_code": "with trips as (\n\n        select * from {{ ref('stg_noaa__trips') }}\n\n),\n\nstate_fips_codes as (\n\n        select * from {{ ref('state_fips_codes') }}\n\n),\n\ncounty_fips_codes as (\n\n        select * from {{ ref('county_fips_codes') }}\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined", "language": "sql", "refs": [{"name": "stg_noaa__trips", "package": null, "version": null}, {"name": "state_fips_codes", "package": null, "version": null}, {"name": "county_fips_codes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transforms.stg_noaa__trips", "seed.dbt_transforms.state_fips_codes", "seed.dbt_transforms.county_fips_codes"]}, "compiled_path": "target/compiled/dbt_transforms/models/intermediate/int_trips_fips_join.sql", "compiled": true, "compiled_code": "with trips as (\n\n        select * from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n),\n\nstate_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"state_fips_codes\"\n\n),\n\ncounty_fips_codes as (\n\n        select * from \"noaa_dw\".\"analytics\".\"county_fips_codes\"\n\n),\n\ntrips_fips_joined as (\n\n        select\n        t.survey_id,\n        t.data_publish_date,\n        t.trip_year,\n        t.trip_month_num,\n        t.trip_day_num,\n        t.trip_date,\n        t.trip_day_of_week,\n        t.trip_month_name,\n        t.fishing_season,\n        t.sampling_period,\n        t.weekend,\n        t.us_region,\n        t.nautical_zone,\n        t.fishing_method_collapsed,\n        t.state_code_where_caught,\n        s2.state_name as state_where_caught,\n        t.county_code_where_caught,\n        c2.county_name as county_where_caught,\n        t.fips_code_where_caught,\n        t.state_code_where_fisherman_resides,\n        s1.state_name as state_where_fisherman_resides,\n        t.county_code_where_fisherman_resides,\n        c1.county_name as county_where_fisherman_resides,\n        t.fips_code_where_fisherman_resides,\n        t.fisherman_state_residency_status,\n        t.fishing_method_uncollapsed,\n        t.number_of_outings_in_last_year,\n        t.number_of_outings_in_last_2_months,\n        t.number_of_anglers_interviewed,\n        t.trip_fishing_effort_hours,\n        t.caught,\n        t.fish_caught_time,\n        t.fish_caught_datetime,\n        t.fish_caught_time_of_day\n        from trips t\n        left join county_fips_codes c1 on c1.county_fips = t.fips_code_where_fisherman_resides\n        left join county_fips_codes c2 on c2.county_fips = t.fips_code_where_caught\n        left join state_fips_codes s1 on s1.state_fips = t.state_code_where_fisherman_resides\n        left join state_fips_codes s2 on s2.state_fips = t.state_code_where_caught\n\n)\n\nselect * from trips_fips_joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.stg_noaa__sizes": {"database": "noaa_dw", "schema": "analytics", "name": "stg_noaa__sizes", "resource_type": "model", "package_name": "dbt_transforms", "path": "staging/noaa/stg_noaa__sizes.sql", "original_file_path": "models/staging/noaa/stg_noaa__sizes.sql", "unique_id": "model.dbt_transforms.stg_noaa__sizes", "fqn": ["dbt_transforms", "staging", "noaa", "stg_noaa__sizes"], "alias": "stg_noaa__sizes", "checksum": {"name": "sha256", "checksum": "ef6fd6ad8ff99860642772c43ae428b2904c75615603b52096496095da8c35fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"size_id": {"name": "size_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "survey_id": {"name": "survey_id", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "data_publish_date": {"name": "data_publish_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "survey_year": {"name": "survey_year", "description": "", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "trip_year": {"name": "trip_year", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_month_num": {"name": "trip_month_num", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_day_num": {"name": "trip_day_num", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_date": {"name": "trip_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "trip_day_of_week": {"name": "trip_day_of_week", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "trip_month_name": {"name": "trip_month_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_season": {"name": "fishing_season", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sampling_period": {"name": "sampling_period", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "weekend": {"name": "weekend", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "us_region": {"name": "us_region", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "nautical_zone": {"name": "nautical_zone", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_method_collapsed": {"name": "fishing_method_collapsed", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "state_code_where_caught": {"name": "state_code_where_caught", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "species_common_name": {"name": "species_common_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fish_weight_kg": {"name": "fish_weight_kg", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fish_weight_lbs": {"name": "fish_weight_lbs", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "imputed_weight": {"name": "imputed_weight", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "fish_length_mm": {"name": "fish_length_mm", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fish_length_cm": {"name": "fish_length_cm", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "fish_length_in": {"name": "fish_length_in", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "imputed_length": {"name": "imputed_length", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://models/staging/noaa/_noaa__stg_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1722629554.4387014, "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"", "raw_code": "{% set relation = ref('base_noaa__sizes') %}\n{% set null_proportion = 0.75 %}\n{% set id_column = 'id_code' %}\n{% set match_pattern = '[0-9]{16}' %}\n{% set replace_pattern = '[^0-9]' %}\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    {{ dbt_utils.star(from=relation, except=drop_cols_high_nulls(relation, null_proportion)) }}\n    from {{ relation }}\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    {{ filter_id_code('drop_cols', id_column, match_pattern, replace_pattern) }}\n\n),\n\nrenamed as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['id_code','common','wgt','lngth','year']) }} as size_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        round(try_cast(wgt as double), 2) as fish_weight_kg,\n        round(fish_weight_kg * 2.20462) as fish_weight_lbs,\n        try_cast(wgt_imp as boolean) as imputed_weight,\n        round(try_cast(lngth as double), 2) as fish_length_mm,        \n        round(try_cast(l_cm_bin as double), 2) as fish_length_cm,        \n        round(try_cast(l_in_bin as double), 2) as fish_length_in,\n        try_cast(lngth_imp as boolean) as imputed_length\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\n{{ dbt_utils.snowflake__deduplicate(\n    relation='renamed',\n    partition_by='size_id',\n    order_by='survey_year desc',\n   )\n}}\n\n)\n\nselect * from deduplicated", "language": "sql", "refs": [{"name": "base_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.drop_cols_high_nulls", "macro.dbt_utils.star", "macro.dbt_transforms.filter_id_code", "macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.snowflake__deduplicate"], "nodes": ["model.dbt_transforms.base_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/stg_noaa__sizes.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"month\",\n  \"kod\",\n  \"sp_code\",\n  \"lngth\",\n  \"wgt\",\n  \"lngth_imp\",\n  \"wgt_imp\",\n  \"strat_id\",\n  \"psu_id\",\n  \"common\",\n  \"wp_size\",\n  \"l_in_bin\",\n  \"l_cm_bin\",\n  \"var_id\",\n  \"alt_flag\",\n  \"date_published\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(common as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(wgt as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(lngth as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as size_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        round(try_cast(wgt as double), 2) as fish_weight_kg,\n        round(fish_weight_kg * 2.20462) as fish_weight_lbs,\n        try_cast(wgt_imp as boolean) as imputed_weight,\n        round(try_cast(lngth as double), 2) as fish_length_mm,        \n        round(try_cast(l_cm_bin as double), 2) as fish_length_cm,        \n        round(try_cast(l_in_bin as double), 2) as fish_length_in,\n        try_cast(lngth_imp as boolean) as imputed_length\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by size_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.stg_noaa__catches": {"database": "noaa_dw", "schema": "analytics", "name": "stg_noaa__catches", "resource_type": "model", "package_name": "dbt_transforms", "path": "staging/noaa/stg_noaa__catches.sql", "original_file_path": "models/staging/noaa/stg_noaa__catches.sql", "unique_id": "model.dbt_transforms.stg_noaa__catches", "fqn": ["dbt_transforms", "staging", "noaa", "stg_noaa__catches"], "alias": "stg_noaa__catches", "checksum": {"name": "sha256", "checksum": "f436102002c1d496ff40b5f112b06b03940b764be7676372c735cff3d78310b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"catch_id": {"name": "catch_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "survey_id": {"name": "survey_id", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "data_publish_date": {"name": "data_publish_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "survey_year": {"name": "survey_year", "description": "", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "trip_year": {"name": "trip_year", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_month_num": {"name": "trip_month_num", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_day_num": {"name": "trip_day_num", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_date": {"name": "trip_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "trip_day_of_week": {"name": "trip_day_of_week", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "trip_month_name": {"name": "trip_month_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_season": {"name": "fishing_season", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sampling_period": {"name": "sampling_period", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "weekend": {"name": "weekend", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "us_region": {"name": "us_region", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "nautical_zone": {"name": "nautical_zone", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_method_collapsed": {"name": "fishing_method_collapsed", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "state_code_where_caught": {"name": "state_code_where_caught", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "species_common_name": {"name": "species_common_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_fish_harvested_observed_adjusted": {"name": "num_fish_harvested_observed_adjusted", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "num_fish_harvested_observed_unadjusted": {"name": "num_fish_harvested_observed_unadjusted", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "num_fish_harvested_unobserved_adjusted": {"name": "num_fish_harvested_unobserved_adjusted", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "num_fish_harvested_unobserved_unadjusted": {"name": "num_fish_harvested_unobserved_unadjusted", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "num_fish_released_adjusted": {"name": "num_fish_released_adjusted", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "num_fish_released_unadjusted": {"name": "num_fish_released_unadjusted", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_number_fish_caught": {"name": "total_number_fish_caught", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "total_length_fish_harvested_observed_mm": {"name": "total_length_fish_harvested_observed_mm", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "total_length_fish_harvested_unobserved_mm": {"name": "total_length_fish_harvested_unobserved_mm", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "total_length_fish_harvested_mm": {"name": "total_length_fish_harvested_mm", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "total_weight_fish_harvested_observed_kg": {"name": "total_weight_fish_harvested_observed_kg", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "total_weight_fish_harvested_unobserved_kg": {"name": "total_weight_fish_harvested_unobserved_kg", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "total_weight_fish_harvested_kg": {"name": "total_weight_fish_harvested_kg", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://models/staging/noaa/_noaa__stg_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1722629554.4330807, "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__catches\"", "raw_code": "{% set relation = ref('base_noaa__catches') %}\n{% set null_proportion = 0.75 %}\n{% set id_column = 'id_code' %}\n{% set match_pattern = '[0-9]{16}' %}\n{% set replace_pattern = '[^0-9]' %}\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    {{ dbt_utils.star(from=relation, except=drop_cols_high_nulls(relation, null_proportion)) }}\n    from {{ relation }}\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    {{ filter_id_code('drop_cols', id_column, match_pattern, replace_pattern) }}\n\n),\n\nrenamed as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['id_code','common','tot_cat','tot_len','year']) }} as catch_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        try_cast(ceiling(try_cast(claim as float)) as int) as num_fish_harvested_observed_adjusted,\n        try_cast(ceiling(try_cast(claim_unadj as float)) as int) as num_fish_harvested_observed_unadjusted,\n        try_cast(ceiling(try_cast(harvest as float)) as int) as num_fish_harvested_unobserved_adjusted,\n        try_cast(ceiling(try_cast(harvest_unadj as float)) as int) as num_fish_harvested_unobserved_unadjusted,\n        try_cast(ceiling(try_cast(release as float)) as int) as num_fish_released_adjusted,\n        try_cast(ceiling(try_cast(release_unadj as float)) as int) as num_fish_released_unadjusted,\n        try_cast(ceiling(try_cast(tot_cat as float)) as int) as total_number_fish_caught,\n        round(try_cast(tot_len_a as double), 2) as total_length_fish_harvested_observed_mm,\n        round(try_cast(tot_len_b1 as double), 2) as total_length_fish_harvested_unobserved_mm,\n        round(try_cast(tot_len as double), 2) as total_length_fish_harvested_mm,\n        round(try_cast(wgt_a as double), 2) as total_weight_fish_harvested_observed_kg,\n        round(try_cast(wgt_b1 as double), 2) as total_weight_fish_harvested_unobserved_kg,\n        round(try_cast(wgt_ab1 as double), 2) as total_weight_fish_harvested_kg,  \n        \n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\n{{ dbt_utils.snowflake__deduplicate(\n    relation='renamed',\n    partition_by='catch_id',\n    order_by='survey_year desc',\n   )\n}}\n\n)\n\nselect * from deduplicated", "language": "sql", "refs": [{"name": "base_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.drop_cols_high_nulls", "macro.dbt_utils.star", "macro.dbt_transforms.filter_id_code", "macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.snowflake__deduplicate"], "nodes": ["model.dbt_transforms.base_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/stg_noaa__catches.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"common\",\n  \"strat_id\",\n  \"psu_id\",\n  \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"kod\",\n  \"sp_code\",\n  \"claim\",\n  \"release\",\n  \"harvest\",\n  \"claim_unadj\",\n  \"harvest_unadj\",\n  \"release_unadj\",\n  \"tot_len_a\",\n  \"wgt_a\",\n  \"tot_len_b1\",\n  \"wgt_b1\",\n  \"month\",\n  \"tot_cat\",\n  \"wgt_ab1\",\n  \"tot_len\",\n  \"landing\",\n  \"var_id\",\n  \"alt_flag\",\n  \"fl_reg\",\n  \"wp_int\",\n  \"wp_catch\",\n  \"date_published\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(common as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tot_cat as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tot_len as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as catch_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(common as varchar) as species_common_name,\n        try_cast(ceiling(try_cast(claim as float)) as int) as num_fish_harvested_observed_adjusted,\n        try_cast(ceiling(try_cast(claim_unadj as float)) as int) as num_fish_harvested_observed_unadjusted,\n        try_cast(ceiling(try_cast(harvest as float)) as int) as num_fish_harvested_unobserved_adjusted,\n        try_cast(ceiling(try_cast(harvest_unadj as float)) as int) as num_fish_harvested_unobserved_unadjusted,\n        try_cast(ceiling(try_cast(release as float)) as int) as num_fish_released_adjusted,\n        try_cast(ceiling(try_cast(release_unadj as float)) as int) as num_fish_released_unadjusted,\n        try_cast(ceiling(try_cast(tot_cat as float)) as int) as total_number_fish_caught,\n        round(try_cast(tot_len_a as double), 2) as total_length_fish_harvested_observed_mm,\n        round(try_cast(tot_len_b1 as double), 2) as total_length_fish_harvested_unobserved_mm,\n        round(try_cast(tot_len as double), 2) as total_length_fish_harvested_mm,\n        round(try_cast(wgt_a as double), 2) as total_weight_fish_harvested_observed_kg,\n        round(try_cast(wgt_b1 as double), 2) as total_weight_fish_harvested_unobserved_kg,\n        round(try_cast(wgt_ab1 as double), 2) as total_weight_fish_harvested_kg,  \n        \n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by catch_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.stg_noaa__trips": {"database": "noaa_dw", "schema": "analytics", "name": "stg_noaa__trips", "resource_type": "model", "package_name": "dbt_transforms", "path": "staging/noaa/stg_noaa__trips.sql", "original_file_path": "models/staging/noaa/stg_noaa__trips.sql", "unique_id": "model.dbt_transforms.stg_noaa__trips", "fqn": ["dbt_transforms", "staging", "noaa", "stg_noaa__trips"], "alias": "stg_noaa__trips", "checksum": {"name": "sha256", "checksum": "17b8c17d1b924d5c51896989bf40d80c51acd0e20b77e0719357865039f70cfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"trip_id": {"name": "trip_id", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "survey_id": {"name": "survey_id", "description": "", "meta": {}, "data_type": "bigint", "constraints": [], "quote": null, "tags": []}, "data_publish_date": {"name": "data_publish_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "survey_year": {"name": "survey_year", "description": "", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "trip_year": {"name": "trip_year", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_month_num": {"name": "trip_month_num", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_day_num": {"name": "trip_day_num", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_date": {"name": "trip_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "trip_day_of_week": {"name": "trip_day_of_week", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "trip_month_name": {"name": "trip_month_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_season": {"name": "fishing_season", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sampling_period": {"name": "sampling_period", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "weekend": {"name": "weekend", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "us_region": {"name": "us_region", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "nautical_zone": {"name": "nautical_zone", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_method_collapsed": {"name": "fishing_method_collapsed", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "state_code_where_caught": {"name": "state_code_where_caught", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "county_code_where_caught": {"name": "county_code_where_caught", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fips_code_where_caught": {"name": "fips_code_where_caught", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "state_code_where_fisherman_resides": {"name": "state_code_where_fisherman_resides", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "county_code_where_fisherman_resides": {"name": "county_code_where_fisherman_resides", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fips_code_where_fisherman_resides": {"name": "fips_code_where_fisherman_resides", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "fisherman_state_residency_status": {"name": "fisherman_state_residency_status", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fishing_method_uncollapsed": {"name": "fishing_method_uncollapsed", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "number_of_outings_in_last_year": {"name": "number_of_outings_in_last_year", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "number_of_outings_in_last_2_months": {"name": "number_of_outings_in_last_2_months", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "number_of_anglers_interviewed": {"name": "number_of_anglers_interviewed", "description": "", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "trip_fishing_effort_hours": {"name": "trip_fishing_effort_hours", "description": "", "meta": {}, "data_type": "double", "constraints": [], "quote": null, "tags": []}, "caught": {"name": "caught", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "fish_caught_time": {"name": "fish_caught_time", "description": "", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": []}, "fish_caught_datetime": {"name": "fish_caught_datetime", "description": "", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "tags": []}, "fish_caught_time_of_day": {"name": "fish_caught_time_of_day", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://models/staging/noaa/_noaa__stg_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1722629554.3648984, "relation_name": "\"noaa_dw\".\"analytics\".\"stg_noaa__trips\"", "raw_code": "{% set relation = ref('base_noaa__trips') %}\n{% set null_proportion = 0.75 %}\n{% set id_column = 'id_code' %}\n{% set match_pattern = '[0-9]{16}' %}\n{% set replace_pattern = '[^0-9]' %}\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    {{ dbt_utils.star(from=relation, except=drop_cols_high_nulls(relation, null_proportion)) }}\n    from {{ relation }}\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    {{ filter_id_code('drop_cols', id_column, match_pattern, replace_pattern) }}\n\n),\n\nrenamed as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['id_code', 'year']) }} as trip_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(lpad(cnty, 3, '0') as int) as county_code_where_caught,\n        try_cast(concat(cast(state_code_where_caught as varchar), cast(county_code_where_caught as varchar)) as int) as fips_code_where_caught,\n        try_cast(lpad(st_res, 2, '0') as int) as state_code_where_fisherman_resides,\n        try_cast(lpad(cnty_res, 3, '0') as int) as county_code_where_fisherman_resides,\n        try_cast(concat(cast(state_code_where_fisherman_resides as varchar), cast(county_code_where_fisherman_resides as varchar)) as int) as fips_code_where_fisherman_resides,\n        case\n            when coastal = 'N' then 'Non-coastal county resident'\n            when coastal = 'Y' then 'Coastal county resident'\n            when coastal = 'O' then 'Out-of-State'\n            else NULL\n        end as fisherman_state_residency_status,\n        case\n            when mode_f = '1' then 'Pier/Dock'\n            when mode_f = '2' then 'Jetty/Breakwater/Breachway'\n            when mode_f = '3' then 'Bridge/Causeway'\n            when mode_f = '4' then 'Other man-made'\n            when mode_f = '5' then 'Beach/Bank'\n            when mode_f = '6' then 'Head Boat'\n            when mode_f = '7' then 'Charter Boat'\n            when mode_f = '8' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_uncollapsed,\n        try_cast(ffdays12 as int) as number_of_outings_in_last_year,\n        try_cast(ffdays2 as int) as number_of_outings_in_last_2_months,\n        try_cast(cntrbtrs as int) as number_of_anglers_interviewed,\n        round(try_cast(hrsf as double), 2) as trip_fishing_effort_hours,\n        case\n            when catch = '1' or catch = '3' then true\n            when catch = '2' then false\n            else NULL\n        end as caught,\n        case\n            when \n            try_cast(left(time, 2) as int) between 1 and 23\n            and \n            try_cast(right(time, 2) as int) between 1 and 59\n            then make_time(try_cast(left(time, 2) as int), try_cast(right(time, 2) as int), 0.0)\n            else NULL\n        end as fish_caught_time,\n        make_timestamp(date_part('year', trip_date), \n                        date_part('month', trip_date), \n                        date_part('day', trip_date), \n                        date_part('hour', fish_caught_time), \n                        date_part('minute', fish_caught_time), \n                        date_part('second', fish_caught_time)\n                        ) as fish_caught_datetime,\n        case\n            when date_part('hour', fish_caught_time) between 0 and 5 then 'Before Dawn'\n            when date_part('hour', fish_caught_time) between 6 and 11 then 'Morning'\n            when date_part('hour', fish_caught_time) between 12 and 17 then 'Afternoon'\n            when date_part('hour', fish_caught_time) between 18 and 23 then 'After Dusk'\n            else NULL\n        end as fish_caught_time_of_day\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\n{{ dbt_utils.snowflake__deduplicate(\n    relation='renamed',\n    partition_by='trip_id',\n    order_by='survey_year desc',\n   )\n}}\n\n)\n\nselect * from deduplicated", "language": "sql", "refs": [{"name": "base_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.drop_cols_high_nulls", "macro.dbt_utils.star", "macro.dbt_transforms.filter_id_code", "macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.snowflake__deduplicate"], "nodes": ["model.dbt_transforms.base_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/stg_noaa__trips.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n--drop columns with high null count\nwith drop_cols as (\n\n    select\n    \"strat_id\",\n  \"psu_id\",\n  \"area\",\n  \"area_x\",\n  \"catch\",\n  \"cntrbtrs\",\n  \"cnty\",\n  \"cnty_res\",\n  \"coastal\",\n  \"ffdays2\",\n  \"ffdays12\",\n  \"hrsf\",\n  \"id_code\",\n  \"intsite\",\n  \"mode_f\",\n  \"mode_fx\",\n  \"num_typ2\",\n  \"num_typ3\",\n  \"num_typ4\",\n  \"reg_res\",\n  \"st\",\n  \"st_res\",\n  \"sub_reg\",\n  \"wave\",\n  \"year\",\n  \"asg_code\",\n  \"month\",\n  \"kod\",\n  \"prt_code\",\n  \"add_ph\",\n  \"date1\",\n  \"dist\",\n  \"f_by_p\",\n  \"gear\",\n  \"sep_fish\",\n  \"time\",\n  \"wp_int\",\n  \"var_id\",\n  \"alt_flag\",\n  \"leader\",\n  \"date_published\",\n  \"num_typ6\",\n  \"zip\"\n    from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n),\n\n--drop rows where id is not valid\nvalid_records as (\n\n    \n\n    with unfiltered as (\n\n        select * from drop_cols\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n),\n\nrenamed as (\n\n    select\n        md5(cast(coalesce(cast(id_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as trip_id,\n        try_cast(id_code as bigint) as survey_id,\n        try_cast(strptime(date_published, '%m/%d/%Y') as date) as data_publish_date,\n        try_cast(year as int) as survey_year,\n        try_cast(substring(id_code, 6, 4) as int) as trip_year,\n        try_cast(substring(id_code, 10, 2) as int) trip_month_num,\n        try_cast(substring(id_code, 12, 2) as int) as trip_day_num,\n        case\n            when \n            coalesce(trip_month_num, 0) in (1,3,5,7,8,10,12) and trip_day_num between 1 and 31\n            or\n            coalesce(trip_month_num, 0) in (4,6,9,11) and trip_day_num between 1 and 30\n            or\n            coalesce(trip_month_num, 0) = 2 and trip_day_num between 1 and 29\n            then make_date(trip_year, trip_month_num, trip_day_num) \n            else NULL\n        end as trip_date,\n        dayname(trip_date) as trip_day_of_week,\n        monthname(trip_date) as trip_month_name,\n        case\n            when trip_month_name in ('December', 'January', 'February') then 'Winter'\n            when trip_month_name in ('March', 'April', 'May') then 'Spring'\n            when trip_month_name in ('June', 'July', 'August') then 'Summer'\n            when trip_month_name in ('September', 'October', 'November') then 'Fall'\n            else NULL\n        end as fishing_season,\n        case\n            when wave = '1' then 'January/February'\n            when wave = '2' then 'March/April'\n            when wave = '3' then 'May/June'\n            when wave = '4' then 'July/August'\n            when wave = '5' then 'September/October'\n            when wave = '6' then 'November/December'\n            else NULL\n        end as sampling_period,\n        case \n            when kod = 'wd' then false\n            when kod = 'we' then true\n            else NULL\n        end as weekend,\n        case \n            when sub_reg = '4' then 'North Atlantic (ME; NH; MA; RI; CT)'\n            when sub_reg = '5' then 'Mid-Atlantic (NY; NJ; DE; MD; VA) '\n            when sub_reg = '6' then 'South Atlantic (NC; SC; GA; EFL)'\n            when sub_reg = '7' then 'Gulf of Mexico (WFL; AL; MS; LA)'\n            when sub_reg = '8' then 'West Pacific (HI)'\n            when sub_reg = '11' then 'U.S. Caribbean (Puerto Rico and Virgin Islands)'\n            else NULL\n        end as us_region,\n        case\n            when area_x = '1' then 'Ocean - Within 3 miles'\n            when area_x = '2' then 'Ocean - Outside 3 miles'\n            when area_x = '3' then 'Ocean - Within 10 miles'\n            when area_x = '4' then 'Ocean - Outside 10 miles'\n            when area_x = '5' then 'Inland'\n            else NULL\n        end as nautical_zone,\n        case \n            when mode_fx = '1' then 'Man-Made'\n            when mode_fx = '2' then 'Beach/Bank'\n            when mode_fx = '3' then 'Shore'\n            when mode_fx = '4' then 'Headboat'\n            when mode_fx = '5' then 'Charter Boat'\n            when mode_fx = '6' then 'Charter Boat'\n            when mode_fx = '7' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_collapsed,\n        try_cast(lpad(st, 2, '0') as int) as state_code_where_caught,\n        try_cast(lpad(cnty, 3, '0') as int) as county_code_where_caught,\n        try_cast(concat(cast(state_code_where_caught as varchar), cast(county_code_where_caught as varchar)) as int) as fips_code_where_caught,\n        try_cast(lpad(st_res, 2, '0') as int) as state_code_where_fisherman_resides,\n        try_cast(lpad(cnty_res, 3, '0') as int) as county_code_where_fisherman_resides,\n        try_cast(concat(cast(state_code_where_fisherman_resides as varchar), cast(county_code_where_fisherman_resides as varchar)) as int) as fips_code_where_fisherman_resides,\n        case\n            when coastal = 'N' then 'Non-coastal county resident'\n            when coastal = 'Y' then 'Coastal county resident'\n            when coastal = 'O' then 'Out-of-State'\n            else NULL\n        end as fisherman_state_residency_status,\n        case\n            when mode_f = '1' then 'Pier/Dock'\n            when mode_f = '2' then 'Jetty/Breakwater/Breachway'\n            when mode_f = '3' then 'Bridge/Causeway'\n            when mode_f = '4' then 'Other man-made'\n            when mode_f = '5' then 'Beach/Bank'\n            when mode_f = '6' then 'Head Boat'\n            when mode_f = '7' then 'Charter Boat'\n            when mode_f = '8' then 'Private/Rental Boat'\n            else NULL\n        end as fishing_method_uncollapsed,\n        try_cast(ffdays12 as int) as number_of_outings_in_last_year,\n        try_cast(ffdays2 as int) as number_of_outings_in_last_2_months,\n        try_cast(cntrbtrs as int) as number_of_anglers_interviewed,\n        round(try_cast(hrsf as double), 2) as trip_fishing_effort_hours,\n        case\n            when catch = '1' or catch = '3' then true\n            when catch = '2' then false\n            else NULL\n        end as caught,\n        case\n            when \n            try_cast(left(time, 2) as int) between 1 and 23\n            and \n            try_cast(right(time, 2) as int) between 1 and 59\n            then make_time(try_cast(left(time, 2) as int), try_cast(right(time, 2) as int), 0.0)\n            else NULL\n        end as fish_caught_time,\n        make_timestamp(date_part('year', trip_date), \n                        date_part('month', trip_date), \n                        date_part('day', trip_date), \n                        date_part('hour', fish_caught_time), \n                        date_part('minute', fish_caught_time), \n                        date_part('second', fish_caught_time)\n                        ) as fish_caught_datetime,\n        case\n            when date_part('hour', fish_caught_time) between 0 and 5 then 'Before Dawn'\n            when date_part('hour', fish_caught_time) between 6 and 11 then 'Morning'\n            when date_part('hour', fish_caught_time) between 12 and 17 then 'Afternoon'\n            when date_part('hour', fish_caught_time) between 18 and 23 then 'After Dusk'\n            else NULL\n        end as fish_caught_time_of_day\n\n    from valid_records\n\n),\n\n--remove duplicates\ndeduplicated as (\n\nselect *\n    from renamed\n    qualify\n        row_number() over (\n            partition by trip_id\n            order by survey_year desc\n        ) = 1\n\n)\n\nselect * from deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.base_noaa__catches": {"database": "noaa_dw", "schema": "analytics", "name": "base_noaa__catches", "resource_type": "model", "package_name": "dbt_transforms", "path": "staging/noaa/base/base_noaa__catches.sql", "original_file_path": "models/staging/noaa/base/base_noaa__catches.sql", "unique_id": "model.dbt_transforms.base_noaa__catches", "fqn": ["dbt_transforms", "staging", "noaa", "base", "base_noaa__catches"], "alias": "base_noaa__catches", "checksum": {"name": "sha256", "checksum": "6f8629696b8a02c6274b06729975d818bc377511f8325dde049d258df01056d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Represents all catches.\n\n`dbt-profiler` results:\n\n| column_name     | data_type | row_count |     not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| --------------- | --------- | --------- | ----------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| common          | varchar   | 5,828,705 | 0.763023347381622500000 | 0.00015835421418651313000 |            923 |     False |     |     |     |        |                    |                | ... |\n| strat_id        | varchar   | 5,828,705 | 1.000000000000000000000 | 0.01001920666769033600000 |          58399 |     False |     |     |     |        |                    |                | ... |\n| psu_id          | varchar   | 5,828,705 | 1.000000000000000000000 | 0.06868523968874733000000 |         400346 |     False |     |     |     |        |                    |                | ... |\n| year            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000754884661344157950 |             44 |     False |     |     |     |        |                    |                | ... |\n| st              | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000343129391520071770 |             20 |     False |     |     |     |        |                    |                | ... |\n| mode_fx         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| area_x          | varchar   | 5,828,705 | 0.999999142176521200000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| id_code         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.62853498332820070000000 |        3663545 |     False |     |     |     |        |                    |                | ... |\n| sub_reg         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000120095287032025120 |              7 |     False |     |     |     |        |                    |                | ... |\n| wave            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| kod             | varchar   | 5,828,705 | 0.999968432095980200000 | 0.00000051469408728010770 |              3 |     False |     |     |     |        |                    |                | ... |\n| sp_code         | varchar   | 5,828,705 | 0.763023862075709800000 | 0.00015921203766531330000 |            928 |     False |     |     |     |        |                    |                | ... |\n| claim           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.04044895049586486000000 |         235765 |     False |     |     |     |        |                    |                | ... |\n| release         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00215553883752909100000 |          12564 |     False |     |     |     |        |                    |                | ... |\n| harvest         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00054317382677627360000 |           3166 |     False |     |     |     |        |                    |                | ... |\n| claim_unadj     | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00005918982003721238000 |            345 |     False |     |     |     |        |                    |                | ... |\n| harvest_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00004340586802728908000 |            253 |     False |     |     |     |        |                    |                | ... |\n| release_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00003259729219440682000 |            190 |     False |     |     |     |        |                    |                | ... |\n| tot_len_a       | varchar   | 5,828,705 | 0.999999828435304200000 | 0.06841725563397015000000 |         398784 |     False |     |     |     |        |                    |                | ... |\n| wgt_a           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.07045218449037993000000 |         410645 |     False |     |     |     |        |                    |                | ... |\n| tot_len_b1      | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00888996784019778000000 |          51817 |     False |     |     |     |        |                    |                | ... |\n| wgt_b1          | varchar   | 5,828,705 | 0.999999828435304200000 | 0.01413624467184391700000 |          82396 |     False |     |     |     |        |                    |                | ... |\n| region          | varchar   | 5,828,705 | 0.305074969482929700000 | 0.00000154408226184032300 |              9 |     False |     |     |     |        |                    |                | ... |\n| month           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00000223034104488046650 |             13 |     False |     |     |     |        |                    |                | ... |\n| tot_cat         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.05636054663943363000000 |         328509 |     False |     |     |     |        |                    |                | ... |\n| wgt_ab1         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.08132080796677821000000 |         473995 |     False |     |     |     |        |                    |                | ... |\n| tot_len         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.07187891650032040000000 |         418961 |     False |     |     |     |        |                    |                | ... |\n| landing         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.04195082784254821500000 |         244519 |     False |     |     |     |        |                    |                | ... |\n| var_id          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.01006964668824378600000 |          58693 |     False |     |     |     |        |                    |                | ... |\n| alt_flag        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000034312939152007176 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_interval  | varchar   | 5,828,705 | 0.007694505040141850000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| fl_reg          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| wp_catch_precal | varchar   | 5,828,705 | 0.822431054582450100000 | 0.03737571210071534000000 |         217852 |     False |     |     |     |        |                    |                | ... |\n| wp_int          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09078465971429331000000 |         529157 |     False |     |     |     |        |                    |                | ... |\n| wp_catch        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09087627526182918000000 |         529691 |     False |     |     |     |        |                    |                | ... |\n| date_published  | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| arx_method      | varchar   | 5,828,705 | 0.000277076983652457950 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| imp_rec         | varchar   | 5,828,705 | 0.017320656989845945000 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _typex          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _freqx          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal   | varchar   | 5,828,705 | 0.026497995695441784000 | 0.00310806602838881000000 |          18116 |     False |     |     |     |        |                    |                | ... |", "columns": {"date_published": {"name": "date_published", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "common": {"name": "common", "description": "Common name of species", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id": {"name": "strat_id", "description": "Identifier for survey design stratum; if using revised trip/catch/size datasets (2013-), \nSTRAT_ID should be replaced with VAR_ID in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "psu_id": {"name": "psu_id", "description": "year, wave, st, region, mode_fx, asg_code\nIdentifier for survey design primary sampling unit; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code": {"name": "id_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx": {"name": "mode_fx", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_x": {"name": "area_x", "description": "Collapsed area of fishing \n   1 = Ocean <= 3 mi (all but WFL) \n   2 = Ocean > 3 mi (all but WFL) \n   3 = Ocean <= 10 mi (WFL only) \n   4 = Ocean > 10 mi (WFL only) \n   5 = Inland\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st": {"name": "st", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg": {"name": "sub_reg", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wave": {"name": "wave", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "kod": {"name": "kod", "description": "Kind of day\n    wd = Weekday\n    we = Weekend\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sp_code": {"name": "sp_code", "description": "Species code of fish", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "claim": {"name": "claim", "description": "Count of fish that were caught, landed whole, and available for identification to species and enumeration by the interviewer.  \nThese fish were available for weighing and measuring. \n\nSome values have been adjusted to account for (depending on mode of fishing) incomplete shore trips and grouped catch. \nCompare to CLAIM_UNADJ to see if counts were adjusted.   \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "release": {"name": "release", "description": "Number of fish that were caught and released alive.\nSome values have been adjusted to account for (depending on mode of fishing) incomplete shore trips. \nCompare to RELEASE_UNADJ to see if counts were adjusted.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "harvest": {"name": "harvest", "description": "Number of fish that were caught, not released live, but not available in whole form for examination, identification, or enumeration.  \nThey are all dead, and may be filleted, released dead, given away, or used for some other purpose but are not available for identification to species and counting.\nSome values have been adjusted to account for (depending on mode of fishing) incomplete shore trips. Compare to HARVEST_UNADJ to see if counts were adjusted.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "claim_unadj": {"name": "claim_unadj", "description": "Unadjusted count of fish that were caught, landed whole, and available for identification to species and enumeration by the interviewer.  \nThese fish were available for weighing and measuring.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "harvest_unadj": {"name": "harvest_unadj", "description": "Unadjusted number of fish that were caught, not released live, but not available in whole form for examination, identification, or enumeration.  \nThey are all dead, and may be filleted, released dead, given away, or used for some other purpose but are not available for identification to species and counting.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "release_unadj": {"name": "release_unadj", "description": "Unadjusted number of fish that were caught and released alive.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_len_a": {"name": "tot_len_a", "description": "Total Fork (centerline) length of fish (mm) for all Observed Harvest (CLAIM, A) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_a": {"name": "wgt_a", "description": "Total weight (kg) of all Observed Harvest (CLAIM, A) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_len_b1": {"name": "tot_len_b1", "description": "Total Fork (centerline) length of fish (mm) for all Reported Harvest (HARVEST, B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_b1": {"name": "wgt_b1", "description": "Total weight (kg) of all Reported Harvest (HARVEST, B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_cat": {"name": "tot_cat", "description": "The number of fish caught but not necessarily brought ashore.  May be obtained by summing catch types A (CLAIM), B1 (HARVEST), and B2 (RELEASE).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_ab1": {"name": "wgt_ab1", "description": "Total weight (kg) of all fish removed from the fishery resource (LANDING, A+B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_len": {"name": "tot_len", "description": "Total Fork (centerline) length of fish (mm) for all landings (A+B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "landing": {"name": "landing", "description": "The total number of fish removed from the fishery resource.  May be obtained by summing catch types A (CLAIM) and B1 (HARVEST).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id": {"name": "var_id", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; \nshould be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method": {"name": "arx_method", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag": {"name": "alt_flag", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fl_reg": {"name": "fl_reg", "description": "Florida regions with included counties:\n1 = BAY, DIXIE, ESCAMBIA, FRANKLIN, GULF, JEFFERSON, OKALOOSA, SANTA ROSA, TAYLOR, WAKULLA, WALTON\n2 = CHARLOTTE, CITRUS, COLLIER, HERNANDO, HILLSBOROUGH, LEE, LEVY, MANATEE, PASCO, PINELLAS, SARASOTA\n3 = MONROE\n4 = BROWARD, DADE, INDIAN RIVER, MARTIN, PALM BEACH ST. LUCIE\n5 = BREVARD, CLAY, DUVAL, FLAGLER, NASSAU, ST. JOHNS, VOLUSIA\n8 = N/A\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_catch_precal": {"name": "wp_catch_precal", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int": {"name": "wp_int", "description": "Survey design sampling weight for TRIP and CATCH datasets; wp_int should only be used to weight records in TRIP and CATCH datasets.  \nShould be specified in any survey procedure, using the TRIP or CATCH datasets, for appropriate point estimate calculation and variance estimations.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_catch": {"name": "wp_catch", "description": "Survey design sampling weight for CATCH datasets; wp_catch should only be used to weight records in CATCH datasets.  \nShould be specified in any survey procedure, using the CATCH datasets, for appropriate point estimate calculation and variance estimations.  \n** NOTE: WP_INT is still included in CATCH datasets for backwards compatibility.  \nWP_CATCH equals WP_INT for all records except those in specific STATE,MODE_FX,YEAR combinations with small sample size issues.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "_type_": {"name": "_type_", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "_freq_": {"name": "_freq_", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Sub-state georgraphic area stratum in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_interval": {"name": "strat_interval", "description": "6 or 12 hour time interval in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int_precal": {"name": "wp_int_precal", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "imp_rec": {"name": "imp_rec", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://models/staging/noaa/base/_noaa__base_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1722629554.9305892, "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__catches\"", "raw_code": "{% set src = source('raw', 'catch') %}\n\nwith merge_cols as (\n\n    {{ merge_duplicate_column_names(src) }}\n\n)\n\nselect * from merge_cols", "language": "sql", "refs": [], "sources": [["raw", "catch"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.merge_duplicate_column_names"], "nodes": ["source.dbt_transforms.raw.catch"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/base/base_noaa__catches.sql", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['common', 'strat_id', 'psu_id', 'year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'kod', 'sp_code', 'claim', 'release', 'harvest', 'claim_unadj', 'harvest_unadj', 'release_unadj', 'tot_len_a', 'wgt_a', 'tot_len_b1', 'wgt_b1', 'region', 'month', 'tot_cat', 'wgt_ab1', 'tot_len', 'landing', 'var_id', 'alt_flag', 'strat_interval', 'fl_reg', 'wp_catch_precal', 'wp_int', 'wp_catch', 'date_published', 'arx_method', 'imp_rec', '_typex', '_freqx', 'wp_int_precal']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    common,\n    strat_id,\n    psu_id,\n    year,\n    st,\n    mode_fx,\n    area_x,\n    id_code,\n    sub_reg,\n    wave,\n    kod,\n    sp_code,\n    claim,\n    release,\n    harvest,\n    claim_unadj,\n    harvest_unadj,\n    release_unadj,\n    tot_len_a,\n    wgt_a,\n    tot_len_b1,\n    wgt_b1,\n    region,\n    month,\n    tot_cat,\n    wgt_ab1,\n    tot_len,\n    landing,\n    var_id,\n    alt_flag,\n    strat_interval,\n    fl_reg,\n    wp_catch_precal,\n    wp_int,\n    wp_catch,\n    date_published,\n    arx_method,\n    imp_rec,\n    _typex,\n    _freqx,\n    wp_int_precal\n    from \"noaa_dw\".\"raw\".\"catch\"\n\n\n\n)\n\nselect * from merge_cols", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.base_noaa__sizes": {"database": "noaa_dw", "schema": "analytics", "name": "base_noaa__sizes", "resource_type": "model", "package_name": "dbt_transforms", "path": "staging/noaa/base/base_noaa__sizes.sql", "original_file_path": "models/staging/noaa/base/base_noaa__sizes.sql", "unique_id": "model.dbt_transforms.base_noaa__sizes", "fqn": ["dbt_transforms", "staging", "noaa", "base", "base_noaa__sizes"], "alias": "base_noaa__sizes", "checksum": {"name": "sha256", "checksum": "8bc8196cb79600dc012ee9072f9f92bad8ca75609f336943573603d30a359d98"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Represents all sizes.\n\n`dbt-profiler` results:\n\n| column_name    | data_type | row_count |  not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | -------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| year           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000584181982197393750 |             43 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000258126922366290240 |             19 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 7,360,720 | 1.000000000000000000 | 0.33438073992761580000000 |        2461283 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 7,360,720 | 0.885231336064950200 | 0.00000163027529915551730 |             12 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 7,360,720 | 0.999908568726972300 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| sp_code        | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011221728309187145000 |            826 |     False |     |     |     |        |                    |                | ... |\n| lngth          | varchar   | 7,360,720 | 0.803923121651142800 | 0.00412962318903585500000 |          30397 |     False |     |     |     |        |                    |                | ... |\n| wgt            | varchar   | 7,360,720 | 0.797549560369094300 | 0.04404392505081025000000 |         324195 |     False |     |     |     |        |                    |                | ... |\n| lngth_imp      | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| wgt_imp        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.04937071373452597000000 |         363404 |     False |     |     |     |        |                    |                | ... |\n| common         | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011194557054201220000 |            824 |     False |     |     |     |        |                    |                | ... |\n| wp_size        | varchar   | 7,360,720 | 0.999651936223630200 | 0.11588879892184460000000 |         853025 |     False |     |     |     |        |                    |                | ... |\n| l_in_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00001847645339042919800 |            136 |     False |     |     |     |        |                    |                | ... |\n| l_cm_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00004211544522818420000 |            310 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000054342509971850580 |              4 |     False |     |     |     |        |                    |                | ... |\n| wgt_unadj      | varchar   | 7,360,720 | 0.393738248432218600 | 0.00767968350922192400000 |          56528 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 7,360,720 | 0.025260164766490234 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |", "columns": {"wave": {"name": "wave", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st": {"name": "st", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx": {"name": "mode_fx", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg": {"name": "sub_reg", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sp_code": {"name": "sp_code", "description": "Species code of fish", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "common": {"name": "common", "description": "Common name of species", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id": {"name": "var_id", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; \nshould be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method": {"name": "arx_method", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag": {"name": "alt_flag", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id": {"name": "strat_id", "description": "Identifier for survey design stratum; if using revised trip/catch/size datasets (2013-), \nSTRAT_ID should be replaced with VAR_ID in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date_published": {"name": "date_published", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code": {"name": "id_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_x": {"name": "area_x", "description": "Collapsed area of fishing \n   1 = Ocean <= 3 mi (all but WFL) \n   2 = Ocean > 3 mi (all but WFL) \n   3 = Ocean <= 10 mi (WFL only) \n   4 = Ocean > 10 mi (WFL only) \n   5 = Inland\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "kod": {"name": "kod", "description": "Kind of day\n    wd = Weekday\n    we = Weekend\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "lngth": {"name": "lngth", "description": "Fork length of fish or centerline length for non-forked fish (MM).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt": {"name": "wgt", "description": "Weight of fish in kg at time of interview (round, wet, or live weight).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "lngth_imp": {"name": "lngth_imp", "description": "Length imputation indicator\n    1 = Yes\n    0 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_imp": {"name": "wgt_imp", "description": "Weight imputation indicator\n    1 = Yes\n    0 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "psu_id": {"name": "psu_id", "description": "year, wave, st, region, mode_fx, asg_code\nIdentifier for survey design primary sampling unit; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_unadj": {"name": "wgt_unadj", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_size": {"name": "wp_size", "description": "Survey design sampling weight for SIZE dataset; wp_size should not be used to weight records in any other dataset.  \nShould be specified in any survey procedure, using the SIZE dataset, for appropriate point estimate calculation and variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "l_in_bin": {"name": "l_in_bin", "description": "Length of fish rounded down to the nearest in.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "l_cm_bin": {"name": "l_cm_bin", "description": "Length of fish rounded down to the nearest cm.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "imp_rec": {"name": "imp_rec", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://models/staging/noaa/base/_noaa__base_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1722629554.9330754, "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__sizes\"", "raw_code": "{% set src = source('raw', 'size') %}\n\nwith merge_cols as (\n\n    {{ merge_duplicate_column_names(src) }}\n\n)\n\nselect * from merge_cols", "language": "sql", "refs": [], "sources": [["raw", "size"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.merge_duplicate_column_names"], "nodes": ["source.dbt_transforms.raw.size"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/base/base_noaa__sizes.sql", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'month', 'kod', 'sp_code', 'lngth', 'wgt', 'lngth_imp', 'wgt_imp', 'strat_id', 'psu_id', 'common', 'wp_size', 'l_in_bin', 'l_cm_bin', 'var_id', 'alt_flag', 'date_published', 'wgt_unadj', 'imp_rec']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    year,\n    st,\n    mode_fx,\n    area_x,\n    id_code,\n    sub_reg,\n    wave,\n    month,\n    kod,\n    sp_code,\n    lngth,\n    wgt,\n    lngth_imp,\n    wgt_imp,\n    strat_id,\n    psu_id,\n    common,\n    wp_size,\n    l_in_bin,\n    l_cm_bin,\n    var_id,\n    alt_flag,\n    date_published,\n    wgt_unadj,\n    imp_rec\n    from \"noaa_dw\".\"raw\".\"size\"\n\n\n\n)\n\nselect * from merge_cols", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_transforms.base_noaa__trips": {"database": "noaa_dw", "schema": "analytics", "name": "base_noaa__trips", "resource_type": "model", "package_name": "dbt_transforms", "path": "staging/noaa/base/base_noaa__trips.sql", "original_file_path": "models/staging/noaa/base/base_noaa__trips.sql", "unique_id": "model.dbt_transforms.base_noaa__trips", "fqn": ["dbt_transforms", "staging", "noaa", "base", "base_noaa__trips"], "alias": "base_noaa__trips", "checksum": {"name": "sha256", "checksum": "81333718a59ca7f311c8df0d8d31b5aa995a5fb19d1f3b1dac98bfaec52e8cd2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Represents all trips.\n\n`dbt-profiler` results:\n\n| column_name    | data_type | row_count |     not_null_proportion |      distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | ----------------------- | ------------------------ | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| prim2_common   | varchar   | 3,739,116 | 0.158339297309845420000 | 0.0001278377028153178500 |            478 |     False |     |     |     |        |                    |                | ... |\n| prim1_common   | varchar   | 3,739,116 | 0.599395418596267100000 | 0.0001615355073231213000 |            604 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0159152591147212340000 |          59509 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 3,739,116 | 0.996369462728623600000 | 0.1074633683469568700000 |         401818 |     False |     |     |     |        |                    |                | ... |\n| add_hrs        | varchar   | 3,739,116 | 0.670955648340409900000 | 0.0000203256598618497000 |             76 |     False |     |     |     |        |                    |                | ... |\n| area           | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000072209581088150245 |             27 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 3,739,116 | 0.996368660399944800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| catch          | varchar   | 3,739,116 | 0.995809169867958100000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| cntrbtrs       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000109651586096820740 |             41 |     False |     |     |     |        |                    |                | ... |\n| cnty           | varchar   | 3,739,116 | 0.995829495527820000000 | 0.0000240698603627167500 |             90 |     False |     |     |     |        |                    |                | ... |\n| cnty_res       | varchar   | 3,739,116 | 0.995773599963199800000 | 0.0001305121317445085900 |            488 |     False |     |     |     |        |                    |                | ... |\n| coastal        | varchar   | 3,739,116 | 0.995013527261523800000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| ffdays2        | varchar   | 3,739,116 | 0.994734584324209200000 | 0.0000184535596114161740 |             69 |     False |     |     |     |        |                    |                | ... |\n| ffdays12       | varchar   | 3,739,116 | 0.994839689381126400000 | 0.0000962794414508670000 |            360 |     False |     |     |     |        |                    |                | ... |\n| hrsf           | varchar   | 3,739,116 | 0.994899061703354500000 | 0.0000494769351900288700 |            185 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.9839569031824634000000 |        3679129 |     False |     |     |     |        |                    |                | ... |\n| intsite        | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0007795960328591036000 |           2915 |     False |     |     |     |        |                    |                | ... |\n| mode_f         | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ2       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| num_typ3       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000339652474007225260 |            127 |     False |     |     |     |        |                    |                | ... |\n| num_typ4       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| reg_res        | varchar   | 3,739,116 | 0.990181369072262000000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000050814149654624250 |             19 |     False |     |     |     |        |                    |                | ... |\n| st_res         | varchar   | 3,739,116 | 0.995574355007975200000 | 0.0000181861167184971000 |             68 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| telefon        | varchar   | 3,739,116 | 0.742506250140407500000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| year           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000115000443955202240 |             43 |     False |     |     |     |        |                    |                | ... |\n| asg_code       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0884286553292275600000 |         330645 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0000034767576079479747 |             13 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 3,739,116 | 0.996350474283226300000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| prt_code       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.6123369801846211000000 |        2289599 |     False |     |     |     |        |                    |                | ... |\n| celltype       | varchar   | 3,739,116 | 0.626421325254418400000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| fshinsp_a      | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000794305391969652800 |            297 |     False |     |     |     |        |                    |                | ... |\n| num_fish_a     | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000861166115199421500 |            322 |     False |     |     |     |        |                    |                | ... |\n| fl_reg         | varchar   | 3,739,116 | 0.833113762718246800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| add_ph         | varchar   | 3,739,116 | 0.920073889122455700000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| county         | varchar   | 3,739,116 | 0.681102699140652500000 | 0.0001783844095770230000 |            667 |     False |     |     |     |        |                    |                | ... |\n| date1          | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0002091403422627166400 |            782 |     False |     |     |     |        |                    |                | ... |\n| dist           | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| f_by_p         | varchar   | 3,739,116 | 0.983669402072575500000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| gear           | varchar   | 3,739,116 | 0.988198012578374100000 | 0.0000042790862867052000 |             16 |     False |     |     |     |        |                    |                | ... |\n| prim1          | varchar   | 3,739,116 | 0.700596879048416800000 | 0.0001650122649310692700 |            617 |     False |     |     |     |        |                    |                | ... |\n| prim2          | varchar   | 3,739,116 | 0.359161630716993000000 | 0.0001289074743869941400 |            482 |     False |     |     |     |        |                    |                | ... |\n| pvt_res        | varchar   | 3,739,116 | 0.825190499572626200000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| rig            | varchar   | 3,739,116 | 0.162039904619166670000 | 0.0000021395431433526000 |              8 |     False |     |     |     |        |                    |                | ... |\n| sep_fish       | varchar   | 3,739,116 | 0.983034492644785600000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| time           | varchar   | 3,739,116 | 0.988584735001535100000 | 0.0004418156591023118700 |           1652 |     False |     |     |     |        |                    |                | ... |\n| age            | varchar   | 3,739,116 | 0.302461062989219930000 | 0.0000278140608635837970 |            104 |     False |     |     |     |        |                    |                | ... |\n| wp_int         | varchar   | 3,739,116 | 1.000000000000000000000 | 0.1420346413430340300000 |         531084 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 3,739,116 | 0.995916147025125800000 | 0.0157133397305673320000 |          58754 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| leader         | varchar   | 3,739,116 | 0.996365451085229800000 | 0.8424172986342227000000 |        3149896 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| first          | varchar   | 3,739,116 | 0.713186485789689400000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ6       | varchar   | 3,739,116 | 0.879159940477909800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| on_list        | varchar   | 3,739,116 | 0.235640723636281940000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| party          | varchar   | 3,739,116 | 0.700982264257113200000 | 0.0000288838324352600980 |            108 |     False |     |     |     |        |                    |                | ... |\n| zip            | varchar   | 3,739,116 | 0.908805717715096300000 | 0.0113821020797429120000 |          42559 |     False |     |     |     |        |                    |                | ... |\n| area_nc        | varchar   | 3,739,116 | 0.144625360646741100000 | 0.0000085581725734104000 |             32 |     False |     |     |     |        |                    |                | ... |\n| boat_hrs       | varchar   | 3,739,116 | 0.341199363699869140000 | 0.0000377094479015895700 |            141 |     False |     |     |     |        |                    |                | ... |\n| mode2001       | varchar   | 3,739,116 | 0.389019490168264370000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| muni_res       | varchar   | 3,739,116 | 0.000106442271381791840 | 0.0000173837880397398740 |             65 |     False |     |     |     |        |                    |                | ... |\n| num_typ9       | varchar   | 3,739,116 | 0.186856465538913470000 | 0.0000251396319343930500 |             94 |     False |     |     |     |        |                    |                | ... |\n| new_list       | varchar   | 3,739,116 | 0.143402344297422190000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| mode_asg       | varchar   | 3,739,116 | 0.377604760055585350000 | 0.0000018721002504335250 |              7 |     False |     |     |     |        |                    |                | ... |\n| tsn1           | varchar   | 3,739,116 | 0.317040979739596200000 | 0.0001206167447065028200 |            451 |     False |     |     |     |        |                    |                | ... |\n| tsn2           | varchar   | 3,739,116 | 0.129391546023177680000 | 0.0000976166559154623700 |            365 |     False |     |     |     |        |                    |                | ... |\n| distkeys       | varchar   | 3,739,116 | 0.173429495099911320000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| license        | varchar   | 3,739,116 | 0.099345406775291270000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| monitor        | varchar   | 3,739,116 | 0.116959998031620310000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| compflag       | varchar   | 3,739,116 | 0.012953329075642478000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| art_reef       | varchar   | 3,739,116 | 0.174222463277416360000 | 0.0000125698159671965250 |             47 |     False |     |     |     |        |                    |                | ... |\n| gender         | varchar   | 3,739,116 | 0.211273199333746280000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| tourn          | varchar   | 3,739,116 | 0.103942482661677260000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| turtle         | varchar   | 3,739,116 | 0.116515775386481720000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| date           | varchar   | 3,739,116 | 0.042832049072561540000 | 0.0001781169666841039400 |            666 |     False |     |     |     |        |                    |                | ... |\n| region         | varchar   | 3,739,116 | 0.279464450955787400000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| strat_interval | varchar   | 3,739,116 | 0.279235252396555800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| reefcode       | varchar   | 3,739,116 | 0.017981255462521090000 | 0.0000609769795855491000 |            228 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal  | varchar   | 3,739,116 | 0.024187267792708224000 | 0.0048629141219475410000 |          18183 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 3,739,116 | 0.016037480516785250000 | 0.0000002674428929190750 |              1 |     False |     |     |     |        |                    |                | ... |\n| muni_trp       | varchar   | 3,739,116 | 0.000011232601502601149 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| arx_method     | varchar   | 3,739,116 | 0.000223582258480346700 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| reef_code      | varchar   | 3,739,116 | 0.000052418807012138700 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| reef           | varchar   | 3,739,116 | 0.014351787962716321000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |", "columns": {"date_published": {"name": "date_published", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim2_common": {"name": "prim2_common", "description": "Common name of second target species", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim1_common": {"name": "prim1_common", "description": "Number of anglers in fishing party (Boat modes only)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id": {"name": "strat_id", "description": "Identifier for survey design stratum; if using revised trip/catch/size datasets (2013-), \nSTRAT_ID should be replaced with VAR_ID in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "psu_id": {"name": "psu_id", "description": "year, wave, st, region, mode_fx, asg_code\nIdentifier for survey design primary sampling unit; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code": {"name": "id_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx": {"name": "mode_fx", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_f": {"name": "mode_f", "description": "Fishing Mode \n   1 = Pier, dock \n   2 = Jetty, breakwater, breachway \n   3 = Bridge, causeway \n   4 = Other man-made \n   5 = Beach or bank \n   6 = Head boat \n   7 = Charter boat \n   8 = Private/Rental boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_x": {"name": "area_x", "description": "Collapsed area of fishing \n   1 = Ocean <= 3 mi (all but WFL) \n   2 = Ocean > 3 mi (all but WFL) \n   3 = Ocean <= 10 mi (WFL only) \n   4 = Ocean > 10 mi (WFL only) \n   5 = Inland\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area": {"name": "area", "description": "Uncollapsed area of fishing (alpha codes refer to specific estuaries) \n    1 = Open water \n    2 = Sound \n    3 = River \n    4 = Bay \n    5 = Other \n    A = Narragansett Estuary \n    B = Buzzards Bay Estuary \n    C = Long Island Estuary \n    D = Hudson/Raritan Estuary \n    E = Delaware Estuary \n    F = Chesapeake Estuary \n    G = Albemarle/Pamlico Estuary \n    H = Biscayne Estuary \n    I  = Whitewater Estuary \n    J = Sarasota Estuary \n    K = Tampa Estuary \n    L = Mobile Estuary \n    M = Atchafelaya Estuary \n    N = Boqueron Estuary \n    O = Guanica Estuary \n    P = Guayanilla Estuary \n    Q = Humacao Estuary \n    R = Jobos Estuary \n    S = San Juan Estuary \n    T =Tortuguero Estuary \n    V = Cape Cod Bay\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st": {"name": "st", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cnty": {"name": "cnty", "description": "FIPS code for county of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "intsite": {"name": "intsite", "description": "Four digit numerical code for the site where the interview was conducted.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "hrsf": {"name": "hrsf", "description": "Hours fished (to nearest 1/2 hour)\n    99.8 = don't know\n    99.9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "ffdays12": {"name": "ffdays12", "description": "Number of days fished in the last year \n   998 = don't know \n   999 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "ffdays2": {"name": "ffdays2", "description": "Number of days fished in the last 2 months \n    98 = don't know \n    99 = refused \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cnty_res": {"name": "cnty_res", "description": "FIPS code for county of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st_res": {"name": "st_res", "description": "FIPS code for state of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "telefon": {"name": "telefon", "description": "Does home have phone? \n   1 = Yes \n   2 = No \n   8 = don't know \n   9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cntrbtrs": {"name": "cntrbtrs", "description": "Number of contributors to Available catch, 88 = all caught by fisherman or no available catch", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ2": {"name": "num_typ2", "description": " Number of type 2 records", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ3": {"name": "num_typ3", "description": " Number of type 3 records", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ4": {"name": "num_typ4", "description": "Type 4 record present? (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg": {"name": "sub_reg", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reg_res": {"name": "reg_res", "description": "Subregion code for region of residence\n    4   = North Atlantic (ME; NH; MA; RI; CT) \n    5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n    6   = South Atlantic (NC; SC; GA; EFL) \n    7   = Gulf of Mexico (WFL; AL; MS; LA) \n    8   = West Pacific (HI) \n    11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wave": {"name": "wave", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "add_hrs": {"name": "add_hrs", "description": "Additional hours fishing expected (to the nearest 1/2 hr) (incomplete beach/bank trips only)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "coastal": {"name": "coastal", "description": "Specifies whether an interviewee is a coastal county resident, non-coastal county resident, or is a resident of a state other than the one they are fishing in.\n    N = Non-coastal county resident\n    O = Out-of-State\n    Y = Coastal-county resident\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "catch": {"name": "catch", "description": "Did you catch any fish \n    1 = Yes \n    2 = No \n    3 = Catch on another person's form \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "asg_code": {"name": "asg_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "kod": {"name": "kod", "description": "Kind of day\n    wd = Weekday\n    we = Weekend\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_asg": {"name": "mode_asg", "description": "Mode of Assignment\n(All states EXCEPT NC):\n1 = SH\n2 = PC\n3 = PR\n5 = CH\n6 = HB\n7 = Mixed Boat Mode Sampling: PR or CH interviews (All states 2014 wave 3 - 2015 wave 6)\n7= Mixed Boat Mode Sampling: PR or CH interviews, Offshore Site Group (West Florida only, 2015 Waves 3-6. *See NOTE (1) for more information.) \n7=Offshore site-group samples (West Florida 2016 wave 1 \u2013 present; Alabama 2016 \u2013 present, waves by request, typically waves 3-5. **See NOTE (2) for more information).\n\n(NC only):\n1 = BB\n3 = PR\n4 = MM\n5 = CH\n\n*Note (1): the Offshore (OS) mode 7 assignments run concurrently with mode_asg=7 Mixed Boat from PR or CH in 2015, waves 3-6.  \nOS, PR, CH site groups are all exclusive - a site or site-cluster is assigned to only one of the three sub-frame groups for sample selection. \nWhatever boat mode is present at site could be interviewed (PR, CH, or OS).\n**Note (2): In 2016, all sites are assigned to an exclusive mode-site-group: SH, CH, PR, OS such that any site would only be clustered and sampled from one sub-frame list.  \nThis stratification is the same as that used for PR and CH in Mixed Boat sampling from the two exclusive site-groups, but now also keeps SH in an exclusive group. \nWhatever mode is present at site could be interviewed (PR, CH, OS, or SH).\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "new_list": {"name": "new_list", "description": "Is the vessel on/in either VTR or FHS Vessel Directory?\n    1 = Yes\n    2 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "on_list": {"name": "on_list", "description": " For-hire boat on FHS Sample Frame for wave (1 = Yes, 2 = No)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prt_code": {"name": "prt_code", "description": "ID_Code of first member of fishing party", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "celltype": {"name": "celltype", "description": "Type of cell.  Can be used along with add_hrs to identify incomplete trips.\n    1 = Only complete trips \n    2 = Mixed trips          \n    3 = Only incomplete trips\n    4 = Trips of unknown nature\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fshinsp_a": {"name": "fshinsp_a", "description": "Number of fish available for inspection at time of interview", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_fish_a": {"name": "num_fish_a", "description": "Number of fish landed that were NOT available for interviewer inspection.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fl_reg": {"name": "fl_reg", "description": "Florida regions with included counties:\n    1 = BAY, DIXIE, ESCAMBIA, FRANKLIN, GULF, JEFFERSON, OKALOOSA, SANTA ROSA, TAYLOR, WAKULLA, WALTON\n    2 = CHARLOTTE, CITRUS, COLLIER, HERNANDO, HILLSBOROUGH, LEE, LEVY, MANATEE, PASCO, PINELLAS, SARASOTA\n    3 = MONROE\n    4 = BROWARD, DADE, INDIAN RIVER, MARTIN, PALM BEACH ST. LUCIE\n    5 = BREVARD, CLAY, DUVAL, FLAGLER, NASSAU, ST. JOHNS, VOLUSIA\n    8 = N/A\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "county": {"name": "county", "description": "Name of county of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "add_ph": {"name": "add_ph", "description": "Phone # & Name provided for verification (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date1": {"name": "date1", "description": "Date file was created", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim1": {"name": "prim1", "description": "First target species (see species codes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim2": {"name": "prim2", "description": "Second target species (see species codes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "dist": {"name": "dist", "description": "Distance from shore \n   1 = <= 3 miles (all but WFL) \n   2 = > 3 miles (all but in WFL) \n   3 = <= 10 miles (WFL only) \n   4 = > 10 miles (WFL only) \n   8 = not applicable\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "zip": {"name": "zip", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "time": {"name": "time", "description": "Time of intercept, 0 - 2359", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "gear": {"name": "gear", "description": "1 = hook & line \n2 = dip net, A-frame net \n3 = cast net \n4 = Gill net \n5 = Seine \n6 = Trawl \n7 = Trap \n8 = Spear \n9 = Hand \n10 = Other \n11= YoYo (Puerto Rico only) \n98 = Unknown \n99 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pvt_res": {"name": "pvt_res", "description": "Live in private residence \n    1 = Yes \n    2 = Institutional \n    8 = don't know \n    9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sep_fish": {"name": "sep_fish", "description": "Can group catch be separated?\n    1 = Yes \n    2 = No \n    8 = all caught by fisherman or no available catch on this form \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "age": {"name": "age", "description": "Angler age, 99=Refused", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "f_by_p": {"name": "f_by_p", "description": "All fish caught by individual \n    1 = Yes \n    2 = other contributors \n    8 = no available catch on this form\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int": {"name": "wp_int", "description": "Survey design sampling weight for TRIP and CATCH datasets; wp_int should only be used to weight records in TRIP and CATCH datasets.  \nShould be specified in any survey procedure, using the TRIP or CATCH datasets, for appropriate point estimate calculation and variance estimations.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id": {"name": "var_id", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; \nshould be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method": {"name": "arx_method", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag": {"name": "alt_flag", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "leader": {"name": "leader", "description": "ID_CODE of group catch leader", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "boat_hrs": {"name": "boat_hrs", "description": "Dock-to-dock hours of fishing trip (Boat modes only) (to nearest 1/2 hour), 99.9 = Don\u2019t know or refused ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "first": {"name": "first", "description": "First person in party to be interviewed  \n    1=Yes   \n    2=No \n    8=not applicable \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ6": {"name": "num_typ6", "description": "Type 6 record present? (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "party": {"name": "party", "description": "Number of anglers in fishing party (Boat modes only)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_nc": {"name": "area_nc", "description": "Alpha/numeric codes for water bodies in North Carolina \n    1 = Ocean \n    6 = Alligator River \n    7 = Bay River \n    8 = Cape Fear River \n    A = Chowan River \n    B = Lockwood Folly River \n    C = Neuse River \n    D = New River \n    E = Newport River \n    F = North River (Carteret) \n    G = North River (Currituck) \n    H = Pasquotank River \n    J = PerQuimans River \n    K = Roanoke River \n    L = Shallotte River \n    M = Tar-Pamlico River \n    N = White Oak River \n    P = Albemarle Sound \n    Q = Bogue Sound \n    R = Core Sound \n    S = Croatan Sound \n    T = Currituck Sound \n    U = Masonboro Sound \n    V = Pamlico Sound \n    W = Roanoke Sound \n    X = Stump Sound \n    Y = Topsail Sound \n    Z = Intracoastal Waterway\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode2001": {"name": "mode2001", "description": "ACCSP fishing mode\n    0 = Pier\n    1 = Dock\n    2 = Jetty, breakwater, breachway\n    3 = Bridge, causeway\n    4 = Other man-made\n    5 = Beach or bank\n    6 = Head boat\n    7 = Charter boat\n    8 = Private boat\n    9 = Rental boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "muni_res": {"name": "muni_res", "description": "Municipality or Island of residence.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "muni_trp": {"name": "muni_trp", "description": "Municipality or Island of trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "rig": {"name": "rig", "description": "Did angler fish near a reef?\n    1 = Yes\n    2 = No\n    8 = Don't know\n    9 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tourn": {"name": "tourn", "description": "Is there/Did you tournament fishing today?\n    1 = Yes\n    2 = No\n    9 = Don't Know / Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "turtle": {"name": "turtle", "description": "Did angler see any sea turtles while fishing?\n    1 = Yes, alive\n    2 = Yes, dead\n    3 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "res": {"name": "res", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ9": {"name": "num_typ9", "description": " Number of type 9 records", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "distkeys": {"name": "distkeys", "description": "Distance from shore \n   1 = <= 3 miles (all but WFL) \n   2 = > 3 miles (all but in WFL) \n   3 = <= 10 miles (WFL only) \n   4 = > 10 miles (WFL only) \n   8 = not applicable, not reported\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tsn1": {"name": "tsn1", "description": "TSN of primary species sought", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tsn2": {"name": "tsn2", "description": "TSN of secondary species sought", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "compflag": {"name": "compflag", "description": "Interviewer\n    1 = Primary\n    2 = Companion\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "license": {"name": "license", "description": "Do you have a license to harvest saltwater fish in this state? (North Carolina only)  \n   1 = Yes \n   2 = No \n   3 = Lifetime License\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "monitor": {"name": "monitor", "description": "[If head boat ride-along:] Was this angler monitored for discard (Type 9) catch?\n    1 = Yes\n    2 = No\n    8 = Don't know\n    9 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "art_reef": {"name": "art_reef", "description": "1 = Yes\n2 = No\n88 = Don't know\n98 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reefcode": {"name": "reefcode", "description": "NC Reefs Codes for Artificial Reefs in North Carolina\n    LOCATION           REEF CODE           REEF NUMBER\n    Oregon Inlet          02                          AR130\n                                03                          AR140\n                                04                          AR145\n                                05                          AR160\n    Hatteras Inlet         06                          AR220\n                                07                          AR225\n                                08                          AR230\n    Ocracoke Inlet        09                          AR250\n                                10                          AR255\n    Drum Inlet              11                          AR275\n    Cape Lookout        12                          AR285\n                                13                          AR300\n                                14                          AR302\n                                15                          AR305\n    Beaufort Inlet        16                          AR315\n                                17                          AR320\n                                18                          AR330\n    Bogue Inlet           19                          AR340\n                                20                          AR342\n                                21                          AR345\n    New River Inlet       22                          AR355\n    New Topsail Inlet   23                          AR360\n                                24                          AR362\n                                25                          AR364\n                                26                          AR366\n                                27                          AR368\n    Masonboro Inlet    28                          AR370\n                                29                          AR372\n                                30                          AR376\n                                31                          AR378\n                                32                          AR382\n                                33                          AR386\n    Cape Fear River    34                          AR420\n                                35                          AR425\n                                36                          AR440\n                                37                          AR445\n                                38                          AR455\n                                39                          AR460\n                                40                          AR465\n    Estuarine Reefs      41                          AR191\n                                42                          AR291\n                                43                          AR292\n                                44                          AR296\n                                45                          AR298\n                                46                          AR392\n                                47                          AR396\n    Oyster Sanctuaries 48                          Wanchese\n                                49                          Deep Bay\n                                50                          West Bay\n                                51                          Hoop Pole Cr.\n    OTHER CODES    01                          NO\n                                88                          Shore\n                                98                          Unknown\n                                99                          Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Angler gender\n    1 = Male\n    2 = Female\n    9 = Missing\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "hrs_dtd": {"name": "hrs_dtd", "description": "Number of hours spent on the boat away from the dock, to the nearest half hour, ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Sub-state georgraphic area stratum in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_interval": {"name": "strat_interval", "description": "6 or 12 hour time interval in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int_precal": {"name": "wp_int_precal", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reef": {"name": "reef", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "imp_rec": {"name": "imp_rec", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://models/staging/noaa/base/_noaa__base_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1722629554.9394717, "relation_name": "\"noaa_dw\".\"analytics\".\"base_noaa__trips\"", "raw_code": "{% set src = source('raw', 'trip') %}\n\nwith merge_cols as (\n\n    {{ merge_duplicate_column_names(src) }}\n\n)\n\nselect * from merge_cols", "language": "sql", "refs": [], "sources": [["raw", "trip"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.merge_duplicate_column_names"], "nodes": ["source.dbt_transforms.raw.trip"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/base/base_noaa__trips.sql", "compiled": true, "compiled_code": "\n\nwith merge_cols as (\n\n    \n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n    --['prim2_common', 'prim1_common', 'strat_id', 'psu_id', 'add_hrs', 'area', 'area_x', 'catch', 'cntrbtrs', 'cnty', 'cnty_res', 'coastal', 'ffdays2', 'ffdays12', 'hrsf', 'id_code', 'intsite', 'mode_f', 'mode_fx', 'num_typ2', 'num_typ3', 'num_typ4', 'reg_res', 'st', 'st_res', 'sub_reg', 'telefon', 'wave', 'year', 'asg_code', 'month', 'kod', 'prt_code', 'celltype', 'fshinsp_a', 'num_fish_a', 'fl_reg', 'add_ph', 'county', 'date1', 'dist', 'f_by_p', 'gear', 'prim1', 'prim2', 'pvt_res', 'rig', 'sep_fish', 'time', 'age', 'wp_int', 'var_id', 'alt_flag', 'leader', 'date_published', 'first', 'num_typ6', 'on_list', 'party', 'zip', 'area_nc', 'boat_hrs', 'mode2001', 'muni_res', 'num_typ9', 'new_list', 'mode_asg', 'tsn1', 'tsn2', 'distkeys', 'license', 'monitor', 'compflag', 'art_reef', 'gender', 'tourn', 'turtle', 'date', 'region', 'strat_interval', 'reefcode', 'wp_int_precal', 'imp_rec', 'muni_trp', 'arx_method', 'reef_code', 'reef']\n\n    -- Loop through column names and append any duplicated column names to a new list\n    \n\n    --[]\n\n    -- Get the original column name and append to separate list\n    \n\n    --[]\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    \n    prim2_common,\n    prim1_common,\n    strat_id,\n    psu_id,\n    add_hrs,\n    area,\n    area_x,\n    catch,\n    cntrbtrs,\n    cnty,\n    cnty_res,\n    coastal,\n    ffdays2,\n    ffdays12,\n    hrsf,\n    id_code,\n    intsite,\n    mode_f,\n    mode_fx,\n    num_typ2,\n    num_typ3,\n    num_typ4,\n    reg_res,\n    st,\n    st_res,\n    sub_reg,\n    telefon,\n    wave,\n    year,\n    asg_code,\n    month,\n    kod,\n    prt_code,\n    celltype,\n    fshinsp_a,\n    num_fish_a,\n    fl_reg,\n    add_ph,\n    county,\n    date1,\n    dist,\n    f_by_p,\n    gear,\n    prim1,\n    prim2,\n    pvt_res,\n    rig,\n    sep_fish,\n    time,\n    age,\n    wp_int,\n    var_id,\n    alt_flag,\n    leader,\n    date_published,\n    first,\n    num_typ6,\n    on_list,\n    party,\n    zip,\n    area_nc,\n    boat_hrs,\n    mode2001,\n    muni_res,\n    num_typ9,\n    new_list,\n    mode_asg,\n    tsn1,\n    tsn2,\n    distkeys,\n    license,\n    monitor,\n    compflag,\n    art_reef,\n    gender,\n    tourn,\n    turtle,\n    date,\n    region,\n    strat_interval,\n    reefcode,\n    wp_int_precal,\n    imp_rec,\n    muni_trp,\n    arx_method,\n    reef_code,\n    reef\n    from \"noaa_dw\".\"raw\".\"trip\"\n\n\n\n)\n\nselect * from merge_cols", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.dbt_transforms.generate_yaml_file_staging_models": {"database": "noaa_dw", "schema": "analytics", "name": "generate_yaml_file_staging_models", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/generate_yaml_file_staging_models.sql", "original_file_path": "analyses/generate_yaml_file_staging_models.sql", "unique_id": "analysis.dbt_transforms.generate_yaml_file_staging_models", "fqn": ["dbt_transforms", "analysis", "generate_yaml_file_staging_models"], "alias": "generate_yaml_file_staging_models", "checksum": {"name": "sha256", "checksum": "4ab879f495525964c5f181ccf82732e36796fd6a9968701027d0465d20394a36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.8484337, "relation_name": null, "raw_code": "{{ print('\\nGenerate Staging YAML File') }}\n{{ print('---------------') }}\ndepends_on: {{ ref('stg_noaa__catches') }}\ndepends_on: {{ ref('stg_noaa__sizes') }}\ndepends_on: {{ ref('stg_noaa__trips') }}\n\n{% if execute %}\n    {% set models_to_generate = codegen.get_models(directory=None, prefix='stg_noaa') %}\n    {{ codegen.generate_model_yaml(\n        model_names = models_to_generate,\n        upstream_descriptions=True,\n        include_data_types=True\n    ) }}\n{% endif %}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}, {"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.codegen.get_models", "macro.codegen.generate_model_yaml"], "nodes": ["model.dbt_transforms.stg_noaa__catches", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/analyses/generate_yaml_file_staging_models.sql", "compiled": true, "compiled_code": "\n\ndepends_on: \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\ndepends_on: \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\ndepends_on: \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n\n    \n    version: 2\n\nmodels:\n  - name: stg_noaa__sizes\n    description: \"\"\n    columns:\n      - name: size_id\n        data_type: varchar\n        description: \"\"\n\n      - name: survey_id\n        data_type: bigint\n        description: \"\"\n\n      - name: data_publish_date\n        data_type: date\n        description: \"\"\n\n      - name: survey_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_month_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_day_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_date\n        data_type: date\n        description: \"\"\n\n      - name: trip_day_of_week\n        data_type: varchar\n        description: \"\"\n\n      - name: trip_month_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_season\n        data_type: varchar\n        description: \"\"\n\n      - name: sampling_period\n        data_type: varchar\n        description: \"\"\n\n      - name: weekend\n        data_type: boolean\n        description: \"\"\n\n      - name: us_region\n        data_type: varchar\n        description: \"\"\n\n      - name: nautical_zone\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_collapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: state_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: species_common_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fish_weight_kg\n        data_type: double\n        description: \"\"\n\n      - name: fish_weight_lbs\n        data_type: double\n        description: \"\"\n\n      - name: imputed_weight\n        data_type: boolean\n        description: \"\"\n\n      - name: fish_length_mm\n        data_type: double\n        description: \"\"\n\n      - name: fish_length_cm\n        data_type: double\n        description: \"\"\n\n      - name: fish_length_in\n        data_type: double\n        description: \"\"\n\n      - name: imputed_length\n        data_type: boolean\n        description: \"\"\n\n  - name: stg_noaa__catches\n    description: \"\"\n    columns:\n      - name: catch_id\n        data_type: varchar\n        description: \"\"\n\n      - name: survey_id\n        data_type: bigint\n        description: \"\"\n\n      - name: data_publish_date\n        data_type: date\n        description: \"\"\n\n      - name: survey_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_month_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_day_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_date\n        data_type: date\n        description: \"\"\n\n      - name: trip_day_of_week\n        data_type: varchar\n        description: \"\"\n\n      - name: trip_month_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_season\n        data_type: varchar\n        description: \"\"\n\n      - name: sampling_period\n        data_type: varchar\n        description: \"\"\n\n      - name: weekend\n        data_type: boolean\n        description: \"\"\n\n      - name: us_region\n        data_type: varchar\n        description: \"\"\n\n      - name: nautical_zone\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_collapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: state_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: species_common_name\n        data_type: varchar\n        description: \"\"\n\n      - name: num_fish_harvested_observed_adjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_harvested_observed_unadjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_harvested_unobserved_adjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_harvested_unobserved_unadjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_released_adjusted\n        data_type: integer\n        description: \"\"\n\n      - name: num_fish_released_unadjusted\n        data_type: integer\n        description: \"\"\n\n      - name: total_number_fish_caught\n        data_type: integer\n        description: \"\"\n\n      - name: total_length_fish_harvested_observed_mm\n        data_type: double\n        description: \"\"\n\n      - name: total_length_fish_harvested_unobserved_mm\n        data_type: double\n        description: \"\"\n\n      - name: total_length_fish_harvested_mm\n        data_type: double\n        description: \"\"\n\n      - name: total_weight_fish_harvested_observed_kg\n        data_type: double\n        description: \"\"\n\n      - name: total_weight_fish_harvested_unobserved_kg\n        data_type: double\n        description: \"\"\n\n      - name: total_weight_fish_harvested_kg\n        data_type: double\n        description: \"\"\n\n  - name: stg_noaa__trips\n    description: \"\"\n    columns:\n      - name: trip_id\n        data_type: varchar\n        description: \"\"\n\n      - name: survey_id\n        data_type: bigint\n        description: \"\"\n\n      - name: data_publish_date\n        data_type: date\n        description: \"\"\n\n      - name: survey_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_year\n        data_type: integer\n        description: \"\"\n\n      - name: trip_month_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_day_num\n        data_type: integer\n        description: \"\"\n\n      - name: trip_date\n        data_type: date\n        description: \"\"\n\n      - name: trip_day_of_week\n        data_type: varchar\n        description: \"\"\n\n      - name: trip_month_name\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_season\n        data_type: varchar\n        description: \"\"\n\n      - name: sampling_period\n        data_type: varchar\n        description: \"\"\n\n      - name: weekend\n        data_type: boolean\n        description: \"\"\n\n      - name: us_region\n        data_type: varchar\n        description: \"\"\n\n      - name: nautical_zone\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_collapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: state_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: county_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: fips_code_where_caught\n        data_type: integer\n        description: \"\"\n\n      - name: state_code_where_fisherman_resides\n        data_type: integer\n        description: \"\"\n\n      - name: county_code_where_fisherman_resides\n        data_type: integer\n        description: \"\"\n\n      - name: fips_code_where_fisherman_resides\n        data_type: integer\n        description: \"\"\n\n      - name: fisherman_state_residency_status\n        data_type: varchar\n        description: \"\"\n\n      - name: fishing_method_uncollapsed\n        data_type: varchar\n        description: \"\"\n\n      - name: number_of_outings_in_last_year\n        data_type: integer\n        description: \"\"\n\n      - name: number_of_outings_in_last_2_months\n        data_type: integer\n        description: \"\"\n\n      - name: number_of_anglers_interviewed\n        data_type: integer\n        description: \"\"\n\n      - name: trip_fishing_effort_hours\n        data_type: double\n        description: \"\"\n\n      - name: caught\n        data_type: boolean\n        description: \"\"\n\n      - name: fish_caught_time\n        data_type: time\n        description: \"\"\n\n      - name: fish_caught_datetime\n        data_type: timestamp\n        description: \"\"\n\n      - name: fish_caught_time_of_day\n        data_type: varchar\n        description: \"\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.generate_staging_models": {"database": "noaa_dw", "schema": "analytics", "name": "generate_staging_models", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/generate_staging_models.sql", "original_file_path": "analyses/generate_staging_models.sql", "unique_id": "analysis.dbt_transforms.generate_staging_models", "fqn": ["dbt_transforms", "analysis", "generate_staging_models"], "alias": "generate_staging_models", "checksum": {"name": "sha256", "checksum": "723b64f1496f10108bcc4187b85cec135c57b5079ab2b735a973ae339290d5ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.8572176, "relation_name": null, "raw_code": "{{ print('\\nGenerate Staging Model SQL Files') }}\n{{ print('---------------') }}\n{% set datasets = [\"catch\",\"size\",\"trip\"] %}\n\n{% for dataset in datasets %}\n\n    {{ codegen.generate_base_model(\n    source_name='raw',\n    table_name=dataset\n    ) }}\n\n{% endfor %}", "language": "sql", "refs": [], "sources": [["raw", "catch"], ["raw", "size"], ["raw", "trip"]], "metrics": [], "depends_on": {"macros": ["macro.codegen.generate_base_model"], "nodes": ["source.dbt_transforms.raw.catch", "source.dbt_transforms.raw.size", "source.dbt_transforms.raw.trip"]}, "compiled_path": "target/compiled/dbt_transforms/analyses/generate_staging_models.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n    \n\nwith source as (\n\n    select * from {{ source('raw', 'catch') }}\n\n),\n\nrenamed as (\n\n    select\n        common,\n        strat_id,\n        psu_id,\n        year,\n        st,\n        mode_fx,\n        area_x,\n        id_code,\n        sub_reg,\n        wave,\n        kod,\n        sp_code,\n        claim,\n        release,\n        harvest,\n        claim_unadj,\n        harvest_unadj,\n        release_unadj,\n        tot_len_a,\n        wgt_a,\n        tot_len_b1,\n        wgt_b1,\n        region,\n        month,\n        tot_cat,\n        wgt_ab1,\n        tot_len,\n        landing,\n        var_id,\n        alt_flag,\n        strat_interval,\n        fl_reg,\n        wp_catch_precal,\n        wp_int,\n        wp_catch,\n        date_published,\n        arx_method,\n        imp_rec,\n        _typex,\n        _freqx,\n        wp_int_precal\n\n    from source\n\n)\n\nselect * from renamed\n\n\n\n\n    \n\nwith source as (\n\n    select * from {{ source('raw', 'size') }}\n\n),\n\nrenamed as (\n\n    select\n        year,\n        st,\n        mode_fx,\n        area_x,\n        id_code,\n        sub_reg,\n        wave,\n        month,\n        kod,\n        sp_code,\n        lngth,\n        wgt,\n        lngth_imp,\n        wgt_imp,\n        strat_id,\n        psu_id,\n        common,\n        wp_size,\n        l_in_bin,\n        l_cm_bin,\n        var_id,\n        alt_flag,\n        date_published,\n        wgt_unadj,\n        imp_rec\n\n    from source\n\n)\n\nselect * from renamed\n\n\n\n\n    \n\nwith source as (\n\n    select * from {{ source('raw', 'trip') }}\n\n),\n\nrenamed as (\n\n    select\n        prim2_common,\n        prim1_common,\n        strat_id,\n        psu_id,\n        add_hrs,\n        area,\n        area_x,\n        catch,\n        cntrbtrs,\n        cnty,\n        cnty_res,\n        coastal,\n        ffdays2,\n        ffdays12,\n        hrsf,\n        id_code,\n        intsite,\n        mode_f,\n        mode_fx,\n        num_typ2,\n        num_typ3,\n        num_typ4,\n        reg_res,\n        st,\n        st_res,\n        sub_reg,\n        telefon,\n        wave,\n        year,\n        asg_code,\n        month,\n        kod,\n        prt_code,\n        celltype,\n        fshinsp_a,\n        num_fish_a,\n        fl_reg,\n        add_ph,\n        county,\n        date1,\n        dist,\n        f_by_p,\n        gear,\n        prim1,\n        prim2,\n        pvt_res,\n        rig,\n        sep_fish,\n        time,\n        age,\n        wp_int,\n        var_id,\n        alt_flag,\n        leader,\n        date_published,\n        first,\n        num_typ6,\n        on_list,\n        party,\n        zip,\n        area_nc,\n        boat_hrs,\n        mode2001,\n        muni_res,\n        num_typ9,\n        new_list,\n        mode_asg,\n        tsn1,\n        tsn2,\n        distkeys,\n        license,\n        monitor,\n        compflag,\n        art_reef,\n        gender,\n        tourn,\n        turtle,\n        date,\n        region,\n        strat_interval,\n        reefcode,\n        wp_int_precal,\n        imp_rec,\n        muni_trp,\n        arx_method,\n        reef_code,\n        reef\n\n    from source\n\n)\n\nselect * from renamed\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.generate_yaml_file_base_models": {"database": "noaa_dw", "schema": "analytics", "name": "generate_yaml_file_base_models", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/generate_yaml_file_base_models.sql", "original_file_path": "analyses/generate_yaml_file_base_models.sql", "unique_id": "analysis.dbt_transforms.generate_yaml_file_base_models", "fqn": ["dbt_transforms", "analysis", "generate_yaml_file_base_models"], "alias": "generate_yaml_file_base_models", "checksum": {"name": "sha256", "checksum": "249f1e1e970db0e07017e5be52a578494d00300497e405f417908c44b4cc69ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.880592, "relation_name": null, "raw_code": "{{ print('\\nGenerate Base YAML File') }}\n{{ print('---------------') }}\ndepends_on: {{ ref('base_noaa__catches') }}\ndepends_on: {{ ref('base_noaa__sizes') }}\ndepends_on: {{ ref('base_noaa__trips') }}\n\n{% if execute %}\n    {% set models_to_generate = codegen.get_models(directory=None, prefix='base_noaa') %}\n    {{ codegen.generate_model_yaml(\n        model_names = models_to_generate,\n        upstream_descriptions=True,\n        include_data_types=True\n    ) }}\n{% endif %}", "language": "sql", "refs": [{"name": "base_noaa__catches", "package": null, "version": null}, {"name": "base_noaa__sizes", "package": null, "version": null}, {"name": "base_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.codegen.get_models", "macro.codegen.generate_model_yaml"], "nodes": ["model.dbt_transforms.base_noaa__catches", "model.dbt_transforms.base_noaa__sizes", "model.dbt_transforms.base_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/analyses/generate_yaml_file_base_models.sql", "compiled": true, "compiled_code": "\n\ndepends_on: \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\ndepends_on: \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\ndepends_on: \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n\n    \n    version: 2\n\nmodels:\n  - name: base_noaa__catches\n    description: \"\"\n    columns:\n      - name: common\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_id\n        data_type: varchar\n        description: \"\"\n\n      - name: psu_id\n        data_type: varchar\n        description: \"\"\n\n      - name: year\n        data_type: varchar\n        description: \"\"\n\n      - name: st\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_fx\n        data_type: varchar\n        description: \"\"\n\n      - name: area_x\n        data_type: varchar\n        description: \"\"\n\n      - name: id_code\n        data_type: varchar\n        description: \"\"\n\n      - name: sub_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: wave\n        data_type: varchar\n        description: \"\"\n\n      - name: kod\n        data_type: varchar\n        description: \"\"\n\n      - name: sp_code\n        data_type: varchar\n        description: \"\"\n\n      - name: claim\n        data_type: varchar\n        description: \"\"\n\n      - name: release\n        data_type: varchar\n        description: \"\"\n\n      - name: harvest\n        data_type: varchar\n        description: \"\"\n\n      - name: claim_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: harvest_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: release_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_len_a\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_a\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_len_b1\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_b1\n        data_type: varchar\n        description: \"\"\n\n      - name: region\n        data_type: varchar\n        description: \"\"\n\n      - name: month\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_cat\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_ab1\n        data_type: varchar\n        description: \"\"\n\n      - name: tot_len\n        data_type: varchar\n        description: \"\"\n\n      - name: landing\n        data_type: varchar\n        description: \"\"\n\n      - name: var_id\n        data_type: varchar\n        description: \"\"\n\n      - name: alt_flag\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_interval\n        data_type: varchar\n        description: \"\"\n\n      - name: fl_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_catch_precal\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_catch\n        data_type: varchar\n        description: \"\"\n\n      - name: date_published\n        data_type: varchar\n        description: \"\"\n\n      - name: arx_method\n        data_type: varchar\n        description: \"\"\n\n      - name: imp_rec\n        data_type: varchar\n        description: \"\"\n\n      - name: _typex\n        data_type: varchar\n        description: \"\"\n\n      - name: _freqx\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int_precal\n        data_type: varchar\n        description: \"\"\n\n  - name: base_noaa__sizes\n    description: \"\"\n    columns:\n      - name: year\n        data_type: varchar\n        description: \"\"\n\n      - name: st\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_fx\n        data_type: varchar\n        description: \"\"\n\n      - name: area_x\n        data_type: varchar\n        description: \"\"\n\n      - name: id_code\n        data_type: varchar\n        description: \"\"\n\n      - name: sub_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: wave\n        data_type: varchar\n        description: \"\"\n\n      - name: month\n        data_type: varchar\n        description: \"\"\n\n      - name: kod\n        data_type: varchar\n        description: \"\"\n\n      - name: sp_code\n        data_type: varchar\n        description: \"\"\n\n      - name: lngth\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt\n        data_type: varchar\n        description: \"\"\n\n      - name: lngth_imp\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_imp\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_id\n        data_type: varchar\n        description: \"\"\n\n      - name: psu_id\n        data_type: varchar\n        description: \"\"\n\n      - name: common\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_size\n        data_type: varchar\n        description: \"\"\n\n      - name: l_in_bin\n        data_type: varchar\n        description: \"\"\n\n      - name: l_cm_bin\n        data_type: varchar\n        description: \"\"\n\n      - name: var_id\n        data_type: varchar\n        description: \"\"\n\n      - name: alt_flag\n        data_type: varchar\n        description: \"\"\n\n      - name: date_published\n        data_type: varchar\n        description: \"\"\n\n      - name: wgt_unadj\n        data_type: varchar\n        description: \"\"\n\n      - name: imp_rec\n        data_type: varchar\n        description: \"\"\n\n  - name: base_noaa__trips\n    description: \"\"\n    columns:\n      - name: prim2_common\n        data_type: varchar\n        description: \"\"\n\n      - name: prim1_common\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_id\n        data_type: varchar\n        description: \"\"\n\n      - name: psu_id\n        data_type: varchar\n        description: \"\"\n\n      - name: add_hrs\n        data_type: varchar\n        description: \"\"\n\n      - name: area\n        data_type: varchar\n        description: \"\"\n\n      - name: area_x\n        data_type: varchar\n        description: \"\"\n\n      - name: catch\n        data_type: varchar\n        description: \"\"\n\n      - name: cntrbtrs\n        data_type: varchar\n        description: \"\"\n\n      - name: cnty\n        data_type: varchar\n        description: \"\"\n\n      - name: cnty_res\n        data_type: varchar\n        description: \"\"\n\n      - name: coastal\n        data_type: varchar\n        description: \"\"\n\n      - name: ffdays2\n        data_type: varchar\n        description: \"\"\n\n      - name: ffdays12\n        data_type: varchar\n        description: \"\"\n\n      - name: hrsf\n        data_type: varchar\n        description: \"\"\n\n      - name: id_code\n        data_type: varchar\n        description: \"\"\n\n      - name: intsite\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_f\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_fx\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ2\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ3\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ4\n        data_type: varchar\n        description: \"\"\n\n      - name: reg_res\n        data_type: varchar\n        description: \"\"\n\n      - name: st\n        data_type: varchar\n        description: \"\"\n\n      - name: st_res\n        data_type: varchar\n        description: \"\"\n\n      - name: sub_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: telefon\n        data_type: varchar\n        description: \"\"\n\n      - name: wave\n        data_type: varchar\n        description: \"\"\n\n      - name: year\n        data_type: varchar\n        description: \"\"\n\n      - name: asg_code\n        data_type: varchar\n        description: \"\"\n\n      - name: month\n        data_type: varchar\n        description: \"\"\n\n      - name: kod\n        data_type: varchar\n        description: \"\"\n\n      - name: prt_code\n        data_type: varchar\n        description: \"\"\n\n      - name: celltype\n        data_type: varchar\n        description: \"\"\n\n      - name: fshinsp_a\n        data_type: varchar\n        description: \"\"\n\n      - name: num_fish_a\n        data_type: varchar\n        description: \"\"\n\n      - name: fl_reg\n        data_type: varchar\n        description: \"\"\n\n      - name: add_ph\n        data_type: varchar\n        description: \"\"\n\n      - name: county\n        data_type: varchar\n        description: \"\"\n\n      - name: date1\n        data_type: varchar\n        description: \"\"\n\n      - name: dist\n        data_type: varchar\n        description: \"\"\n\n      - name: f_by_p\n        data_type: varchar\n        description: \"\"\n\n      - name: gear\n        data_type: varchar\n        description: \"\"\n\n      - name: prim1\n        data_type: varchar\n        description: \"\"\n\n      - name: prim2\n        data_type: varchar\n        description: \"\"\n\n      - name: pvt_res\n        data_type: varchar\n        description: \"\"\n\n      - name: rig\n        data_type: varchar\n        description: \"\"\n\n      - name: sep_fish\n        data_type: varchar\n        description: \"\"\n\n      - name: time\n        data_type: varchar\n        description: \"\"\n\n      - name: age\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int\n        data_type: varchar\n        description: \"\"\n\n      - name: var_id\n        data_type: varchar\n        description: \"\"\n\n      - name: alt_flag\n        data_type: varchar\n        description: \"\"\n\n      - name: leader\n        data_type: varchar\n        description: \"\"\n\n      - name: date_published\n        data_type: varchar\n        description: \"\"\n\n      - name: first\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ6\n        data_type: varchar\n        description: \"\"\n\n      - name: on_list\n        data_type: varchar\n        description: \"\"\n\n      - name: party\n        data_type: varchar\n        description: \"\"\n\n      - name: zip\n        data_type: varchar\n        description: \"\"\n\n      - name: area_nc\n        data_type: varchar\n        description: \"\"\n\n      - name: boat_hrs\n        data_type: varchar\n        description: \"\"\n\n      - name: mode2001\n        data_type: varchar\n        description: \"\"\n\n      - name: muni_res\n        data_type: varchar\n        description: \"\"\n\n      - name: num_typ9\n        data_type: varchar\n        description: \"\"\n\n      - name: new_list\n        data_type: varchar\n        description: \"\"\n\n      - name: mode_asg\n        data_type: varchar\n        description: \"\"\n\n      - name: tsn1\n        data_type: varchar\n        description: \"\"\n\n      - name: tsn2\n        data_type: varchar\n        description: \"\"\n\n      - name: distkeys\n        data_type: varchar\n        description: \"\"\n\n      - name: license\n        data_type: varchar\n        description: \"\"\n\n      - name: monitor\n        data_type: varchar\n        description: \"\"\n\n      - name: compflag\n        data_type: varchar\n        description: \"\"\n\n      - name: art_reef\n        data_type: varchar\n        description: \"\"\n\n      - name: gender\n        data_type: varchar\n        description: \"\"\n\n      - name: tourn\n        data_type: varchar\n        description: \"\"\n\n      - name: turtle\n        data_type: varchar\n        description: \"\"\n\n      - name: date\n        data_type: varchar\n        description: \"\"\n\n      - name: region\n        data_type: varchar\n        description: \"\"\n\n      - name: strat_interval\n        data_type: varchar\n        description: \"\"\n\n      - name: reefcode\n        data_type: varchar\n        description: \"\"\n\n      - name: wp_int_precal\n        data_type: varchar\n        description: \"\"\n\n      - name: imp_rec\n        data_type: varchar\n        description: \"\"\n\n      - name: muni_trp\n        data_type: varchar\n        description: \"\"\n\n      - name: arx_method\n        data_type: varchar\n        description: \"\"\n\n      - name: reef_code\n        data_type: varchar\n        description: \"\"\n\n      - name: reef\n        data_type: varchar\n        description: \"\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.generate_yaml_file_sources": {"database": "noaa_dw", "schema": "analytics", "name": "generate_yaml_file_sources", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/generate_yaml_file_sources.sql", "original_file_path": "analyses/generate_yaml_file_sources.sql", "unique_id": "analysis.dbt_transforms.generate_yaml_file_sources", "fqn": ["dbt_transforms", "analysis", "generate_yaml_file_sources"], "alias": "generate_yaml_file_sources", "checksum": {"name": "sha256", "checksum": "36d8134ca7a20a3d3c8e8cf14aed676885c1ba99b99596805f8beba195b8cb62"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.8900216, "relation_name": null, "raw_code": "{{ print('\\nGenerate Source YAML File') }}\n{{ print('---------------') }}\n\n{{ codegen.generate_source(schema_name= 'raw', \n                            database_name= 'noaa_dw',\n                            table_names = [\"catch\",\"size\",\"trip\"],\n                            generate_columns= true,\n                            include_descriptions= true,\n                            include_database= true,\n                            include_schema= true) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.codegen.generate_source"], "nodes": []}, "compiled_path": "target/compiled/dbt_transforms/analyses/generate_yaml_file_sources.sql", "compiled": true, "compiled_code": "\n\n\nversion: 2\n\nsources:\n  - name: raw\n    description: \"\"\n    database: noaa_dw\n    schema: raw\n    tables:\n      - name: catch\n        description: \"\"\n        columns:\n          - name: common\n            data_type: varchar\n            description: \"\"\n          - name: strat_id\n            data_type: varchar\n            description: \"\"\n          - name: psu_id\n            data_type: varchar\n            description: \"\"\n          - name: year\n            data_type: varchar\n            description: \"\"\n          - name: st\n            data_type: varchar\n            description: \"\"\n          - name: mode_fx\n            data_type: varchar\n            description: \"\"\n          - name: area_x\n            data_type: varchar\n            description: \"\"\n          - name: id_code\n            data_type: varchar\n            description: \"\"\n          - name: sub_reg\n            data_type: varchar\n            description: \"\"\n          - name: wave\n            data_type: varchar\n            description: \"\"\n          - name: kod\n            data_type: varchar\n            description: \"\"\n          - name: sp_code\n            data_type: varchar\n            description: \"\"\n          - name: claim\n            data_type: varchar\n            description: \"\"\n          - name: release\n            data_type: varchar\n            description: \"\"\n          - name: harvest\n            data_type: varchar\n            description: \"\"\n          - name: claim_unadj\n            data_type: varchar\n            description: \"\"\n          - name: harvest_unadj\n            data_type: varchar\n            description: \"\"\n          - name: release_unadj\n            data_type: varchar\n            description: \"\"\n          - name: tot_len_a\n            data_type: varchar\n            description: \"\"\n          - name: wgt_a\n            data_type: varchar\n            description: \"\"\n          - name: tot_len_b1\n            data_type: varchar\n            description: \"\"\n          - name: wgt_b1\n            data_type: varchar\n            description: \"\"\n          - name: region\n            data_type: varchar\n            description: \"\"\n          - name: month\n            data_type: varchar\n            description: \"\"\n          - name: tot_cat\n            data_type: varchar\n            description: \"\"\n          - name: wgt_ab1\n            data_type: varchar\n            description: \"\"\n          - name: tot_len\n            data_type: varchar\n            description: \"\"\n          - name: landing\n            data_type: varchar\n            description: \"\"\n          - name: var_id\n            data_type: varchar\n            description: \"\"\n          - name: alt_flag\n            data_type: varchar\n            description: \"\"\n          - name: strat_interval\n            data_type: varchar\n            description: \"\"\n          - name: fl_reg\n            data_type: varchar\n            description: \"\"\n          - name: wp_catch_precal\n            data_type: varchar\n            description: \"\"\n          - name: wp_int\n            data_type: varchar\n            description: \"\"\n          - name: wp_catch\n            data_type: varchar\n            description: \"\"\n          - name: date_published\n            data_type: varchar\n            description: \"\"\n          - name: arx_method\n            data_type: varchar\n            description: \"\"\n          - name: imp_rec\n            data_type: varchar\n            description: \"\"\n          - name: _typex\n            data_type: varchar\n            description: \"\"\n          - name: _freqx\n            data_type: varchar\n            description: \"\"\n          - name: wp_int_precal\n            data_type: varchar\n            description: \"\"\n\n      - name: size\n        description: \"\"\n        columns:\n          - name: year\n            data_type: varchar\n            description: \"\"\n          - name: st\n            data_type: varchar\n            description: \"\"\n          - name: mode_fx\n            data_type: varchar\n            description: \"\"\n          - name: area_x\n            data_type: varchar\n            description: \"\"\n          - name: id_code\n            data_type: varchar\n            description: \"\"\n          - name: sub_reg\n            data_type: varchar\n            description: \"\"\n          - name: wave\n            data_type: varchar\n            description: \"\"\n          - name: month\n            data_type: varchar\n            description: \"\"\n          - name: kod\n            data_type: varchar\n            description: \"\"\n          - name: sp_code\n            data_type: varchar\n            description: \"\"\n          - name: lngth\n            data_type: varchar\n            description: \"\"\n          - name: wgt\n            data_type: varchar\n            description: \"\"\n          - name: lngth_imp\n            data_type: varchar\n            description: \"\"\n          - name: wgt_imp\n            data_type: varchar\n            description: \"\"\n          - name: strat_id\n            data_type: varchar\n            description: \"\"\n          - name: psu_id\n            data_type: varchar\n            description: \"\"\n          - name: common\n            data_type: varchar\n            description: \"\"\n          - name: wp_size\n            data_type: varchar\n            description: \"\"\n          - name: l_in_bin\n            data_type: varchar\n            description: \"\"\n          - name: l_cm_bin\n            data_type: varchar\n            description: \"\"\n          - name: var_id\n            data_type: varchar\n            description: \"\"\n          - name: alt_flag\n            data_type: varchar\n            description: \"\"\n          - name: date_published\n            data_type: varchar\n            description: \"\"\n          - name: wgt_unadj\n            data_type: varchar\n            description: \"\"\n          - name: imp_rec\n            data_type: varchar\n            description: \"\"\n\n      - name: trip\n        description: \"\"\n        columns:\n          - name: prim2_common\n            data_type: varchar\n            description: \"\"\n          - name: prim1_common\n            data_type: varchar\n            description: \"\"\n          - name: strat_id\n            data_type: varchar\n            description: \"\"\n          - name: psu_id\n            data_type: varchar\n            description: \"\"\n          - name: add_hrs\n            data_type: varchar\n            description: \"\"\n          - name: area\n            data_type: varchar\n            description: \"\"\n          - name: area_x\n            data_type: varchar\n            description: \"\"\n          - name: catch\n            data_type: varchar\n            description: \"\"\n          - name: cntrbtrs\n            data_type: varchar\n            description: \"\"\n          - name: cnty\n            data_type: varchar\n            description: \"\"\n          - name: cnty_res\n            data_type: varchar\n            description: \"\"\n          - name: coastal\n            data_type: varchar\n            description: \"\"\n          - name: ffdays2\n            data_type: varchar\n            description: \"\"\n          - name: ffdays12\n            data_type: varchar\n            description: \"\"\n          - name: hrsf\n            data_type: varchar\n            description: \"\"\n          - name: id_code\n            data_type: varchar\n            description: \"\"\n          - name: intsite\n            data_type: varchar\n            description: \"\"\n          - name: mode_f\n            data_type: varchar\n            description: \"\"\n          - name: mode_fx\n            data_type: varchar\n            description: \"\"\n          - name: num_typ2\n            data_type: varchar\n            description: \"\"\n          - name: num_typ3\n            data_type: varchar\n            description: \"\"\n          - name: num_typ4\n            data_type: varchar\n            description: \"\"\n          - name: reg_res\n            data_type: varchar\n            description: \"\"\n          - name: st\n            data_type: varchar\n            description: \"\"\n          - name: st_res\n            data_type: varchar\n            description: \"\"\n          - name: sub_reg\n            data_type: varchar\n            description: \"\"\n          - name: telefon\n            data_type: varchar\n            description: \"\"\n          - name: wave\n            data_type: varchar\n            description: \"\"\n          - name: year\n            data_type: varchar\n            description: \"\"\n          - name: asg_code\n            data_type: varchar\n            description: \"\"\n          - name: month\n            data_type: varchar\n            description: \"\"\n          - name: kod\n            data_type: varchar\n            description: \"\"\n          - name: prt_code\n            data_type: varchar\n            description: \"\"\n          - name: celltype\n            data_type: varchar\n            description: \"\"\n          - name: fshinsp_a\n            data_type: varchar\n            description: \"\"\n          - name: num_fish_a\n            data_type: varchar\n            description: \"\"\n          - name: fl_reg\n            data_type: varchar\n            description: \"\"\n          - name: add_ph\n            data_type: varchar\n            description: \"\"\n          - name: county\n            data_type: varchar\n            description: \"\"\n          - name: date1\n            data_type: varchar\n            description: \"\"\n          - name: dist\n            data_type: varchar\n            description: \"\"\n          - name: f_by_p\n            data_type: varchar\n            description: \"\"\n          - name: gear\n            data_type: varchar\n            description: \"\"\n          - name: prim1\n            data_type: varchar\n            description: \"\"\n          - name: prim2\n            data_type: varchar\n            description: \"\"\n          - name: pvt_res\n            data_type: varchar\n            description: \"\"\n          - name: rig\n            data_type: varchar\n            description: \"\"\n          - name: sep_fish\n            data_type: varchar\n            description: \"\"\n          - name: time\n            data_type: varchar\n            description: \"\"\n          - name: age\n            data_type: varchar\n            description: \"\"\n          - name: wp_int\n            data_type: varchar\n            description: \"\"\n          - name: var_id\n            data_type: varchar\n            description: \"\"\n          - name: alt_flag\n            data_type: varchar\n            description: \"\"\n          - name: leader\n            data_type: varchar\n            description: \"\"\n          - name: date_published\n            data_type: varchar\n            description: \"\"\n          - name: first\n            data_type: varchar\n            description: \"\"\n          - name: num_typ6\n            data_type: varchar\n            description: \"\"\n          - name: on_list\n            data_type: varchar\n            description: \"\"\n          - name: party\n            data_type: varchar\n            description: \"\"\n          - name: zip\n            data_type: varchar\n            description: \"\"\n          - name: area_nc\n            data_type: varchar\n            description: \"\"\n          - name: boat_hrs\n            data_type: varchar\n            description: \"\"\n          - name: mode2001\n            data_type: varchar\n            description: \"\"\n          - name: muni_res\n            data_type: varchar\n            description: \"\"\n          - name: num_typ9\n            data_type: varchar\n            description: \"\"\n          - name: new_list\n            data_type: varchar\n            description: \"\"\n          - name: mode_asg\n            data_type: varchar\n            description: \"\"\n          - name: tsn1\n            data_type: varchar\n            description: \"\"\n          - name: tsn2\n            data_type: varchar\n            description: \"\"\n          - name: distkeys\n            data_type: varchar\n            description: \"\"\n          - name: license\n            data_type: varchar\n            description: \"\"\n          - name: monitor\n            data_type: varchar\n            description: \"\"\n          - name: compflag\n            data_type: varchar\n            description: \"\"\n          - name: art_reef\n            data_type: varchar\n            description: \"\"\n          - name: gender\n            data_type: varchar\n            description: \"\"\n          - name: tourn\n            data_type: varchar\n            description: \"\"\n          - name: turtle\n            data_type: varchar\n            description: \"\"\n          - name: date\n            data_type: varchar\n            description: \"\"\n          - name: region\n            data_type: varchar\n            description: \"\"\n          - name: strat_interval\n            data_type: varchar\n            description: \"\"\n          - name: reefcode\n            data_type: varchar\n            description: \"\"\n          - name: wp_int_precal\n            data_type: varchar\n            description: \"\"\n          - name: imp_rec\n            data_type: varchar\n            description: \"\"\n          - name: muni_trp\n            data_type: varchar\n            description: \"\"\n          - name: arx_method\n            data_type: varchar\n            description: \"\"\n          - name: reef_code\n            data_type: varchar\n            description: \"\"\n          - name: reef\n            data_type: varchar\n            description: \"\"\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.information_schema_queries": {"database": "noaa_dw", "schema": "analytics", "name": "information_schema_queries", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/adhoc_queries/information_schema_queries.sql", "original_file_path": "analyses/adhoc_queries/information_schema_queries.sql", "unique_id": "analysis.dbt_transforms.information_schema_queries", "fqn": ["dbt_transforms", "analysis", "adhoc_queries", "information_schema_queries"], "alias": "information_schema_queries", "checksum": {"name": "sha256", "checksum": "0aa5c808567e56e371b9b31ff1eb5fcd3cb91ca94ecf7bd5551833ef5bc972a4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.9205997, "relation_name": null, "raw_code": "select * from information_schema.tables", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/dbt_transforms/analyses/adhoc_queries/information_schema_queries.sql", "compiled": true, "compiled_code": "select * from information_schema.tables", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.merge_duplicate_column_names": {"database": "noaa_dw", "schema": "analytics", "name": "merge_duplicate_column_names", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/adhoc_queries/merge_duplicate_column_names.sql", "original_file_path": "analyses/adhoc_queries/merge_duplicate_column_names.sql", "unique_id": "analysis.dbt_transforms.merge_duplicate_column_names", "fqn": ["dbt_transforms", "analysis", "adhoc_queries", "merge_duplicate_column_names"], "alias": "merge_duplicate_column_names", "checksum": {"name": "sha256", "checksum": "1bff5bcd27d4ddd99e74f964dcc1373dd2556423bc2e14e02f1acedaf41a1df0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.9265573, "relation_name": null, "raw_code": "-- Returns a list of the columns from a relation, so you can then iterate in a for loop\n{%- set src = source('raw', 'size') -%}\n{%- set all_column_names = dbt_utils.get_filtered_columns_in_relation(from=src) -%}\n{%- set duplicate_column_names = [] %}\n{%- set original_column_names = [] %}\n\n--{{ all_column_names }}\n\n-- Loop through column names and append any duplicated column names to a new list\n{% for all_column_name in all_column_names -%}\n    {%- if all_column_name[-2] == '_' and all_column_name[-1] in ['1','2','3'] -%}\n        {%- set _ = duplicate_column_names.append(all_column_name.lower()) -%}\n    {%- endif -%}\n{%- endfor %}\n\n--{{ duplicate_column_names }}\n\n-- Get the original column name and append to separate list\n{% for duplicate_column_name in duplicate_column_names %}\n    {%- set _ = original_column_names.append(duplicate_column_name[:-2]) -%}\n{% endfor %}\n\n--{{ original_column_names }}\n\n-- Merge the original and duplicated column name using coalesce\nselect \n{% for duplicate_column_name in duplicate_column_names -%}\n    coalesce({{ duplicate_column_name[:-2] }}, {{ duplicate_column_name }}) as {{ duplicate_column_name[:-2] }},\n{% endfor -%}\n{% for all_column_name in all_column_names -%}\n    {% if all_column_name not in original_column_names and all_column_name not in duplicate_column_names %}\n{{ all_column_name }}\n        {%- if not loop.last -%}\n            ,\n        {%- endif -%}\n    {% endif -%}\n{% endfor %}\nfrom {{ source('raw', 'size') }}", "language": "sql", "refs": [], "sources": [["raw", "size"], ["raw", "size"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"], "nodes": ["source.dbt_transforms.raw.size"]}, "compiled_path": "target/compiled/dbt_transforms/analyses/adhoc_queries/merge_duplicate_column_names.sql", "compiled": true, "compiled_code": "-- Returns a list of the columns from a relation, so you can then iterate in a for loop\n\n--['year', 'st', 'mode_fx', 'area_x', 'id_code', 'sub_reg', 'wave', 'month', 'kod', 'sp_code', 'lngth', 'wgt', 'lngth_imp', 'wgt_imp', 'strat_id', 'psu_id', 'common', 'wp_size', 'l_in_bin', 'l_cm_bin', 'var_id', 'alt_flag', 'date_published', 'wgt_unadj', 'imp_rec']\n\n-- Loop through column names and append any duplicated column names to a new list\n\n\n--[]\n\n-- Get the original column name and append to separate list\n\n\n--[]\n\n-- Merge the original and duplicated column name using coalesce\nselect \n\nyear,\nst,\nmode_fx,\narea_x,\nid_code,\nsub_reg,\nwave,\nmonth,\nkod,\nsp_code,\nlngth,\nwgt,\nlngth_imp,\nwgt_imp,\nstrat_id,\npsu_id,\ncommon,\nwp_size,\nl_in_bin,\nl_cm_bin,\nvar_id,\nalt_flag,\ndate_published,\nwgt_unadj,\nimp_rec\nfrom \"noaa_dw\".\"raw\".\"size\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.source_profiler": {"database": "noaa_dw", "schema": "analytics", "name": "source_profiler", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/adhoc_queries/source_profiler.sql", "original_file_path": "analyses/adhoc_queries/source_profiler.sql", "unique_id": "analysis.dbt_transforms.source_profiler", "fqn": ["dbt_transforms", "analysis", "adhoc_queries", "source_profiler"], "alias": "source_profiler", "checksum": {"name": "sha256", "checksum": "bfb980af7ba612395f9494a7ef173cb32daea8095ef89c0c7e4a4303df048923"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.944796, "relation_name": null, "raw_code": "{% set relation = source('raw', 'catch') %}\n{% set null_proportion = 0.7 %}\n{% set id_column = 'id_code' %}\n{% set match_pattern = '[0-9]{16}' %}\n{% set replace_pattern = '[^0-9]' %}\n\nwith drop_cols as (\n    -- drop cols with high null proportion\n    select\n    {{ dbt_utils.star(from=relation, except=drop_cols_high_nulls(relation, null_proportion)) }}\n    from {{ relation }}\n\n)\n\nselect * from drop_cols\n\nvalid_records as (\n    -- filter records where id_code is valid\n    -- how to pass a cte as a relation to this macro look at the source code for deduplication macro\n    {{ filter_id_code(relation, id_column, match_pattern, replace_pattern) }}\n\n)\n\nselect * from valid_records", "language": "sql", "refs": [], "sources": [["raw", "catch"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_transforms.drop_cols_high_nulls", "macro.dbt_utils.star", "macro.dbt_transforms.filter_id_code"], "nodes": ["source.dbt_transforms.raw.catch"]}, "compiled_path": "target/compiled/dbt_transforms/analyses/adhoc_queries/source_profiler.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith drop_cols as (\n    -- drop cols with high null proportion\n    select\n    \"common\",\n  \"strat_id\",\n  \"psu_id\",\n  \"year\",\n  \"st\",\n  \"mode_fx\",\n  \"area_x\",\n  \"id_code\",\n  \"sub_reg\",\n  \"wave\",\n  \"kod\",\n  \"sp_code\",\n  \"claim\",\n  \"release\",\n  \"harvest\",\n  \"claim_unadj\",\n  \"harvest_unadj\",\n  \"release_unadj\",\n  \"tot_len_a\",\n  \"wgt_a\",\n  \"tot_len_b1\",\n  \"wgt_b1\",\n  \"month\",\n  \"tot_cat\",\n  \"wgt_ab1\",\n  \"tot_len\",\n  \"landing\",\n  \"var_id\",\n  \"alt_flag\",\n  \"fl_reg\",\n  \"wp_int\",\n  \"wp_catch\",\n  \"date_published\"\n    from \"noaa_dw\".\"raw\".\"catch\"\n\n)\n\nselect * from drop_cols\n\nvalid_records as (\n    -- filter records where id_code is valid\n    -- how to pass a cte as a relation to this macro look at the source code for deduplication macro\n    \n\n    with unfiltered as (\n\n        select * from \"noaa_dw\".\"raw\".\"catch\"\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches(id_code, '[0-9]{16}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace(id_code, '[^0-9]', '') as id_code) from filtered\n\n    )\n\n    select * from fixed\n\n\n\n)\n\nselect * from valid_records", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transforms.adhoc_queries": {"database": "noaa_dw", "schema": "analytics", "name": "adhoc_queries", "resource_type": "analysis", "package_name": "dbt_transforms", "path": "analysis/adhoc_queries/adhoc_queries.sql", "original_file_path": "analyses/adhoc_queries/adhoc_queries.sql", "unique_id": "analysis.dbt_transforms.adhoc_queries", "fqn": ["dbt_transforms", "analysis", "adhoc_queries", "adhoc_queries"], "alias": "adhoc_queries", "checksum": {"name": "sha256", "checksum": "f5a4e91897023c5d9292b7fc9fbd3b06ca5837ef41d61811f890237da5b72a4d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629553.9591446, "relation_name": null, "raw_code": "--get number of records in sources\nselect count(*) from {{ source('raw', 'catch') }}\nselect count(*) from {{ source('raw', 'size') }}\nselect count(*) from {{ source('raw', 'trip') }}\n\n--get number of records in base models\nselect count(*) from {{ ref('base_noaa__catches') }}\nselect count(*) from {{ ref('base_noaa__sizes') }}\nselect count(*) from {{ ref('base_noaa__trips') }}\n\n--get number of records in staging models\nselect count(*) from {{ ref('stg_noaa__catches') }}\nselect count(*) from {{ ref('stg_noaa__sizes') }}\nselect count(*) from {{ ref('stg_noaa__trips') }}\n\n--get distinct survey ids in stg_noaa__trips\nselect count(survey_id) from {{ ref('stg_noaa__trips') }}\nselect count(distinct survey_id) from {{ ref('stg_noaa__trips') }}\n\n--inspect records with duplicate id_code\nwith catch as (select * from {{ source('raw', 'catch') }})\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\nwith catch as (select * from {{ source('raw', 'size') }})\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\nwith catch as (select * from {{ source('raw', 'trip') }})\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\n--get number of records in staging models\nselect count(*) from {{ ref('stg_noaa__catches') }}\nselect count(*) from {{ ref('stg_noaa__sizes') }}\nselect count(*) from {{ ref('stg_noaa__trips') }}\n\n--find missing years\nwith date_spine as (\n\n                    {{ dbt_utils.date_spine(\n                        datepart=\"year\",\n                        start_date=\"cast('1981-01-01' as date)\",\n                        end_date=\"cast('2024-01-01' as date)\"\n                    )\n                    }}\n\n),\n\nyear_spine as (\n\n                    SELECT year(date_year) as year\n                    from date_spine\n\n)\n\nSELECT distinct year\nFROM year_spine\nLEFT JOIN {{ ref('stg_noaa__trips') }} c ON year_spine.year = c.trip_year\nWHERE c.trip_year IS NULL\n\n--get trips where target species identified and not identified and compare to total number of trips\nselect count(*) as num_trips_total, count(*) - count(species_common_name) as num_trips_without_target_species, count(species_common_name) as num_trips_with_target_species from {{ ref('stg_noaa__sizes') }}\n\n--get top 10 species by number of trips were targeted\nselect sum(num_trips_where_species_targeted)\nfrom\n(\nselect \nspecies_common_name, \ncount(species_common_name) as num_trips_where_species_targeted\nfrom {{ ref('stg_noaa__sizes') }}\ngroup by species_common_name\norder by num_trips_where_species_targeted desc\nlimit 10\n)\n\n--create catch rate column partitioned by region\nselect caught, us_region, try_cast(caught as int) / sum(try_cast(caught as int)) over (partition by us_region) as catch_rate from {{ ref('stg_noaa__trips') }}\n\n--\nselect count(*) from analytics.trip_details", "language": "sql", "refs": [{"name": "base_noaa__catches", "package": null, "version": null}, {"name": "base_noaa__sizes", "package": null, "version": null}, {"name": "base_noaa__trips", "package": null, "version": null}, {"name": "stg_noaa__catches", "package": null, "version": null}, {"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}, {"name": "stg_noaa__catches", "package": null, "version": null}, {"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}, {"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "stg_noaa__sizes", "package": null, "version": null}, {"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [["raw", "catch"], ["raw", "size"], ["raw", "trip"], ["raw", "catch"], ["raw", "size"], ["raw", "trip"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": ["source.dbt_transforms.raw.catch", "source.dbt_transforms.raw.size", "source.dbt_transforms.raw.trip", "model.dbt_transforms.base_noaa__catches", "model.dbt_transforms.base_noaa__sizes", "model.dbt_transforms.base_noaa__trips", "model.dbt_transforms.stg_noaa__catches", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/analyses/adhoc_queries/adhoc_queries.sql", "compiled": true, "compiled_code": "--get number of records in sources\nselect count(*) from \"noaa_dw\".\"raw\".\"catch\"\nselect count(*) from \"noaa_dw\".\"raw\".\"size\"\nselect count(*) from \"noaa_dw\".\"raw\".\"trip\"\n\n--get number of records in base models\nselect count(*) from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n\n--get number of records in staging models\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--get distinct survey ids in stg_noaa__trips\nselect count(survey_id) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\nselect count(distinct survey_id) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--inspect records with duplicate id_code\nwith catch as (select * from \"noaa_dw\".\"raw\".\"catch\")\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\nwith catch as (select * from \"noaa_dw\".\"raw\".\"size\")\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\nwith catch as (select * from \"noaa_dw\".\"raw\".\"trip\")\nselect \n--count(*)\nID_CODE, WAVE, strat_id, date_published, AREA_X, kod, SUB_REG, ST, psu_id, MODE_FX, YEAR, *\nfrom catch\nwhere ID_CODE IN (select id_code from catch group by id_code having count(*) > 1)\norder by id_code desc\n\n--get number of records in staging models\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nselect count(*) from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--find missing years\nwith date_spine as (\n\n                    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 43\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    date_add(cast('1981-01-01' as date), interval (row_number() over (order by 1) - 1) year)\n\n\n    ) as date_year\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_year <= cast('2024-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n\n),\n\nyear_spine as (\n\n                    SELECT year(date_year) as year\n                    from date_spine\n\n)\n\nSELECT distinct year\nFROM year_spine\nLEFT JOIN \"noaa_dw\".\"analytics\".\"stg_noaa__trips\" c ON year_spine.year = c.trip_year\nWHERE c.trip_year IS NULL\n\n--get trips where target species identified and not identified and compare to total number of trips\nselect count(*) as num_trips_total, count(*) - count(species_common_name) as num_trips_without_target_species, count(species_common_name) as num_trips_with_target_species from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n\n--get top 10 species by number of trips were targeted\nselect sum(num_trips_where_species_targeted)\nfrom\n(\nselect \nspecies_common_name, \ncount(species_common_name) as num_trips_where_species_targeted\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\ngroup by species_common_name\norder by num_trips_where_species_targeted desc\nlimit 10\n)\n\n--create catch rate column partitioned by region\nselect caught, us_region, try_cast(caught as int) / sum(try_cast(caught as int)) over (partition by us_region) as catch_rate from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n\n--\nselect count(*) from analytics.trip_details", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.dbt_transforms.county_fips_codes": {"database": "noaa_dw", "schema": "analytics", "name": "county_fips_codes", "resource_type": "seed", "package_name": "dbt_transforms", "path": "county_fips_codes.csv", "original_file_path": "seeds/county_fips_codes.csv", "unique_id": "seed.dbt_transforms.county_fips_codes", "fqn": ["dbt_transforms", "county_fips_codes"], "alias": "county_fips_codes", "checksum": {"name": "sha256", "checksum": "10d10a857e28080a47b1e8f671e3eadcc5e6de0a793b7cfb8ff54991e1e34d03"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.171606, "relation_name": "\"noaa_dw\".\"analytics\".\"county_fips_codes\"", "raw_code": "", "root_path": "/app/dbt_transforms", "depends_on": {"macros": []}}, "seed.dbt_transforms.state_fips_codes": {"database": "noaa_dw", "schema": "analytics", "name": "state_fips_codes", "resource_type": "seed", "package_name": "dbt_transforms", "path": "state_fips_codes.csv", "original_file_path": "seeds/state_fips_codes.csv", "unique_id": "seed.dbt_transforms.state_fips_codes", "fqn": ["dbt_transforms", "state_fips_codes"], "alias": "state_fips_codes", "checksum": {"name": "sha256", "checksum": "8860382a88eb2ef9a1332190386543163eab589d56976349d808932e3c9a7f26"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.1751542, "relation_name": "\"noaa_dw\".\"analytics\".\"state_fips_codes\"", "raw_code": "", "root_path": "/app/dbt_transforms", "depends_on": {"macros": []}}, "test.dbt_transforms.unique_stg_noaa__trips_trip_id.15bb77a9de": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_noaa__trips')) }}"}, "namespace": null}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "unique_stg_noaa__trips_trip_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "unique_stg_noaa__trips_trip_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.unique_stg_noaa__trips_trip_id.15bb77a9de", "fqn": ["dbt_transforms", "staging", "noaa", "unique_stg_noaa__trips_trip_id"], "alias": "unique_stg_noaa__trips_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.600334, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/unique_stg_noaa__trips_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    trip_id as unique_field,\n    count(*) as n_records\n\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\nwhere trip_id is not null\ngroup by trip_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_noaa__trips", "attached_node": "model.dbt_transforms.stg_noaa__trips"}, "test.dbt_transforms.not_null_stg_noaa__trips_trip_id.718263be21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_noaa__trips')) }}"}, "namespace": null}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_noaa__trips_trip_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "not_null_stg_noaa__trips_trip_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.not_null_stg_noaa__trips_trip_id.718263be21", "fqn": ["dbt_transforms", "staging", "noaa", "not_null_stg_noaa__trips_trip_id"], "alias": "not_null_stg_noaa__trips_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.6029885, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/not_null_stg_noaa__trips_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_noaa__trips", "attached_node": "model.dbt_transforms.stg_noaa__trips"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.32c7e5b173": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "survey_id", "model": "{{ get_where_subquery(ref('stg_noaa__trips')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.32c7e5b173", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id"], "alias": "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.6053317, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "survey_id", "file_key_name": "models.stg_noaa__trips", "attached_node": "model.dbt_transforms.stg_noaa__trips"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.ae4bd30101": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "survey_year", "model": "{{ get_where_subquery(ref('stg_noaa__trips')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.ae4bd30101", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year"], "alias": "dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.623701, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_year is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "survey_year", "file_key_name": "models.stg_noaa__trips", "attached_node": "model.dbt_transforms.stg_noaa__trips"}, "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year.c15b2ce1b2": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["survey_id", "survey_year"], "model": "{{ get_where_subquery(ref('stg_noaa__trips')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_unique_combination_o_404a68307e2adeff5577afd8c6612212.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year.c15b2ce1b2", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year"], "alias": "dbt_utils_unique_combination_o_404a68307e2adeff5577afd8c6612212", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_404a68307e2adeff5577afd8c6612212", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_404a68307e2adeff5577afd8c6612212"}, "created_at": 1722629554.6290789, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_404a68307e2adeff5577afd8c6612212\") }}", "language": "sql", "refs": [{"name": "stg_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_unique_combination_o_404a68307e2adeff5577afd8c6612212.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, survey_year\n    from \"noaa_dw\".\"analytics\".\"stg_noaa__trips\"\n    group by survey_id, survey_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_noaa__trips", "attached_node": "model.dbt_transforms.stg_noaa__trips"}, "test.dbt_transforms.unique_stg_noaa__catches_catch_id.56754d28a3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "catch_id", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": null}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "unique_stg_noaa__catches_catch_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "unique_stg_noaa__catches_catch_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.unique_stg_noaa__catches_catch_id.56754d28a3", "fqn": ["dbt_transforms", "staging", "noaa", "unique_stg_noaa__catches_catch_id"], "alias": "unique_stg_noaa__catches_catch_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.6401181, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/unique_stg_noaa__catches_catch_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    catch_id as unique_field,\n    count(*) as n_records\n\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nwhere catch_id is not null\ngroup by catch_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "catch_id", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.not_null_stg_noaa__catches_catch_id.7603e1e6a1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "catch_id", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": null}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_noaa__catches_catch_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "not_null_stg_noaa__catches_catch_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.not_null_stg_noaa__catches_catch_id.7603e1e6a1", "fqn": ["dbt_transforms", "staging", "noaa", "not_null_stg_noaa__catches_catch_id"], "alias": "not_null_stg_noaa__catches_catch_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.642784, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/not_null_stg_noaa__catches_catch_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect catch_id\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\nwhere catch_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "catch_id", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.7c0c7bd69c": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "survey_id", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.7c0c7bd69c", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id"], "alias": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.6450522, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "survey_id", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year.1c7b6d880b": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "survey_year", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__86f5d8e5ecf91e44861a2da072de314a.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year.1c7b6d880b", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year"], "alias": "dbt_utils_not_null_proportion__86f5d8e5ecf91e44861a2da072de314a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__86f5d8e5ecf91e44861a2da072de314a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__86f5d8e5ecf91e44861a2da072de314a"}, "created_at": 1722629554.6500435, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__86f5d8e5ecf91e44861a2da072de314a\") }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__86f5d8e5ecf91e44861a2da072de314a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_year is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "survey_year", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name.cdf30988b4": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "species_common_name", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__9f38de778d3115d133c8b72fc3dc998c.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name.cdf30988b4", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name"], "alias": "dbt_utils_not_null_proportion__9f38de778d3115d133c8b72fc3dc998c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__9f38de778d3115d133c8b72fc3dc998c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__9f38de778d3115d133c8b72fc3dc998c"}, "created_at": 1722629554.6553874, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__9f38de778d3115d133c8b72fc3dc998c\") }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__9f38de778d3115d133c8b72fc3dc998c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when species_common_name is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "species_common_name", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught.c1f86bd118": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "total_number_fish_caught", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__e3f18e27221b4241a2daa44427aab9be.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught.c1f86bd118", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught"], "alias": "dbt_utils_not_null_proportion__e3f18e27221b4241a2daa44427aab9be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__e3f18e27221b4241a2daa44427aab9be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__e3f18e27221b4241a2daa44427aab9be"}, "created_at": 1722629554.6609435, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__e3f18e27221b4241a2daa44427aab9be\") }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__e3f18e27221b4241a2daa44427aab9be.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when total_number_fish_caught is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_number_fish_caught", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm.ec0cdda650": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "total_length_fish_harvested_mm", "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__61019f1d0c920e888163a89cf63b1309.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm.ec0cdda650", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm"], "alias": "dbt_utils_not_null_proportion__61019f1d0c920e888163a89cf63b1309", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__61019f1d0c920e888163a89cf63b1309", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__61019f1d0c920e888163a89cf63b1309"}, "created_at": 1722629554.6660924, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__61019f1d0c920e888163a89cf63b1309\") }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__61019f1d0c920e888163a89cf63b1309.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when total_length_fish_harvested_mm is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_length_fish_harvested_mm", "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year.ea7f3d6e05": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["survey_id", "species_common_name", "total_number_fish_caught", "total_length_fish_harvested_mm", "survey_year"], "model": "{{ get_where_subquery(ref('stg_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_unique_combination_o_a5511448a6d17d0af130608db8be1cc3.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year.ea7f3d6e05", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year"], "alias": "dbt_utils_unique_combination_o_a5511448a6d17d0af130608db8be1cc3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a5511448a6d17d0af130608db8be1cc3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a5511448a6d17d0af130608db8be1cc3"}, "created_at": 1722629554.6717067, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a5511448a6d17d0af130608db8be1cc3\") }}", "language": "sql", "refs": [{"name": "stg_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_unique_combination_o_a5511448a6d17d0af130608db8be1cc3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, species_common_name, total_number_fish_caught, total_length_fish_harvested_mm, survey_year\n    from \"noaa_dw\".\"analytics\".\"stg_noaa__catches\"\n    group by survey_id, species_common_name, total_number_fish_caught, total_length_fish_harvested_mm, survey_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_noaa__catches", "attached_node": "model.dbt_transforms.stg_noaa__catches"}, "test.dbt_transforms.unique_stg_noaa__sizes_size_id.05b5a2e641": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "size_id", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": null}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "unique_stg_noaa__sizes_size_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "unique_stg_noaa__sizes_size_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.unique_stg_noaa__sizes_size_id.05b5a2e641", "fqn": ["dbt_transforms", "staging", "noaa", "unique_stg_noaa__sizes_size_id"], "alias": "unique_stg_noaa__sizes_size_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.676823, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/unique_stg_noaa__sizes_size_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    size_id as unique_field,\n    count(*) as n_records\n\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nwhere size_id is not null\ngroup by size_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "size_id", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.not_null_stg_noaa__sizes_size_id.0f6052fe92": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "size_id", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": null}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "not_null_stg_noaa__sizes_size_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "not_null_stg_noaa__sizes_size_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.not_null_stg_noaa__sizes_size_id.0f6052fe92", "fqn": ["dbt_transforms", "staging", "noaa", "not_null_stg_noaa__sizes_size_id"], "alias": "not_null_stg_noaa__sizes_size_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.679412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/not_null_stg_noaa__sizes_size_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect size_id\nfrom \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\nwhere size_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "size_id", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.a4ffba5c5a": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "survey_id", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.a4ffba5c5a", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id"], "alias": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.6816905, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "survey_id", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.9eede4301f": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "survey_year", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.9eede4301f", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year"], "alias": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722629554.6866186, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when survey_year is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "survey_year", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name.37f4556c80": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "species_common_name", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__f7682c80b196548dcdfb10f637dc93d8.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name.37f4556c80", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name"], "alias": "dbt_utils_not_null_proportion__f7682c80b196548dcdfb10f637dc93d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__f7682c80b196548dcdfb10f637dc93d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__f7682c80b196548dcdfb10f637dc93d8"}, "created_at": 1722629554.6917832, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__f7682c80b196548dcdfb10f637dc93d8\") }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__f7682c80b196548dcdfb10f637dc93d8.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when species_common_name is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "species_common_name", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg.be668c8a6e": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "fish_weight_kg", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__efba0645e62c2f656bd61853ba842de3.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg.be668c8a6e", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg"], "alias": "dbt_utils_not_null_proportion__efba0645e62c2f656bd61853ba842de3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__efba0645e62c2f656bd61853ba842de3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__efba0645e62c2f656bd61853ba842de3"}, "created_at": 1722629554.696938, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__efba0645e62c2f656bd61853ba842de3\") }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__efba0645e62c2f656bd61853ba842de3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_weight_kg is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fish_weight_kg", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm.9cee64e486": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "fish_length_mm", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__451b1099be3a0306b29e33a67eef948d.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm.9cee64e486", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm"], "alias": "dbt_utils_not_null_proportion__451b1099be3a0306b29e33a67eef948d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__451b1099be3a0306b29e33a67eef948d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__451b1099be3a0306b29e33a67eef948d"}, "created_at": 1722629554.7024794, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__451b1099be3a0306b29e33a67eef948d\") }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__451b1099be3a0306b29e33a67eef948d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_length_mm is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fish_length_mm", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm.ee2978697c": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "fish_length_cm", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__ec4830ca1939f3141769028eeae1a1d3.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm.ee2978697c", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm"], "alias": "dbt_utils_not_null_proportion__ec4830ca1939f3141769028eeae1a1d3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__ec4830ca1939f3141769028eeae1a1d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__ec4830ca1939f3141769028eeae1a1d3"}, "created_at": 1722629554.7077885, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__ec4830ca1939f3141769028eeae1a1d3\") }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__ec4830ca1939f3141769028eeae1a1d3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_length_cm is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fish_length_cm", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in.1754ca6676": {"test_metadata": {"name": "not_null_proportion", "kwargs": {"at_least": 0.75, "column_name": "fish_length_in", "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_not_null_proportion__ee94a096a61a2ab5f022c7fc0fa48383.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in.1754ca6676", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in"], "alias": "dbt_utils_not_null_proportion__ee94a096a61a2ab5f022c7fc0fa48383", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_null_proportion__ee94a096a61a2ab5f022c7fc0fa48383", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_not_null_proportion__ee94a096a61a2ab5f022c7fc0fa48383"}, "created_at": 1722629554.7128823, "relation_name": null, "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__ee94a096a61a2ab5f022c7fc0fa48383\") }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_null_proportion", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_not_null_proportion__ee94a096a61a2ab5f022c7fc0fa48383.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when fish_length_in is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.75 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fish_length_in", "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year.896904c4ca": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["survey_id", "species_common_name", "fish_weight_kg", "fish_length_mm", "survey_year"], "model": "{{ get_where_subquery(ref('stg_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_unique_combination_o_dc1290e356cf97786df23845375af491.sql", "original_file_path": "models/staging/noaa/_noaa__stg_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year.896904c4ca", "fqn": ["dbt_transforms", "staging", "noaa", "dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year"], "alias": "dbt_utils_unique_combination_o_dc1290e356cf97786df23845375af491", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dc1290e356cf97786df23845375af491", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dc1290e356cf97786df23845375af491"}, "created_at": 1722629554.7183197, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dc1290e356cf97786df23845375af491\") }}", "language": "sql", "refs": [{"name": "stg_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.stg_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/_noaa__stg_models.yml/dbt_utils_unique_combination_o_dc1290e356cf97786df23845375af491.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        survey_id, species_common_name, fish_weight_kg, fish_length_mm, survey_year\n    from \"noaa_dw\".\"analytics\".\"stg_noaa__sizes\"\n    group by survey_id, species_common_name, fish_weight_kg, fish_length_mm, survey_year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_noaa__sizes", "attached_node": "model.dbt_transforms.stg_noaa__sizes"}, "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year.b5d6cb5fbd": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["id_code", "common", "tot_cat", "tot_len", "year"], "model": "{{ get_where_subquery(ref('base_noaa__catches')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_unique_combination_o_d2db997a6250940b8de22b450e8ae1e9.sql", "original_file_path": "models/staging/noaa/base/_noaa__base_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year.b5d6cb5fbd", "fqn": ["dbt_transforms", "staging", "noaa", "base", "dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year"], "alias": "dbt_utils_unique_combination_o_d2db997a6250940b8de22b450e8ae1e9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d2db997a6250940b8de22b450e8ae1e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d2db997a6250940b8de22b450e8ae1e9"}, "created_at": 1722629554.9407375, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d2db997a6250940b8de22b450e8ae1e9\") }}", "language": "sql", "refs": [{"name": "base_noaa__catches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.base_noaa__catches"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/base/_noaa__base_models.yml/dbt_utils_unique_combination_o_d2db997a6250940b8de22b450e8ae1e9.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_code, common, tot_cat, tot_len, year\n    from \"noaa_dw\".\"analytics\".\"base_noaa__catches\"\n    group by id_code, common, tot_cat, tot_len, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.base_noaa__catches", "attached_node": "model.dbt_transforms.base_noaa__catches"}, "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year.3b7dcbbb9b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["id_code", "common", "wgt", "lngth", "year"], "model": "{{ get_where_subquery(ref('base_noaa__sizes')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_unique_combination_o_64296ae065926000430362ce3e2da1e2.sql", "original_file_path": "models/staging/noaa/base/_noaa__base_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year.3b7dcbbb9b", "fqn": ["dbt_transforms", "staging", "noaa", "base", "dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year"], "alias": "dbt_utils_unique_combination_o_64296ae065926000430362ce3e2da1e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_64296ae065926000430362ce3e2da1e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_64296ae065926000430362ce3e2da1e2"}, "created_at": 1722629554.9464211, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64296ae065926000430362ce3e2da1e2\") }}", "language": "sql", "refs": [{"name": "base_noaa__sizes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.base_noaa__sizes"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/base/_noaa__base_models.yml/dbt_utils_unique_combination_o_64296ae065926000430362ce3e2da1e2.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_code, common, wgt, lngth, year\n    from \"noaa_dw\".\"analytics\".\"base_noaa__sizes\"\n    group by id_code, common, wgt, lngth, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.base_noaa__sizes", "attached_node": "model.dbt_transforms.base_noaa__sizes"}, "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year.91756b9da8": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["id_code", "year"], "model": "{{ get_where_subquery(ref('base_noaa__trips')) }}"}, "namespace": "dbt_utils"}, "database": "noaa_dw", "schema": "analytics_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year", "resource_type": "test", "package_name": "dbt_transforms", "path": "dbt_utils_unique_combination_o_a1be598964b04fab223a999cd43917e7.sql", "original_file_path": "models/staging/noaa/base/_noaa__base_models.yml", "unique_id": "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year.91756b9da8", "fqn": ["dbt_transforms", "staging", "noaa", "base", "dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year"], "alias": "dbt_utils_unique_combination_o_a1be598964b04fab223a999cd43917e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a1be598964b04fab223a999cd43917e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a1be598964b04fab223a999cd43917e7"}, "created_at": 1722629554.951708, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a1be598964b04fab223a999cd43917e7\") }}", "language": "sql", "refs": [{"name": "base_noaa__trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transforms.base_noaa__trips"]}, "compiled_path": "target/compiled/dbt_transforms/models/staging/noaa/base/_noaa__base_models.yml/dbt_utils_unique_combination_o_a1be598964b04fab223a999cd43917e7.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_code, year\n    from \"noaa_dw\".\"analytics\".\"base_noaa__trips\"\n    group by id_code, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.base_noaa__trips", "attached_node": "model.dbt_transforms.base_noaa__trips"}}, "sources": {"source.dbt_transforms.raw.catch": {"database": "noaa_dw", "schema": "raw", "name": "catch", "resource_type": "source", "package_name": "dbt_transforms", "path": "models/staging/noaa/_noaa__sources.yml", "original_file_path": "models/staging/noaa/_noaa__sources.yml", "unique_id": "source.dbt_transforms.raw.catch", "fqn": ["dbt_transforms", "staging", "noaa", "raw", "catch"], "source_name": "raw", "source_description": "Raw data from NOAA MRIP csv files", "loader": "", "identifier": "catch", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents all catches.\n\n`dbt-profiler` results:\n\n| column_name     | data_type | row_count |     not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| --------------- | --------- | --------- | ----------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| common          | varchar   | 5,828,705 | 0.763023347381622500000 | 0.00015835421418651313000 |            923 |     False |     |     |     |        |                    |                | ... |\n| strat_id        | varchar   | 5,828,705 | 1.000000000000000000000 | 0.01001920666769033600000 |          58399 |     False |     |     |     |        |                    |                | ... |\n| psu_id          | varchar   | 5,828,705 | 1.000000000000000000000 | 0.06868523968874733000000 |         400346 |     False |     |     |     |        |                    |                | ... |\n| year            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000754884661344157950 |             44 |     False |     |     |     |        |                    |                | ... |\n| st              | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000343129391520071770 |             20 |     False |     |     |     |        |                    |                | ... |\n| mode_fx         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| area_x          | varchar   | 5,828,705 | 0.999999142176521200000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| id_code         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.62853498332820070000000 |        3663545 |     False |     |     |     |        |                    |                | ... |\n| sub_reg         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000120095287032025120 |              7 |     False |     |     |     |        |                    |                | ... |\n| wave            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| kod             | varchar   | 5,828,705 | 0.999968432095980200000 | 0.00000051469408728010770 |              3 |     False |     |     |     |        |                    |                | ... |\n| sp_code         | varchar   | 5,828,705 | 0.763023862075709800000 | 0.00015921203766531330000 |            928 |     False |     |     |     |        |                    |                | ... |\n| claim           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.04044895049586486000000 |         235765 |     False |     |     |     |        |                    |                | ... |\n| release         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00215553883752909100000 |          12564 |     False |     |     |     |        |                    |                | ... |\n| harvest         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00054317382677627360000 |           3166 |     False |     |     |     |        |                    |                | ... |\n| claim_unadj     | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00005918982003721238000 |            345 |     False |     |     |     |        |                    |                | ... |\n| harvest_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00004340586802728908000 |            253 |     False |     |     |     |        |                    |                | ... |\n| release_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00003259729219440682000 |            190 |     False |     |     |     |        |                    |                | ... |\n| tot_len_a       | varchar   | 5,828,705 | 0.999999828435304200000 | 0.06841725563397015000000 |         398784 |     False |     |     |     |        |                    |                | ... |\n| wgt_a           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.07045218449037993000000 |         410645 |     False |     |     |     |        |                    |                | ... |\n| tot_len_b1      | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00888996784019778000000 |          51817 |     False |     |     |     |        |                    |                | ... |\n| wgt_b1          | varchar   | 5,828,705 | 0.999999828435304200000 | 0.01413624467184391700000 |          82396 |     False |     |     |     |        |                    |                | ... |\n| region          | varchar   | 5,828,705 | 0.305074969482929700000 | 0.00000154408226184032300 |              9 |     False |     |     |     |        |                    |                | ... |\n| month           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00000223034104488046650 |             13 |     False |     |     |     |        |                    |                | ... |\n| tot_cat         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.05636054663943363000000 |         328509 |     False |     |     |     |        |                    |                | ... |\n| wgt_ab1         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.08132080796677821000000 |         473995 |     False |     |     |     |        |                    |                | ... |\n| tot_len         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.07187891650032040000000 |         418961 |     False |     |     |     |        |                    |                | ... |\n| landing         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.04195082784254821500000 |         244519 |     False |     |     |     |        |                    |                | ... |\n| var_id          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.01006964668824378600000 |          58693 |     False |     |     |     |        |                    |                | ... |\n| alt_flag        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000034312939152007176 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_interval  | varchar   | 5,828,705 | 0.007694505040141850000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| fl_reg          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| wp_catch_precal | varchar   | 5,828,705 | 0.822431054582450100000 | 0.03737571210071534000000 |         217852 |     False |     |     |     |        |                    |                | ... |\n| wp_int          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09078465971429331000000 |         529157 |     False |     |     |     |        |                    |                | ... |\n| wp_catch        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09087627526182918000000 |         529691 |     False |     |     |     |        |                    |                | ... |\n| date_published  | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| arx_method      | varchar   | 5,828,705 | 0.000277076983652457950 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| imp_rec         | varchar   | 5,828,705 | 0.017320656989845945000 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _typex          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _freqx          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal   | varchar   | 5,828,705 | 0.026497995695441784000 | 0.00310806602838881000000 |          18116 |     False |     |     |     |        |                    |                | ... |", "columns": {"date_published": {"name": "date_published", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "common": {"name": "common", "description": "Common name of species", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id": {"name": "strat_id", "description": "Identifier for survey design stratum; if using revised trip/catch/size datasets (2013-), \nSTRAT_ID should be replaced with VAR_ID in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "psu_id": {"name": "psu_id", "description": "year, wave, st, region, mode_fx, asg_code\nIdentifier for survey design primary sampling unit; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code": {"name": "id_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx": {"name": "mode_fx", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_x": {"name": "area_x", "description": "Collapsed area of fishing \n   1 = Ocean <= 3 mi (all but WFL) \n   2 = Ocean > 3 mi (all but WFL) \n   3 = Ocean <= 10 mi (WFL only) \n   4 = Ocean > 10 mi (WFL only) \n   5 = Inland\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st": {"name": "st", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg": {"name": "sub_reg", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wave": {"name": "wave", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "kod": {"name": "kod", "description": "Kind of day\n    wd = Weekday\n    we = Weekend\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sp_code": {"name": "sp_code", "description": "Species code of fish", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "claim": {"name": "claim", "description": "Count of fish that were caught, landed whole, and available for identification to species and enumeration by the interviewer.  \nThese fish were available for weighing and measuring. \n\nSome values have been adjusted to account for (depending on mode of fishing) incomplete shore trips and grouped catch. \nCompare to CLAIM_UNADJ to see if counts were adjusted.   \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "release": {"name": "release", "description": "Number of fish that were caught and released alive.\nSome values have been adjusted to account for (depending on mode of fishing) incomplete shore trips. \nCompare to RELEASE_UNADJ to see if counts were adjusted.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "harvest": {"name": "harvest", "description": "Number of fish that were caught, not released live, but not available in whole form for examination, identification, or enumeration.  \nThey are all dead, and may be filleted, released dead, given away, or used for some other purpose but are not available for identification to species and counting.\nSome values have been adjusted to account for (depending on mode of fishing) incomplete shore trips. Compare to HARVEST_UNADJ to see if counts were adjusted.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "claim_unadj": {"name": "claim_unadj", "description": "Unadjusted count of fish that were caught, landed whole, and available for identification to species and enumeration by the interviewer.  \nThese fish were available for weighing and measuring.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "harvest_unadj": {"name": "harvest_unadj", "description": "Unadjusted number of fish that were caught, not released live, but not available in whole form for examination, identification, or enumeration.  \nThey are all dead, and may be filleted, released dead, given away, or used for some other purpose but are not available for identification to species and counting.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "release_unadj": {"name": "release_unadj", "description": "Unadjusted number of fish that were caught and released alive.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_len_a": {"name": "tot_len_a", "description": "Total Fork (centerline) length of fish (mm) for all Observed Harvest (CLAIM, A) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_a": {"name": "wgt_a", "description": "Total weight (kg) of all Observed Harvest (CLAIM, A) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_len_b1": {"name": "tot_len_b1", "description": "Total Fork (centerline) length of fish (mm) for all Reported Harvest (HARVEST, B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_b1": {"name": "wgt_b1", "description": "Total weight (kg) of all Reported Harvest (HARVEST, B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_cat": {"name": "tot_cat", "description": "The number of fish caught but not necessarily brought ashore.  May be obtained by summing catch types A (CLAIM), B1 (HARVEST), and B2 (RELEASE).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_ab1": {"name": "wgt_ab1", "description": "Total weight (kg) of all fish removed from the fishery resource (LANDING, A+B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tot_len": {"name": "tot_len", "description": "Total Fork (centerline) length of fish (mm) for all landings (A+B1) by species on trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "landing": {"name": "landing", "description": "The total number of fish removed from the fishery resource.  May be obtained by summing catch types A (CLAIM) and B1 (HARVEST).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id": {"name": "var_id", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; \nshould be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method": {"name": "arx_method", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag": {"name": "alt_flag", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fl_reg": {"name": "fl_reg", "description": "Florida regions with included counties:\n1 = BAY, DIXIE, ESCAMBIA, FRANKLIN, GULF, JEFFERSON, OKALOOSA, SANTA ROSA, TAYLOR, WAKULLA, WALTON\n2 = CHARLOTTE, CITRUS, COLLIER, HERNANDO, HILLSBOROUGH, LEE, LEVY, MANATEE, PASCO, PINELLAS, SARASOTA\n3 = MONROE\n4 = BROWARD, DADE, INDIAN RIVER, MARTIN, PALM BEACH ST. LUCIE\n5 = BREVARD, CLAY, DUVAL, FLAGLER, NASSAU, ST. JOHNS, VOLUSIA\n8 = N/A\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_catch_precal": {"name": "wp_catch_precal", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int": {"name": "wp_int", "description": "Survey design sampling weight for TRIP and CATCH datasets; wp_int should only be used to weight records in TRIP and CATCH datasets.  \nShould be specified in any survey procedure, using the TRIP or CATCH datasets, for appropriate point estimate calculation and variance estimations.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_catch": {"name": "wp_catch", "description": "Survey design sampling weight for CATCH datasets; wp_catch should only be used to weight records in CATCH datasets.  \nShould be specified in any survey procedure, using the CATCH datasets, for appropriate point estimate calculation and variance estimations.  \n** NOTE: WP_INT is still included in CATCH datasets for backwards compatibility.  \nWP_CATCH equals WP_INT for all records except those in specific STATE,MODE_FX,YEAR combinations with small sample size issues.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code_1": {"name": "id_code_1", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year_1": {"name": "year_1", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "_type_": {"name": "_type_", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "_freq_": {"name": "_freq_", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month_1": {"name": "month_1", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "landing_1": {"name": "landing_1", "description": "The total number of fish removed from the fishery resource.  May be obtained by summing catch types A (CLAIM) and B1 (HARVEST).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id_1": {"name": "var_id_1", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; should be specified in any survey procedure for appropriate variance estimation", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method_1": {"name": "arx_method_1", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag_1": {"name": "alt_flag_1", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Sub-state georgraphic area stratum in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_interval": {"name": "strat_interval", "description": "6 or 12 hour time interval in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int_precal": {"name": "wp_int_precal", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "imp_rec": {"name": "imp_rec", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sp_code_1": {"name": "sp_code_1", "description": "Species code of fish", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"noaa_dw\".\"raw\".\"catch\"", "created_at": 1722629554.9601324}, "source.dbt_transforms.raw.size": {"database": "noaa_dw", "schema": "raw", "name": "size", "resource_type": "source", "package_name": "dbt_transforms", "path": "models/staging/noaa/_noaa__sources.yml", "original_file_path": "models/staging/noaa/_noaa__sources.yml", "unique_id": "source.dbt_transforms.raw.size", "fqn": ["dbt_transforms", "staging", "noaa", "raw", "size"], "source_name": "raw", "source_description": "Raw data from NOAA MRIP csv files", "loader": "", "identifier": "size", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents all sizes.\n\n`dbt-profiler` results:\n\n| column_name    | data_type | row_count |  not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | -------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| year           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000584181982197393750 |             43 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000258126922366290240 |             19 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 7,360,720 | 1.000000000000000000 | 0.33438073992761580000000 |        2461283 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 7,360,720 | 0.885231336064950200 | 0.00000163027529915551730 |             12 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 7,360,720 | 0.999908568726972300 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| sp_code        | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011221728309187145000 |            826 |     False |     |     |     |        |                    |                | ... |\n| lngth          | varchar   | 7,360,720 | 0.803923121651142800 | 0.00412962318903585500000 |          30397 |     False |     |     |     |        |                    |                | ... |\n| wgt            | varchar   | 7,360,720 | 0.797549560369094300 | 0.04404392505081025000000 |         324195 |     False |     |     |     |        |                    |                | ... |\n| lngth_imp      | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| wgt_imp        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.04937071373452597000000 |         363404 |     False |     |     |     |        |                    |                | ... |\n| common         | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011194557054201220000 |            824 |     False |     |     |     |        |                    |                | ... |\n| wp_size        | varchar   | 7,360,720 | 0.999651936223630200 | 0.11588879892184460000000 |         853025 |     False |     |     |     |        |                    |                | ... |\n| l_in_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00001847645339042919800 |            136 |     False |     |     |     |        |                    |                | ... |\n| l_cm_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00004211544522818420000 |            310 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000054342509971850580 |              4 |     False |     |     |     |        |                    |                | ... |\n| wgt_unadj      | varchar   | 7,360,720 | 0.393738248432218600 | 0.00767968350922192400000 |          56528 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 7,360,720 | 0.025260164766490234 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |", "columns": {"wave": {"name": "wave", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st": {"name": "st", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx": {"name": "mode_fx", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg": {"name": "sub_reg", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sp_code": {"name": "sp_code", "description": "Species code of fish", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "common": {"name": "common", "description": "Common name of species", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id": {"name": "var_id", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; \nshould be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method": {"name": "arx_method", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag": {"name": "alt_flag", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id": {"name": "strat_id", "description": "Identifier for survey design stratum; if using revised trip/catch/size datasets (2013-), \nSTRAT_ID should be replaced with VAR_ID in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date_published": {"name": "date_published", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code": {"name": "id_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx_1": {"name": "mode_fx_1", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_x": {"name": "area_x", "description": "Collapsed area of fishing \n   1 = Ocean <= 3 mi (all but WFL) \n   2 = Ocean > 3 mi (all but WFL) \n   3 = Ocean <= 10 mi (WFL only) \n   4 = Ocean > 10 mi (WFL only) \n   5 = Inland\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st_1": {"name": "st_1", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg_1": {"name": "sub_reg_1", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wave_1": {"name": "wave_1", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "kod": {"name": "kod", "description": "Kind of day\n    wd = Weekday\n    we = Weekend\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sp_code_1": {"name": "sp_code_1", "description": "Species code of fish", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "lngth": {"name": "lngth", "description": "Fork length of fish or centerline length for non-forked fish (MM).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt": {"name": "wgt", "description": "Weight of fish in kg at time of interview (round, wet, or live weight).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "lngth_imp": {"name": "lngth_imp", "description": "Length imputation indicator\n    1 = Yes\n    0 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_imp": {"name": "wgt_imp", "description": "Weight imputation indicator\n    1 = Yes\n    0 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id_1": {"name": "strat_id_1", "description": "year, wave, sub_reg, st, fl_reg, mode_fx, month, kod\nIdentifier for survey design stratum; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "psu_id": {"name": "psu_id", "description": "year, wave, st, region, mode_fx, asg_code\nIdentifier for survey design primary sampling unit; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wgt_unadj": {"name": "wgt_unadj", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_size": {"name": "wp_size", "description": "Survey design sampling weight for SIZE dataset; wp_size should not be used to weight records in any other dataset.  \nShould be specified in any survey procedure, using the SIZE dataset, for appropriate point estimate calculation and variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "l_in_bin": {"name": "l_in_bin", "description": "Length of fish rounded down to the nearest in.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "l_cm_bin": {"name": "l_cm_bin", "description": "Length of fish rounded down to the nearest cm.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code_1": {"name": "id_code_1", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year_1": {"name": "year_1", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month_1": {"name": "month_1", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "imp_rec": {"name": "imp_rec", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"noaa_dw\".\"raw\".\"size\"", "created_at": 1722629554.9605236}, "source.dbt_transforms.raw.trip": {"database": "noaa_dw", "schema": "raw", "name": "trip", "resource_type": "source", "package_name": "dbt_transforms", "path": "models/staging/noaa/_noaa__sources.yml", "original_file_path": "models/staging/noaa/_noaa__sources.yml", "unique_id": "source.dbt_transforms.raw.trip", "fqn": ["dbt_transforms", "staging", "noaa", "raw", "trip"], "source_name": "raw", "source_description": "Raw data from NOAA MRIP csv files", "loader": "", "identifier": "trip", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents all trips.\n\n`dbt-profiler` results:\n\n| column_name    | data_type | row_count |     not_null_proportion |      distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | ----------------------- | ------------------------ | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| prim2_common   | varchar   | 3,739,116 | 0.158339297309845420000 | 0.0001278377028153178500 |            478 |     False |     |     |     |        |                    |                | ... |\n| prim1_common   | varchar   | 3,739,116 | 0.599395418596267100000 | 0.0001615355073231213000 |            604 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0159152591147212340000 |          59509 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 3,739,116 | 0.996369462728623600000 | 0.1074633683469568700000 |         401818 |     False |     |     |     |        |                    |                | ... |\n| add_hrs        | varchar   | 3,739,116 | 0.670955648340409900000 | 0.0000203256598618497000 |             76 |     False |     |     |     |        |                    |                | ... |\n| area           | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000072209581088150245 |             27 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 3,739,116 | 0.996368660399944800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| catch          | varchar   | 3,739,116 | 0.995809169867958100000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| cntrbtrs       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000109651586096820740 |             41 |     False |     |     |     |        |                    |                | ... |\n| cnty           | varchar   | 3,739,116 | 0.995829495527820000000 | 0.0000240698603627167500 |             90 |     False |     |     |     |        |                    |                | ... |\n| cnty_res       | varchar   | 3,739,116 | 0.995773599963199800000 | 0.0001305121317445085900 |            488 |     False |     |     |     |        |                    |                | ... |\n| coastal        | varchar   | 3,739,116 | 0.995013527261523800000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| ffdays2        | varchar   | 3,739,116 | 0.994734584324209200000 | 0.0000184535596114161740 |             69 |     False |     |     |     |        |                    |                | ... |\n| ffdays12       | varchar   | 3,739,116 | 0.994839689381126400000 | 0.0000962794414508670000 |            360 |     False |     |     |     |        |                    |                | ... |\n| hrsf           | varchar   | 3,739,116 | 0.994899061703354500000 | 0.0000494769351900288700 |            185 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.9839569031824634000000 |        3679129 |     False |     |     |     |        |                    |                | ... |\n| intsite        | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0007795960328591036000 |           2915 |     False |     |     |     |        |                    |                | ... |\n| mode_f         | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ2       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| num_typ3       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000339652474007225260 |            127 |     False |     |     |     |        |                    |                | ... |\n| num_typ4       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| reg_res        | varchar   | 3,739,116 | 0.990181369072262000000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000050814149654624250 |             19 |     False |     |     |     |        |                    |                | ... |\n| st_res         | varchar   | 3,739,116 | 0.995574355007975200000 | 0.0000181861167184971000 |             68 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| telefon        | varchar   | 3,739,116 | 0.742506250140407500000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| year           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000115000443955202240 |             43 |     False |     |     |     |        |                    |                | ... |\n| asg_code       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0884286553292275600000 |         330645 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0000034767576079479747 |             13 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 3,739,116 | 0.996350474283226300000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| prt_code       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.6123369801846211000000 |        2289599 |     False |     |     |     |        |                    |                | ... |\n| celltype       | varchar   | 3,739,116 | 0.626421325254418400000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| fshinsp_a      | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000794305391969652800 |            297 |     False |     |     |     |        |                    |                | ... |\n| num_fish_a     | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000861166115199421500 |            322 |     False |     |     |     |        |                    |                | ... |\n| fl_reg         | varchar   | 3,739,116 | 0.833113762718246800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| add_ph         | varchar   | 3,739,116 | 0.920073889122455700000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| county         | varchar   | 3,739,116 | 0.681102699140652500000 | 0.0001783844095770230000 |            667 |     False |     |     |     |        |                    |                | ... |\n| date1          | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0002091403422627166400 |            782 |     False |     |     |     |        |                    |                | ... |\n| dist           | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| f_by_p         | varchar   | 3,739,116 | 0.983669402072575500000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| gear           | varchar   | 3,739,116 | 0.988198012578374100000 | 0.0000042790862867052000 |             16 |     False |     |     |     |        |                    |                | ... |\n| prim1          | varchar   | 3,739,116 | 0.700596879048416800000 | 0.0001650122649310692700 |            617 |     False |     |     |     |        |                    |                | ... |\n| prim2          | varchar   | 3,739,116 | 0.359161630716993000000 | 0.0001289074743869941400 |            482 |     False |     |     |     |        |                    |                | ... |\n| pvt_res        | varchar   | 3,739,116 | 0.825190499572626200000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| rig            | varchar   | 3,739,116 | 0.162039904619166670000 | 0.0000021395431433526000 |              8 |     False |     |     |     |        |                    |                | ... |\n| sep_fish       | varchar   | 3,739,116 | 0.983034492644785600000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| time           | varchar   | 3,739,116 | 0.988584735001535100000 | 0.0004418156591023118700 |           1652 |     False |     |     |     |        |                    |                | ... |\n| age            | varchar   | 3,739,116 | 0.302461062989219930000 | 0.0000278140608635837970 |            104 |     False |     |     |     |        |                    |                | ... |\n| wp_int         | varchar   | 3,739,116 | 1.000000000000000000000 | 0.1420346413430340300000 |         531084 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 3,739,116 | 0.995916147025125800000 | 0.0157133397305673320000 |          58754 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| leader         | varchar   | 3,739,116 | 0.996365451085229800000 | 0.8424172986342227000000 |        3149896 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| first          | varchar   | 3,739,116 | 0.713186485789689400000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ6       | varchar   | 3,739,116 | 0.879159940477909800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| on_list        | varchar   | 3,739,116 | 0.235640723636281940000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| party          | varchar   | 3,739,116 | 0.700982264257113200000 | 0.0000288838324352600980 |            108 |     False |     |     |     |        |                    |                | ... |\n| zip            | varchar   | 3,739,116 | 0.908805717715096300000 | 0.0113821020797429120000 |          42559 |     False |     |     |     |        |                    |                | ... |\n| area_nc        | varchar   | 3,739,116 | 0.144625360646741100000 | 0.0000085581725734104000 |             32 |     False |     |     |     |        |                    |                | ... |\n| boat_hrs       | varchar   | 3,739,116 | 0.341199363699869140000 | 0.0000377094479015895700 |            141 |     False |     |     |     |        |                    |                | ... |\n| mode2001       | varchar   | 3,739,116 | 0.389019490168264370000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| muni_res       | varchar   | 3,739,116 | 0.000106442271381791840 | 0.0000173837880397398740 |             65 |     False |     |     |     |        |                    |                | ... |\n| num_typ9       | varchar   | 3,739,116 | 0.186856465538913470000 | 0.0000251396319343930500 |             94 |     False |     |     |     |        |                    |                | ... |\n| new_list       | varchar   | 3,739,116 | 0.143402344297422190000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| mode_asg       | varchar   | 3,739,116 | 0.377604760055585350000 | 0.0000018721002504335250 |              7 |     False |     |     |     |        |                    |                | ... |\n| tsn1           | varchar   | 3,739,116 | 0.317040979739596200000 | 0.0001206167447065028200 |            451 |     False |     |     |     |        |                    |                | ... |\n| tsn2           | varchar   | 3,739,116 | 0.129391546023177680000 | 0.0000976166559154623700 |            365 |     False |     |     |     |        |                    |                | ... |\n| distkeys       | varchar   | 3,739,116 | 0.173429495099911320000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| license        | varchar   | 3,739,116 | 0.099345406775291270000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| monitor        | varchar   | 3,739,116 | 0.116959998031620310000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| compflag       | varchar   | 3,739,116 | 0.012953329075642478000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| art_reef       | varchar   | 3,739,116 | 0.174222463277416360000 | 0.0000125698159671965250 |             47 |     False |     |     |     |        |                    |                | ... |\n| gender         | varchar   | 3,739,116 | 0.211273199333746280000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| tourn          | varchar   | 3,739,116 | 0.103942482661677260000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| turtle         | varchar   | 3,739,116 | 0.116515775386481720000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| date           | varchar   | 3,739,116 | 0.042832049072561540000 | 0.0001781169666841039400 |            666 |     False |     |     |     |        |                    |                | ... |\n| region         | varchar   | 3,739,116 | 0.279464450955787400000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| strat_interval | varchar   | 3,739,116 | 0.279235252396555800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| reefcode       | varchar   | 3,739,116 | 0.017981255462521090000 | 0.0000609769795855491000 |            228 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal  | varchar   | 3,739,116 | 0.024187267792708224000 | 0.0048629141219475410000 |          18183 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 3,739,116 | 0.016037480516785250000 | 0.0000002674428929190750 |              1 |     False |     |     |     |        |                    |                | ... |\n| muni_trp       | varchar   | 3,739,116 | 0.000011232601502601149 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| arx_method     | varchar   | 3,739,116 | 0.000223582258480346700 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| reef_code      | varchar   | 3,739,116 | 0.000052418807012138700 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| reef           | varchar   | 3,739,116 | 0.014351787962716321000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |", "columns": {"date_published": {"name": "date_published", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim2_common": {"name": "prim2_common", "description": "Common name of second target species", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim1_common": {"name": "prim1_common", "description": "Number of anglers in fishing party (Boat modes only)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_id": {"name": "strat_id", "description": "Identifier for survey design stratum; if using revised trip/catch/size datasets (2013-), \nSTRAT_ID should be replaced with VAR_ID in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "psu_id": {"name": "psu_id", "description": "year, wave, st, region, mode_fx, asg_code\nIdentifier for survey design primary sampling unit; should be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code": {"name": "id_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_fx": {"name": "mode_fx", "description": "Collapsed fishing mode code \n    1=Man-Made\n    2=Beach/Bank\n    3=Shore\n    4=Headboat\n    5=Charter Boat (sub_reg=6 or 7 & mode_f=7)\n    7=Private/Rental Boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_f": {"name": "mode_f", "description": "Fishing Mode \n   1 = Pier, dock \n   2 = Jetty, breakwater, breachway \n   3 = Bridge, causeway \n   4 = Other man-made \n   5 = Beach or bank \n   6 = Head boat \n   7 = Charter boat \n   8 = Private/Rental boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_x": {"name": "area_x", "description": "Collapsed area of fishing \n   1 = Ocean <= 3 mi (all but WFL) \n   2 = Ocean > 3 mi (all but WFL) \n   3 = Ocean <= 10 mi (WFL only) \n   4 = Ocean > 10 mi (WFL only) \n   5 = Inland\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area": {"name": "area", "description": "Uncollapsed area of fishing (alpha codes refer to specific estuaries) \n    1 = Open water \n    2 = Sound \n    3 = River \n    4 = Bay \n    5 = Other \n    A = Narragansett Estuary \n    B = Buzzards Bay Estuary \n    C = Long Island Estuary \n    D = Hudson/Raritan Estuary \n    E = Delaware Estuary \n    F = Chesapeake Estuary \n    G = Albemarle/Pamlico Estuary \n    H = Biscayne Estuary \n    I  = Whitewater Estuary \n    J = Sarasota Estuary \n    K = Tampa Estuary \n    L = Mobile Estuary \n    M = Atchafelaya Estuary \n    N = Boqueron Estuary \n    O = Guanica Estuary \n    P = Guayanilla Estuary \n    Q = Humacao Estuary \n    R = Jobos Estuary \n    S = San Juan Estuary \n    T =Tortuguero Estuary \n    V = Cape Cod Bay\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st": {"name": "st", "description": "FIPS code for state of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cnty": {"name": "cnty", "description": "FIPS code for county of intercept", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "intsite": {"name": "intsite", "description": "Four digit numerical code for the site where the interview was conducted.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "hrsf": {"name": "hrsf", "description": "Hours fished (to nearest 1/2 hour)\n    99.8 = don't know\n    99.9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "ffdays12": {"name": "ffdays12", "description": "Number of days fished in the last year \n   998 = don't know \n   999 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "ffdays2": {"name": "ffdays2", "description": "Number of days fished in the last 2 months \n    98 = don't know \n    99 = refused \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cnty_res": {"name": "cnty_res", "description": "FIPS code for county of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "st_res": {"name": "st_res", "description": "FIPS code for state of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "telefon": {"name": "telefon", "description": "Does home have phone? \n   1 = Yes \n   2 = No \n   8 = don't know \n   9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "cntrbtrs": {"name": "cntrbtrs", "description": "Number of contributors to Available catch, 88 = all caught by fisherman or no available catch", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ2": {"name": "num_typ2", "description": " Number of type 2 records", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ3": {"name": "num_typ3", "description": " Number of type 3 records", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ4": {"name": "num_typ4", "description": "Type 4 record present? (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sub_reg": {"name": "sub_reg", "description": "Subregion code for region of trip\n   4   = North Atlantic (ME; NH; MA; RI; CT) \n   5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n   6   = South Atlantic (NC; SC; GA; EFL) \n   7   = Gulf of Mexico (WFL; AL; MS; LA) \n   8   = West Pacific (HI) \n   11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reg_res": {"name": "reg_res", "description": "Subregion code for region of residence\n    4   = North Atlantic (ME; NH; MA; RI; CT) \n    5   = Mid-Atlantic (NY; NJ; DE; MD; VA) \n    6   = South Atlantic (NC; SC; GA; EFL) \n    7   = Gulf of Mexico (WFL; AL; MS; LA) \n    8   = West Pacific (HI) \n    11 = U. S. Caribbean (Puerto Rico and Virgin Islands\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wave": {"name": "wave", "description": "Two-month sampling period\n    1 = January/February\n    2 = March/April\n    3 = May/June\n    4 = July/August\n    5 = September/October\n    6 = November/December\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "add_hrs": {"name": "add_hrs", "description": "Additional hours fishing expected (to the nearest 1/2 hr) (incomplete beach/bank trips only)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "coastal": {"name": "coastal", "description": "Specifies whether an interviewee is a coastal county resident, non-coastal county resident, or is a resident of a state other than the one they are fishing in.\n    N = Non-coastal county resident\n    O = Out-of-State\n    Y = Coastal-county resident\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "catch": {"name": "catch", "description": "Did you catch any fish \n    1 = Yes \n    2 = No \n    3 = Catch on another person's form \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "asg_code": {"name": "asg_code", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "kod": {"name": "kod", "description": "Kind of day\n    wd = Weekday\n    we = Weekend\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode_asg": {"name": "mode_asg", "description": "Mode of Assignment\n(All states EXCEPT NC):\n1 = SH\n2 = PC\n3 = PR\n5 = CH\n6 = HB\n7 = Mixed Boat Mode Sampling: PR or CH interviews (All states 2014 wave 3 - 2015 wave 6)\n7= Mixed Boat Mode Sampling: PR or CH interviews, Offshore Site Group (West Florida only, 2015 Waves 3-6. *See NOTE (1) for more information.) \n7=Offshore site-group samples (West Florida 2016 wave 1 \u2013 present; Alabama 2016 \u2013 present, waves by request, typically waves 3-5. **See NOTE (2) for more information).\n\n(NC only):\n1 = BB\n3 = PR\n4 = MM\n5 = CH\n\n*Note (1): the Offshore (OS) mode 7 assignments run concurrently with mode_asg=7 Mixed Boat from PR or CH in 2015, waves 3-6.  \nOS, PR, CH site groups are all exclusive - a site or site-cluster is assigned to only one of the three sub-frame groups for sample selection. \nWhatever boat mode is present at site could be interviewed (PR, CH, or OS).\n**Note (2): In 2016, all sites are assigned to an exclusive mode-site-group: SH, CH, PR, OS such that any site would only be clustered and sampled from one sub-frame list.  \nThis stratification is the same as that used for PR and CH in Mixed Boat sampling from the two exclusive site-groups, but now also keeps SH in an exclusive group. \nWhatever mode is present at site could be interviewed (PR, CH, OS, or SH).\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "new_list": {"name": "new_list", "description": "Is the vessel on/in either VTR or FHS Vessel Directory?\n    1 = Yes\n    2 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "on_list": {"name": "on_list", "description": " For-hire boat on FHS Sample Frame for wave (1 = Yes, 2 = No)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prt_code": {"name": "prt_code", "description": "ID_Code of first member of fishing party", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "celltype": {"name": "celltype", "description": "Type of cell.  Can be used along with add_hrs to identify incomplete trips.\n    1 = Only complete trips \n    2 = Mixed trips          \n    3 = Only incomplete trips\n    4 = Trips of unknown nature\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fshinsp_a": {"name": "fshinsp_a", "description": "Number of fish available for inspection at time of interview", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_fish_a": {"name": "num_fish_a", "description": "Number of fish landed that were NOT available for interviewer inspection.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "fl_reg": {"name": "fl_reg", "description": "Florida regions with included counties:\n    1 = BAY, DIXIE, ESCAMBIA, FRANKLIN, GULF, JEFFERSON, OKALOOSA, SANTA ROSA, TAYLOR, WAKULLA, WALTON\n    2 = CHARLOTTE, CITRUS, COLLIER, HERNANDO, HILLSBOROUGH, LEE, LEVY, MANATEE, PASCO, PINELLAS, SARASOTA\n    3 = MONROE\n    4 = BROWARD, DADE, INDIAN RIVER, MARTIN, PALM BEACH ST. LUCIE\n    5 = BREVARD, CLAY, DUVAL, FLAGLER, NASSAU, ST. JOHNS, VOLUSIA\n    8 = N/A\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "county": {"name": "county", "description": "Name of county of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "add_ph": {"name": "add_ph", "description": "Phone # & Name provided for verification (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date1": {"name": "date1", "description": "Date file was created", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim1": {"name": "prim1", "description": "First target species (see species codes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim2": {"name": "prim2", "description": "Second target species (see species codes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "dist": {"name": "dist", "description": "Distance from shore \n   1 = <= 3 miles (all but WFL) \n   2 = > 3 miles (all but in WFL) \n   3 = <= 10 miles (WFL only) \n   4 = > 10 miles (WFL only) \n   8 = not applicable\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "zip": {"name": "zip", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "time": {"name": "time", "description": "Time of intercept, 0 - 2359", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "gear": {"name": "gear", "description": "1 = hook & line \n2 = dip net, A-frame net \n3 = cast net \n4 = Gill net \n5 = Seine \n6 = Trawl \n7 = Trap \n8 = Spear \n9 = Hand \n10 = Other \n11= YoYo (Puerto Rico only) \n98 = Unknown \n99 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "pvt_res": {"name": "pvt_res", "description": "Live in private residence \n    1 = Yes \n    2 = Institutional \n    8 = don't know \n    9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "sep_fish": {"name": "sep_fish", "description": "Can group catch be separated?\n    1 = Yes \n    2 = No \n    8 = all caught by fisherman or no available catch on this form \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "age": {"name": "age", "description": "Angler age, 99=Refused", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "f_by_p": {"name": "f_by_p", "description": "All fish caught by individual \n    1 = Yes \n    2 = other contributors \n    8 = no available catch on this form\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int": {"name": "wp_int", "description": "Survey design sampling weight for TRIP and CATCH datasets; wp_int should only be used to weight records in TRIP and CATCH datasets.  \nShould be specified in any survey procedure, using the TRIP or CATCH datasets, for appropriate point estimate calculation and variance estimations.\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "var_id": {"name": "var_id", "description": "Identifies cell for variance estimation, equal to STRAT_ID except in cases of small sample size; \nshould be specified in any survey procedure for appropriate variance estimation\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "arx_method": {"name": "arx_method", "description": "Grouping of AREA_X values in annual level estimation used to address small sample size issue in specific ST,MODE_FX,YEAR combinations: \narea_x = estimation by standard AREA_X values (1, 2, 3, 4, 5);\narea_x2 = estimation for combined state areas (1,3,5) separate from federal (2,4);\narea_x3 = estimation for inland (5) separate from combined ocean areas (1,2,3,4);\nall = estimation from all areas combined\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "alt_flag": {"name": "alt_flag", "description": "(0 .) = Sample weights produced from standard 2-month wave level estimation;\n1 = Sample weights produced from annual level estimation used to address small sample size issue in the specific ST,MODE_FX,YEAR combination;\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "leader": {"name": "leader", "description": "ID_CODE of group catch leader", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "boat_hrs": {"name": "boat_hrs", "description": "Dock-to-dock hours of fishing trip (Boat modes only) (to nearest 1/2 hour), 99.9 = Don\u2019t know or refused ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "first": {"name": "first", "description": "First person in party to be interviewed  \n    1=Yes   \n    2=No \n    8=not applicable \n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "id_code_1": {"name": "id_code_1", "description": "Assignment number (1 digit), interviewer code (4 digit), date (YYYYMMDD), Interview number (3 digit)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ6": {"name": "num_typ6", "description": "Type 6 record present? (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "party": {"name": "party", "description": "Number of anglers in fishing party (Boat modes only)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "year_1": {"name": "year_1", "description": "Year (4-digit) ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "add_ph_1": {"name": "add_ph_1", "description": "Phone # & Name provided for verification (0 = No, 1 = Yes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_nc": {"name": "area_nc", "description": "Alpha/numeric codes for water bodies in North Carolina \n    1 = Ocean \n    6 = Alligator River \n    7 = Bay River \n    8 = Cape Fear River \n    A = Chowan River \n    B = Lockwood Folly River \n    C = Neuse River \n    D = New River \n    E = Newport River \n    F = North River (Carteret) \n    G = North River (Currituck) \n    H = Pasquotank River \n    J = PerQuimans River \n    K = Roanoke River \n    L = Shallotte River \n    M = Tar-Pamlico River \n    N = White Oak River \n    P = Albemarle Sound \n    Q = Bogue Sound \n    R = Core Sound \n    S = Croatan Sound \n    T = Currituck Sound \n    U = Masonboro Sound \n    V = Pamlico Sound \n    W = Roanoke Sound \n    X = Stump Sound \n    Y = Topsail Sound \n    Z = Intracoastal Waterway\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "county_1": {"name": "county_1", "description": "Name of county of residence", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "mode2001": {"name": "mode2001", "description": "ACCSP fishing mode\n    0 = Pier\n    1 = Dock\n    2 = Jetty, breakwater, breachway\n    3 = Bridge, causeway\n    4 = Other man-made\n    5 = Beach or bank\n    6 = Head boat\n    7 = Charter boat\n    8 = Private boat\n    9 = Rental boat\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "muni_res": {"name": "muni_res", "description": "Municipality or Island of residence.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "muni_trp": {"name": "muni_trp", "description": "Municipality or Island of trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "rig": {"name": "rig", "description": "Did angler fish near a reef?\n    1 = Yes\n    2 = No\n    8 = Don't know\n    9 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tourn": {"name": "tourn", "description": "Is there/Did you tournament fishing today?\n    1 = Yes\n    2 = No\n    9 = Don't Know / Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "turtle": {"name": "turtle", "description": "Did angler see any sea turtles while fishing?\n    1 = Yes, alive\n    2 = Yes, dead\n    3 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "res": {"name": "res", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "num_typ9": {"name": "num_typ9", "description": " Number of type 9 records", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "month_1": {"name": "month_1", "description": "Month of intercept (2 digit, with leading 0) 01 - 12", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "muni_res_1": {"name": "muni_res_1", "description": "Municipality or Island of residence.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "muni_trp_1": {"name": "muni_trp_1", "description": "Municipality or Island of trip.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "distkeys": {"name": "distkeys", "description": "Distance from shore \n   1 = <= 3 miles (all but WFL) \n   2 = > 3 miles (all but in WFL) \n   3 = <= 10 miles (WFL only) \n   4 = > 10 miles (WFL only) \n   8 = not applicable, not reported\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim1_1": {"name": "prim1_1", "description": "First target species (see species codes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prim2_1": {"name": "prim2_1", "description": "Second target species (see species codes)", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "new_list_1": {"name": "new_list_1", "description": "Is the vessel on/in either VTR or FHS Vessel Directory?\n    1 = Yes\n    2 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tsn1": {"name": "tsn1", "description": "TSN of primary species sought", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tsn2": {"name": "tsn2", "description": "TSN of secondary species sought", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "compflag": {"name": "compflag", "description": "Interviewer\n    1 = Primary\n    2 = Companion\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date1_1": {"name": "date1_1", "description": "Date file was created", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "license": {"name": "license", "description": "Do you have a license to harvest saltwater fish in this state? (North Carolina only)  \n   1 = Yes \n   2 = No \n   3 = Lifetime License\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "monitor": {"name": "monitor", "description": "[If head boat ride-along:] Was this angler monitored for discard (Type 9) catch?\n    1 = Yes\n    2 = No\n    8 = Don't know\n    9 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "area_nc_1": {"name": "area_nc_1", "description": "Alpha/numeric codes for water bodies in North Carolina \n    1 = Ocean \n    6 = Alligator River \n    7 = Bay River \n    8 = Cape Fear River \n    A = Chowan River \n    B = Lockwood Folly River \n    C = Neuse River \n    D = New River \n    E = Newport River \n    F = North River (Carteret) \n    G = North River (Currituck) \n    H = Pasquotank River \n    J = PerQuimans River \n    K = Roanoke River \n    L = Shallotte River \n    M = Tar-Pamlico River \n    N = White Oak River \n    P = Albemarle Sound \n    Q = Bogue Sound \n    R = Core Sound \n    S = Croatan Sound \n    T = Currituck Sound \n    U = Masonboro Sound \n    V = Pamlico Sound \n    W = Roanoke Sound \n    X = Stump Sound \n    Y = Topsail Sound \n    Z = Intracoastal Waterway\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "age_1": {"name": "age_1", "description": "Angler age, 99=Refused", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "art_reef": {"name": "art_reef", "description": "1 = Yes\n2 = No\n88 = Don't know\n98 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reefcode": {"name": "reefcode", "description": "NC Reefs Codes for Artificial Reefs in North Carolina\n    LOCATION           REEF CODE           REEF NUMBER\n    Oregon Inlet          02                          AR130\n                                03                          AR140\n                                04                          AR145\n                                05                          AR160\n    Hatteras Inlet         06                          AR220\n                                07                          AR225\n                                08                          AR230\n    Ocracoke Inlet        09                          AR250\n                                10                          AR255\n    Drum Inlet              11                          AR275\n    Cape Lookout        12                          AR285\n                                13                          AR300\n                                14                          AR302\n                                15                          AR305\n    Beaufort Inlet        16                          AR315\n                                17                          AR320\n                                18                          AR330\n    Bogue Inlet           19                          AR340\n                                20                          AR342\n                                21                          AR345\n    New River Inlet       22                          AR355\n    New Topsail Inlet   23                          AR360\n                                24                          AR362\n                                25                          AR364\n                                26                          AR366\n                                27                          AR368\n    Masonboro Inlet    28                          AR370\n                                29                          AR372\n                                30                          AR376\n                                31                          AR378\n                                32                          AR382\n                                33                          AR386\n    Cape Fear River    34                          AR420\n                                35                          AR425\n                                36                          AR440\n                                37                          AR445\n                                38                          AR455\n                                39                          AR460\n                                40                          AR465\n    Estuarine Reefs      41                          AR191\n                                42                          AR291\n                                43                          AR292\n                                44                          AR296\n                                45                          AR298\n                                46                          AR392\n                                47                          AR396\n    Oyster Sanctuaries 48                          Wanchese\n                                49                          Deep Bay\n                                50                          West Bay\n                                51                          Hoop Pole Cr.\n    OTHER CODES    01                          NO\n                                88                          Shore\n                                98                          Unknown\n                                99                          Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Angler gender\n    1 = Male\n    2 = Female\n    9 = Missing\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tourn_1": {"name": "tourn_1", "description": "Is there/Did you tournament fishing today?\n    1 = Yes\n    2 = No\n    9 = Don't Know / Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "turtle_1": {"name": "turtle_1", "description": "Did angler see any sea turtles while fishing?\n    1 = Yes, alive\n    2 = Yes, dead\n    3 = No\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "hrs_dtd": {"name": "hrs_dtd", "description": "Number of hours spent on the boat away from the dock, to the nearest half hour, ", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tsn1_1": {"name": "tsn1_1", "description": "TSN of primary species sought", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "tsn2_1": {"name": "tsn2_1", "description": "TSN of secondary species sought", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "prt_code_1": {"name": "prt_code_1", "description": "ID_Code of first member of fishing party", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "telefon_1": {"name": "telefon_1", "description": "Does home have phone? \n   1 = Yes \n   2 = No \n   8 = don't know \n   9 = refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Sub-state georgraphic area stratum in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "strat_interval": {"name": "strat_interval", "description": "6 or 12 hour time interval in which the sampling assignment was conducted", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "gender_1": {"name": "gender_1", "description": "Angler gender\n    1 = Male\n    2 = Female\n    9 = Missing\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "art_reef_1": {"name": "art_reef_1", "description": "1 = Yes\n2 = No\n88 = Don't know\n98 = Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reefcode_1": {"name": "reefcode_1", "description": "NC Reefs Codes for Artificial Reefs in North Carolina\n    LOCATION           REEF CODE           REEF NUMBER\n    Oregon Inlet          02                          AR130\n                                03                          AR140\n                                04                          AR145\n                                05                          AR160\n    Hatteras Inlet         06                          AR220\n                                07                          AR225\n                                08                          AR230\n    Ocracoke Inlet        09                          AR250\n                                10                          AR255\n    Drum Inlet              11                          AR275\n    Cape Lookout        12                          AR285\n                                13                          AR300\n                                14                          AR302\n                                15                          AR305\n    Beaufort Inlet        16                          AR315\n                                17                          AR320\n                                18                          AR330\n    Bogue Inlet           19                          AR340\n                                20                          AR342\n                                21                          AR345\n    New River Inlet       22                          AR355\n    New Topsail Inlet   23                          AR360\n                                24                          AR362\n                                25                          AR364\n                                26                          AR366\n                                27                          AR368\n    Masonboro Inlet    28                          AR370\n                                29                          AR372\n                                30                          AR376\n                                31                          AR378\n                                32                          AR382\n                                33                          AR386\n    Cape Fear River    34                          AR420\n                                35                          AR425\n                                36                          AR440\n                                37                          AR445\n                                38                          AR455\n                                39                          AR460\n                                40                          AR465\n    Estuarine Reefs      41                          AR191\n                                42                          AR291\n                                43                          AR292\n                                44                          AR296\n                                45                          AR298\n                                46                          AR392\n                                47                          AR396\n    Oyster Sanctuaries 48                          Wanchese\n                                49                          Deep Bay\n                                50                          West Bay\n                                51                          Hoop Pole Cr.\n    OTHER CODES    01                          NO\n                                88                          Shore\n                                98                          Unknown\n                                99                          Refused\n", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "wp_int_precal": {"name": "wp_int_precal", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "reef": {"name": "reef", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "imp_rec": {"name": "imp_rec", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"noaa_dw\".\"raw\".\"trip\"", "created_at": 1722629554.9628637}}, "macros": {"macro.dbt_transforms.drop_cols_high_nulls": {"name": "drop_cols_high_nulls", "resource_type": "macro", "package_name": "dbt_transforms", "path": "macros/source_macros.sql", "original_file_path": "macros/source_macros.sql", "unique_id": "macro.dbt_transforms.drop_cols_high_nulls", "macro_sql": "{% macro drop_cols_high_nulls(relation, null_proportion=0.75) %}\n\n    {{ log(relation, info=True) }}\n    {{ log(null_proportion, info=True) }}\n\n    {% set query %}\n    with profile as (\n        \n        {{ dbt_profiler.get_profile(relation=relation) }}\n        \n    )\n\n    select column_name from profile \n    where not_null_proportion < {{ null_proportion }}\n    {% endset %}\n\n    {% set results = run_query(query) %}\n\n    {% if execute %}\n    {% set results_list = results.columns[0].values() %}\n    {% else %}\n    {% set results_list = [] %}   \n    {% endif %}\n\n    {{ return(results_list) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile", "macro.dbt.run_query"]}, "description": "A macro to drop columns that have a high null proportion", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://macros/schema.yml", "arguments": [{"name": "relation", "type": "relation (ref or source)", "description": "The name of the relation you want to filter."}, {"name": "null_proportion", "type": "float", "description": "Threshold value from 0-1 representing the allowed null proportion."}], "created_at": 1722629554.2663445, "supported_languages": null}, "macro.dbt_transforms.filter_id_code": {"name": "filter_id_code", "resource_type": "macro", "package_name": "dbt_transforms", "path": "macros/source_macros.sql", "original_file_path": "macros/source_macros.sql", "unique_id": "macro.dbt_transforms.filter_id_code", "macro_sql": "{% macro filter_id_code(relation, id_column, match_pattern, replace_pattern) %}\n\n    with unfiltered as (\n\n        select * from {{ relation }}\n    ),\n\n    filtered as (\n\n        select * from unfiltered\n        where regexp_matches({{ id_column }}, '{{ match_pattern }}')\n\n    ),\n\n    fixed as (\n\n        select * replace(regexp_replace({{ id_column }}, '{{ replace_pattern }}', '') as {{ id_column }}) from filtered\n\n    )\n\n    select * from fixed\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "A macro to filter out rows where an ID column does not match a regex pattern, then replace the values with a new regex pattern.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://macros/schema.yml", "arguments": [{"name": "relation", "type": "cte name", "description": "The name of the relation you want to filter."}, {"name": "id_column", "type": "string", "description": "The name of the column you want to filter on."}, {"name": "match_pattern", "type": "string", "description": "Regex pattern used to filter."}, {"name": "replace_pattern", "type": "string", "description": "Regex pattern to replace value."}], "created_at": 1722629554.2688832, "supported_languages": null}, "macro.dbt_transforms.merge_duplicate_column_names": {"name": "merge_duplicate_column_names", "resource_type": "macro", "package_name": "dbt_transforms", "path": "macros/source_macros.sql", "original_file_path": "macros/source_macros.sql", "unique_id": "macro.dbt_transforms.merge_duplicate_column_names", "macro_sql": "{% macro merge_duplicate_column_names(relation) %}\n\n    -- Returns a list of the columns from a relation, so you can then iterate in a for loop\n    {%- set all_column_names = dbt_utils.get_filtered_columns_in_relation(from=relation) -%}\n    {%- set duplicate_column_names = [] %}\n    {%- set original_column_names = [] %}\n\n    --{{ all_column_names }}\n\n    -- Loop through column names and append any duplicated column names to a new list\n    {% for all_column_name in all_column_names -%}\n        {%- if all_column_name[-2] == '_' and all_column_name[-1] in ['1','2','3'] -%}\n            {%- set _ = duplicate_column_names.append(all_column_name.lower()) -%}\n        {%- endif -%}\n    {%- endfor %}\n\n    --{{ duplicate_column_names }}\n\n    -- Get the original column name and append to separate list\n    {% for duplicate_column_name in duplicate_column_names %}\n        {%- set _ = original_column_names.append(duplicate_column_name[:-2]) -%}\n    {% endfor %}\n\n    --{{ original_column_names }}\n\n    -- Merge the original and duplicated column name using coalesce\n    select \n    {% for duplicate_column_name in duplicate_column_names -%}\n        coalesce({{ duplicate_column_name[:-2] }}, {{ duplicate_column_name }}) as {{ duplicate_column_name[:-2] }},\n    {% endfor -%}\n    {% for all_column_name in all_column_names -%}\n        {% if all_column_name not in original_column_names and all_column_name not in duplicate_column_names %}\n    {{ all_column_name }}\n            {%- if not loop.last -%}\n                ,\n            {%- endif -%}\n        {% endif -%}\n    {% endfor %}\n    from {{ relation }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "A macro to merge duplicate column names using coalesce function.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transforms://macros/schema.yml", "arguments": [{"name": "relation", "type": "relation (ref or source)", "description": "The name of the relation you want to merge."}], "created_at": 1722629554.2695076, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.6970131, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.6989484, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7002096, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7005794, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7020242, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7060437, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.708902, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7091887, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.713053, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where database_name='{{ relation.database }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7274573, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.72796, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7287061, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7292387, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7300355, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7322695, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.732645, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7335038, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7345657, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7352855, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.735731, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7363684, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7374666, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7376518, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.738026, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7382476, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.738727, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7390487, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7397013, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7403858, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7427034, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7439253, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7443802, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7446778, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.745108, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7463775, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7473993, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7479029, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7530289, "supported_languages": null}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.763683, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7693868, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.783173, "supported_languages": ["sql", "python"]}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7844806, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7850077, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7856274, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7863183, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7872908, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7879484, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7887523, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7896366, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7905288, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7912912, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7918427, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7948313, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.796033, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.7966447, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8000524, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8025784, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8044028, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.804926, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8054621, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8056922, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8062017, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8064907, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8073275, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8076458, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8095264, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8105328, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8109443, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.812081, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8135033, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8148515, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8153415, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.816113, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.816636, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8168638, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8174427, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.817737, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8184955, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.818785, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8196826, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8200417, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8209028, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8213236, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8220136, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8227518, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8230634, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.823576, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.823923, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.825256, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8256104, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.826087, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8266513, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.826932, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8289876, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8293762, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8297274, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8300505, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8305385, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8309844, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8314307, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.831814, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8321476, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8324685, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8328001, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8331077, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.83344, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.833743, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8343878, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8346791, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8353598, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8357074, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8368943, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8380404, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8386586, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8401203, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8413053, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8416708, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.842432, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8427472, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8434367, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8438, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.844558, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8450768, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8455765, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.845841, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8472552, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.849713, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.851979, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8521872, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8530715, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8539603, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8573365, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8577096, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.858235, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8590534, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.864186, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.87109, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8721278, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8731673, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8737764, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8751166, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.875628, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8759396, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8770146, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8774388, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8777406, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8784554, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8789318, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.882985, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8833585, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.884033, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8844934, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8849275, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8853033, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.887916, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8887296, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8892121, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8899887, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8904624, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8917005, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8922226, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8938968, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8968287, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8970814, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8974926, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8977306, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8986998, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.89911, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8993683, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.8998444, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9002435, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9007194, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9011188, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9015927, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9030035, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9033968, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9039233, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9044456, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9068656, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9082913, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9086568, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.909079, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9094512, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9100375, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.911054, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.912554, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9128437, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9131746, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9140224, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9144077, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.91469, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9150596, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.915329, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.920321, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9211333, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9215822, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9221427, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9225285, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9228606, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.923233, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9237494, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9241765, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9248116, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9251993, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9255378, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9269311, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.927265, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9277346, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.928101, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9291787, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.929517, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.929816, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9300363, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.930383, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9305475, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9308908, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9312313, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9319718, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9323745, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9327202, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9331086, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9337504, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.934418, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9357374, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9365993, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9369907, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9374144, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9379497, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9388757, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9394364, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9401174, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9407256, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9420211, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.942942, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9433756, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9439695, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9453042, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9478955, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.948729, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9491732, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9500911, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9510548, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9528587, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9531193, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9542685, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.95462, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9549077, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9586947, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.959588, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9603202, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9608724, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9610982, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9616718, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9619796, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.962521, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.962823, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9643407, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.964724, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.965627, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9671173, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9681365, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9688122, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9691908, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9697604, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9700284, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.97063, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9709384, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.971476, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9717765, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9723113, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9726083, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.973765, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9741616, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9747345, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9750574, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9756763, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.976117, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9766407, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9768622, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.977394, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9777477, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9794564, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.97977, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9821396, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.982553, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.983019, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.983846, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9841878, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9845572, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9854493, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9861863, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9868255, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9874673, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.989856, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9902825, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.990593, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9909036, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9911985, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629551.9994607, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0014381, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.002203, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0032573, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0036623, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0039468, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0042384, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.004498, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0048418, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0050893, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0061033, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0064888, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0093057, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0156543, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0165539, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0173812, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0229552, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0237222, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.024512, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0303648, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0388274, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0396848, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0402145, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0438778, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0453424, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.047771, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0587664, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0614493, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0820491, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0889096, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0895662, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.091762, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0923584, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0937386, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0953648, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0958629, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0962565, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.096865, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0972548, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0978663, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0982585, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0988982, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0994303, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.0997577, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1003458, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1031685, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1043475, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1531324, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1540546, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.156563, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1689022, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1730294, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1770253, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1800637, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1916852, "supported_languages": ["sql"]}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1992612, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.1998441, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.200109, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.200734, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.201048, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2075863, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2082045, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2085593, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.208759, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2090685, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2093313, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2097616, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2116973, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.212116, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2126613, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2135732, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2252173, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2317421, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2321136, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.232603, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2340984, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2344406, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.234815, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2378273, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2406702, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2415342, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.242128, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2449892, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2453215, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2470427, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2480311, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.24929, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2503233, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.250483, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2514644, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2520018, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.252605, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2531774, "supported_languages": null}, "macro.dbt_profiler.get_relation": {"name": "get_relation", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.get_relation", "macro_sql": "{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2564325, "supported_languages": null}, "macro.dbt_profiler.assert_relation_exists": {"name": "assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.assert_relation_exists", "macro_sql": "\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__assert_relation_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2570379, "supported_languages": null}, "macro.dbt_profiler.default__assert_relation_exists": {"name": "default__assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.default__assert_relation_exists", "macro_sql": "{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2573965, "supported_languages": null}, "macro.dbt_profiler.sqlserver__assert_relation_exists": {"name": "sqlserver__assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.sqlserver__assert_relation_exists", "macro_sql": "{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2577353, "supported_languages": null}, "macro.dbt_profiler.measure_row_count": {"name": "measure_row_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_row_count", "macro_sql": "\n\n{%- macro measure_row_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_row_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2625241, "supported_languages": null}, "macro.dbt_profiler.default__measure_row_count": {"name": "default__measure_row_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_row_count", "macro_sql": "{%- macro default__measure_row_count(column_name, data_type) -%}\ncast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2629414, "supported_languages": null}, "macro.dbt_profiler.measure_not_null_proportion": {"name": "measure_not_null_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_not_null_proportion", "macro_sql": "\n\n{%- macro measure_not_null_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_not_null_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2640717, "supported_languages": null}, "macro.dbt_profiler.default__measure_not_null_proportion": {"name": "default__measure_not_null_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_not_null_proportion", "macro_sql": "{%- macro default__measure_not_null_proportion(column_name, data_type) -%}\nsum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.265009, "supported_languages": null}, "macro.dbt_profiler.measure_distinct_proportion": {"name": "measure_distinct_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_distinct_proportion", "macro_sql": "\n\n{%- macro measure_distinct_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_distinct_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2659938, "supported_languages": null}, "macro.dbt_profiler.default__measure_distinct_proportion": {"name": "default__measure_distinct_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_distinct_proportion", "macro_sql": "{%- macro default__measure_distinct_proportion(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2672348, "supported_languages": null}, "macro.dbt_profiler.measure_distinct_count": {"name": "measure_distinct_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_distinct_count", "macro_sql": "\n\n{%- macro measure_distinct_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_distinct_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.268187, "supported_languages": null}, "macro.dbt_profiler.default__measure_distinct_count": {"name": "default__measure_distinct_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_distinct_count", "macro_sql": "{%- macro default__measure_distinct_count(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2688224, "supported_languages": null}, "macro.dbt_profiler.measure_is_unique": {"name": "measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_is_unique", "macro_sql": "\n\n{%- macro measure_is_unique(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_is_unique\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_is_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.269522, "supported_languages": null}, "macro.dbt_profiler.default__measure_is_unique": {"name": "default__measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_is_unique", "macro_sql": "{%- macro default__measure_is_unique(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) = count(*)\n{%- else -%}\n    null\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2700703, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_is_unique": {"name": "sqlserver__measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_is_unique", "macro_sql": "{%- macro sqlserver__measure_is_unique(column_name, data_type) -%}\ncase when count(distinct {{ adapter.quote(column_name) }}) = count(*) then 1 else 0 end\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2703915, "supported_languages": null}, "macro.dbt_profiler.measure_min": {"name": "measure_min", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_min", "macro_sql": "\n\n{%- macro measure_min(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_min\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_min"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.270847, "supported_languages": null}, "macro.dbt_profiler.default__measure_min": {"name": "default__measure_min", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_min", "macro_sql": "{%- macro default__measure_min(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2717068, "supported_languages": null}, "macro.dbt_profiler.measure_max": {"name": "measure_max", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_max", "macro_sql": "\n\n{%- macro measure_max(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_max\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_max"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2722068, "supported_languages": null}, "macro.dbt_profiler.default__measure_max": {"name": "default__measure_max", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_max", "macro_sql": "{%- macro default__measure_max(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2730694, "supported_languages": null}, "macro.dbt_profiler.measure_avg": {"name": "measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_avg", "macro_sql": "\n\n{%- macro measure_avg(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_avg\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_avg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2735224, "supported_languages": null}, "macro.dbt_profiler.default__measure_avg": {"name": "default__measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_avg", "macro_sql": "{%- macro default__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }})\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1 else 0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.is_logical_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.274436, "supported_languages": null}, "macro.dbt_profiler.redshift__measure_avg": {"name": "redshift__measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.redshift__measure_avg", "macro_sql": "{%- macro redshift__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }}::float)\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1.0 else 0.0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.is_logical_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2753086, "supported_languages": null}, "macro.dbt_profiler.measure_median": {"name": "measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_median", "macro_sql": "\n\n{%- macro measure_median(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_median\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_median"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2757502, "supported_languages": null}, "macro.dbt_profiler.default__measure_median": {"name": "default__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_median", "macro_sql": "{%- macro default__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    median({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.276448, "supported_languages": null}, "macro.dbt_profiler.bigquery__measure_median": {"name": "bigquery__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.bigquery__measure_median", "macro_sql": "{%- macro bigquery__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    APPROX_QUANTILES({{ adapter.quote(column_name) }}, 100)[OFFSET(50)]\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2770994, "supported_languages": null}, "macro.dbt_profiler.postgres__measure_median": {"name": "postgres__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.postgres__measure_median", "macro_sql": "{%- macro postgres__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont(0.5) within group (order by {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2777493, "supported_languages": null}, "macro.dbt_profiler.sql_server__measure_median": {"name": "sql_server__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sql_server__measure_median", "macro_sql": "{%- macro sql_server__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont({{ adapter.quote(column_name) }}, 0.5) over ()\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2786138, "supported_languages": null}, "macro.dbt_profiler.measure_std_dev_population": {"name": "measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_std_dev_population", "macro_sql": "\n\n{%- macro measure_std_dev_population(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_population\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_std_dev_population"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.279082, "supported_languages": null}, "macro.dbt_profiler.default__measure_std_dev_population": {"name": "default__measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_std_dev_population", "macro_sql": "{%- macro default__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_pop({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2797737, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_std_dev_population": {"name": "sqlserver__measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_population", "macro_sql": "{%- macro sqlserver__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdevp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.280373, "supported_languages": null}, "macro.dbt_profiler.measure_std_dev_sample": {"name": "measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_std_dev_sample", "macro_sql": "\n\n{%- macro measure_std_dev_sample(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_sample\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_std_dev_sample"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2808187, "supported_languages": null}, "macro.dbt_profiler.default__measure_std_dev_sample": {"name": "default__measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_std_dev_sample", "macro_sql": "{%- macro default__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_samp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2814622, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_std_dev_sample": {"name": "sqlserver__measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_sample", "macro_sql": "{%- macro sqlserver__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdev({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2820137, "supported_languages": null}, "macro.dbt_profiler.print_profile_docs": {"name": "print_profile_docs", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile_docs.sql", "original_file_path": "macros/print_profile_docs.sql", "unique_id": "macro.dbt_profiler.print_profile_docs", "macro_sql": "{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{% if execute %}\n\n    {%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n    \n    {% if docs_name is none %}\n        {% set docs_name = 'dbt_profiler__' + relation_name %}\n    {% endif %}\n    \n    {%- set startdocs = '{% docs ' ~ docs_name ~ '  %}' -%}\n    {%- set enddocs = '{% enddocs %}' -%}\n    \n    {# Check if macro is called in dbt Cloud? #}\n    {%- if flags.WHICH == 'rpc' -%}\n        {%- set is_dbt_cloud = true -%}\n    {%- else -%}\n        {%- set is_dbt_cloud = false -%}\n    {%- endif -%}\n    \n    {% if not is_dbt_cloud %}\n    \n        {{ print(startdocs) }}\n        {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n        {{ print(enddocs) }}\n    \n    {% else %}\n    \n        {%- set profile_docs=[] -%}\n        {% do profile_docs.append(startdocs) -%}\n        {% do profile_docs.append('') %}\n    \n        {# Get header from column names #}\n        {%- set headers = results.column_names -%}\n        {%- set header = [] -%}\n        {%- set horizontal_line = [] -%}\n    \n        {% for i in range(0,headers|length) %}\n            {% do header.append(headers[i]) %}\n            {% do horizontal_line.append('---') %}\n        {% endfor %}\n        {% do profile_docs.append('| ' ~ header|join(' | ') ~ ' |') %}\n        {% do profile_docs.append('| ' ~ horizontal_line|join(' | ') ~ ' |') %}\n    \n        {# Get row values #}\n        {% for row in results.rows %}\n            {%- set list_row = [''] -%}\n            {% for val in row.values() %}\n                {% do list_row.append(val) %}\n            {% endfor %}\n            {% do profile_docs.append(list_row|join(' | ') ~ ' |') %}\n        {% endfor %}\n        {% do profile_docs.append('') %}\n        {% do profile_docs.append(enddocs) %}\n    \n        {# Join profile docs #}\n        {%- set joined = profile_docs | join ('\\n') -%}\n        {{ log(joined, info=True) }}\n        {% do return(joined) %}\n    \n    {% endif %}\n    \n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.2890358, "supported_languages": null}, "macro.dbt_profiler.get_profile": {"name": "get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.get_profile", "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause, group_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.default__get_profile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3236434, "supported_languages": null}, "macro.dbt_profiler.default__get_profile": {"name": "default__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.default__get_profile", "macro_sql": "{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select\n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3340247, "supported_languages": null}, "macro.dbt_profiler.databricks__get_profile": {"name": "databricks__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.databricks__get_profile", "macro_sql": "{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.statement", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3449159, "supported_languages": null}, "macro.dbt_profiler.sqlserver__get_profile": {"name": "sqlserver__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.sqlserver__get_profile", "macro_sql": "{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3548446, "supported_languages": null}, "macro.dbt_profiler.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3568938, "supported_languages": null}, "macro.dbt_profiler.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__type_string", "macro_sql": "{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3570757, "supported_languages": null}, "macro.dbt_profiler.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.357243, "supported_languages": null}, "macro.dbt_profiler.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.databricks__type_string", "macro_sql": "{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3574085, "supported_languages": null}, "macro.dbt_profiler.is_numeric_dtype": {"name": "is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_numeric_dtype", "macro_sql": "\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_numeric_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3579013, "supported_languages": null}, "macro.dbt_profiler.default__is_numeric_dtype": {"name": "default__is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_numeric_dtype", "macro_sql": "{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype or \"bigint\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3586495, "supported_languages": null}, "macro.dbt_profiler.sqlserver__is_numeric_dtype": {"name": "sqlserver__is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.sqlserver__is_numeric_dtype", "macro_sql": "{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3593779, "supported_languages": null}, "macro.dbt_profiler.is_logical_dtype": {"name": "is_logical_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_logical_dtype", "macro_sql": "\n\n{%- macro is_logical_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_logical_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_logical_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3597913, "supported_languages": null}, "macro.dbt_profiler.default__is_logical_dtype": {"name": "default__is_logical_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_logical_dtype", "macro_sql": "{%- macro default__is_logical_dtype(dtype) -%}\n  {% set is_bool = dtype.startswith(\"bool\") %}\n  {% do return(is_bool) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3602054, "supported_languages": null}, "macro.dbt_profiler.is_date_or_time_dtype": {"name": "is_date_or_time_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_date_or_time_dtype", "macro_sql": "\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_date_or_time_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3605995, "supported_languages": null}, "macro.dbt_profiler.default__is_date_or_time_dtype": {"name": "default__is_date_or_time_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_date_or_time_dtype", "macro_sql": "{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.361094, "supported_languages": null}, "macro.dbt_profiler.is_struct_dtype": {"name": "is_struct_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_struct_dtype", "macro_sql": "\n\n{%- macro is_struct_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_struct_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_struct_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3614852, "supported_languages": null}, "macro.dbt_profiler.default__is_struct_dtype": {"name": "default__is_struct_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_struct_dtype", "macro_sql": "{%- macro default__is_struct_dtype(dtype) -%}\n  {% do return((dtype | lower).startswith('struct')) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.361841, "supported_languages": null}, "macro.dbt_profiler.information_schema": {"name": "information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.information_schema", "macro_sql": "\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3622317, "supported_languages": null}, "macro.dbt_profiler.default__information_schema": {"name": "default__information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__information_schema", "macro_sql": "{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3624787, "supported_languages": null}, "macro.dbt_profiler.bigquery__information_schema": {"name": "bigquery__information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.bigquery__information_schema", "macro_sql": "{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3628805, "supported_languages": null}, "macro.dbt_profiler.select_from_information_schema_columns": {"name": "select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.select_from_information_schema_columns", "macro_sql": "\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__select_from_information_schema_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3633122, "supported_languages": null}, "macro.dbt_profiler.default__select_from_information_schema_columns": {"name": "default__select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__select_from_information_schema_columns", "macro_sql": "{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3637414, "supported_languages": null}, "macro.dbt_profiler.redshift__select_from_information_schema_columns": {"name": "redshift__select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.redshift__select_from_information_schema_columns", "macro_sql": "{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3641257, "supported_languages": null}, "macro.dbt_profiler.print_profile": {"name": "print_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile.sql", "original_file_path": "macros/print_profile.sql", "unique_id": "macro.dbt_profiler.print_profile", "macro_sql": "{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3657563, "supported_languages": null}, "macro.dbt_profiler.get_profile_table": {"name": "get_profile_table", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile_table.sql", "original_file_path": "macros/get_profile_table.sql", "unique_id": "macro.dbt_profiler.get_profile_table", "macro_sql": "{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_relation", "macro.dbt_profiler.get_profile", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3676512, "supported_languages": null}, "macro.dbt_profiler.print_profile_schema": {"name": "print_profile_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile_schema.sql", "original_file_path": "macros/print_profile_schema.sql", "unique_id": "macro.dbt_profiler.print_profile_schema", "macro_sql": "{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3721373, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3767045, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3778124, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3829913, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3839118, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3850536, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3888035, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3910282, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3915856, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.394332, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.396504, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.3992524, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4095984, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4218395, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4229195, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.425574, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4267352, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4277112, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4309669, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4313898, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4318743, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4322462, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4327145, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.433383, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4341311, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.435091, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.436467, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4371552, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4382575, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4388366, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4394164, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4403782, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4409375, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4413126, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4429944, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.444265, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.444805, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4451597, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4457166, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.446034, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4476762, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4499974, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.450582, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4513261, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4521244, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4530647, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.454341, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4563875, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4583006, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4610872, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4645677, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.465389, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4659698, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.467727, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4687984, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4693182, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4704976, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.471815, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4730759, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.473567, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.474341, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4753516, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.476142, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4774323, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4777358, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.478753, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4803247, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.482608, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4858062, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4877443, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4883292, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4897165, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.49145, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4935205, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4967382, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4976442, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.4992425, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.500744, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5012257, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.50165, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5020614, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5024254, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.502804, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5037155, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.505308, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5060616, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5071998, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5087428, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5106137, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5116389, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.513383, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5142612, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5148628, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.515885, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.517124, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5180216, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.518623, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5218177, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5226026, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5241241, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5252166, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5305123, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5387602, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5404775, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5425532, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.548544, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5520155, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5537302, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5555167, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5567594, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5587108, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5597534, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5607555, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5618086, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5626407, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.56362, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5642977, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5655093, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5662441, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5679753, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5704882, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.572144, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.574074, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5749323, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.575705, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5776904, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.58071, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5819986, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5836895, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5846999, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5854976, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5868337, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.58873, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5900533, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5914562, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5926166, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722629552.5936322, "supported_languages": null}}, "docs": {"doc.dbt_transforms.dbt_profiler_results__analytics_base_noaa__sizes": {"name": "dbt_profiler_results__analytics_base_noaa__sizes", "resource_type": "doc", "package_name": "dbt_transforms", "path": "dbt_profiler/analytics/base_noaa__sizes.md", "original_file_path": "docs/dbt_profiler/analytics/base_noaa__sizes.md", "unique_id": "doc.dbt_transforms.dbt_profiler_results__analytics_base_noaa__sizes", "block_contents": "| column_name    | data_type | row_count |  not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | -------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| year           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000584181982197393750 |             43 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000258126922366290240 |             19 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 7,360,720 | 1.000000000000000000 | 0.33438073992761580000000 |        2461283 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 7,360,720 | 0.885231336064950200 | 0.00000163027529915551730 |             12 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 7,360,720 | 0.999908568726972300 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| sp_code        | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011221728309187145000 |            826 |     False |     |     |     |        |                    |                | ... |\n| lngth          | varchar   | 7,360,720 | 0.803923121651142800 | 0.00412962318903585500000 |          30397 |     False |     |     |     |        |                    |                | ... |\n| wgt            | varchar   | 7,360,720 | 0.797549560369094300 | 0.04404392505081025000000 |         324195 |     False |     |     |     |        |                    |                | ... |\n| lngth_imp      | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| wgt_imp        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.04937071373452597000000 |         363404 |     False |     |     |     |        |                    |                | ... |\n| common         | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011194557054201220000 |            824 |     False |     |     |     |        |                    |                | ... |\n| wp_size        | varchar   | 7,360,720 | 0.999651936223630200 | 0.11588879892184460000000 |         853025 |     False |     |     |     |        |                    |                | ... |\n| l_in_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00001847645339042919800 |            136 |     False |     |     |     |        |                    |                | ... |\n| l_cm_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00004211544522818420000 |            310 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000054342509971850580 |              4 |     False |     |     |     |        |                    |                | ... |\n| wgt_unadj      | varchar   | 7,360,720 | 0.393738248432218600 | 0.00767968350922192400000 |          56528 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 7,360,720 | 0.025260164766490234 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |"}, "doc.dbt_transforms.dbt_profiler_results__analytics_base_noaa__catches": {"name": "dbt_profiler_results__analytics_base_noaa__catches", "resource_type": "doc", "package_name": "dbt_transforms", "path": "dbt_profiler/analytics/base_noaa__catches.md", "original_file_path": "docs/dbt_profiler/analytics/base_noaa__catches.md", "unique_id": "doc.dbt_transforms.dbt_profiler_results__analytics_base_noaa__catches", "block_contents": "| column_name     | data_type | row_count |     not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| --------------- | --------- | --------- | ----------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| common          | varchar   | 5,828,705 | 0.763023347381622500000 | 0.00015835421418651313000 |            923 |     False |     |     |     |        |                    |                | ... |\n| strat_id        | varchar   | 5,828,705 | 1.000000000000000000000 | 0.01001920666769033600000 |          58399 |     False |     |     |     |        |                    |                | ... |\n| psu_id          | varchar   | 5,828,705 | 1.000000000000000000000 | 0.06868523968874733000000 |         400346 |     False |     |     |     |        |                    |                | ... |\n| year            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000754884661344157950 |             44 |     False |     |     |     |        |                    |                | ... |\n| st              | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000343129391520071770 |             20 |     False |     |     |     |        |                    |                | ... |\n| mode_fx         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| area_x          | varchar   | 5,828,705 | 0.999999142176521200000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| id_code         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.62853498332820070000000 |        3663545 |     False |     |     |     |        |                    |                | ... |\n| sub_reg         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000120095287032025120 |              7 |     False |     |     |     |        |                    |                | ... |\n| wave            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| kod             | varchar   | 5,828,705 | 0.999968432095980200000 | 0.00000051469408728010770 |              3 |     False |     |     |     |        |                    |                | ... |\n| sp_code         | varchar   | 5,828,705 | 0.763023862075709800000 | 0.00015921203766531330000 |            928 |     False |     |     |     |        |                    |                | ... |\n| claim           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.04044895049586486000000 |         235765 |     False |     |     |     |        |                    |                | ... |\n| release         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00215553883752909100000 |          12564 |     False |     |     |     |        |                    |                | ... |\n| harvest         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00054317382677627360000 |           3166 |     False |     |     |     |        |                    |                | ... |\n| claim_unadj     | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00005918982003721238000 |            345 |     False |     |     |     |        |                    |                | ... |\n| harvest_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00004340586802728908000 |            253 |     False |     |     |     |        |                    |                | ... |\n| release_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00003259729219440682000 |            190 |     False |     |     |     |        |                    |                | ... |\n| tot_len_a       | varchar   | 5,828,705 | 0.999999828435304200000 | 0.06841725563397015000000 |         398784 |     False |     |     |     |        |                    |                | ... |\n| wgt_a           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.07045218449037993000000 |         410645 |     False |     |     |     |        |                    |                | ... |\n| tot_len_b1      | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00888996784019778000000 |          51817 |     False |     |     |     |        |                    |                | ... |\n| wgt_b1          | varchar   | 5,828,705 | 0.999999828435304200000 | 0.01413624467184391700000 |          82396 |     False |     |     |     |        |                    |                | ... |\n| region          | varchar   | 5,828,705 | 0.305074969482929700000 | 0.00000154408226184032300 |              9 |     False |     |     |     |        |                    |                | ... |\n| month           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00000223034104488046650 |             13 |     False |     |     |     |        |                    |                | ... |\n| tot_cat         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.05636054663943363000000 |         328509 |     False |     |     |     |        |                    |                | ... |\n| wgt_ab1         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.08132080796677821000000 |         473995 |     False |     |     |     |        |                    |                | ... |\n| tot_len         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.07187891650032040000000 |         418961 |     False |     |     |     |        |                    |                | ... |\n| landing         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.04195082784254821500000 |         244519 |     False |     |     |     |        |                    |                | ... |\n| var_id          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.01006964668824378600000 |          58693 |     False |     |     |     |        |                    |                | ... |\n| alt_flag        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000034312939152007176 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_interval  | varchar   | 5,828,705 | 0.007694505040141850000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| fl_reg          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| wp_catch_precal | varchar   | 5,828,705 | 0.822431054582450100000 | 0.03737571210071534000000 |         217852 |     False |     |     |     |        |                    |                | ... |\n| wp_int          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09078465971429331000000 |         529157 |     False |     |     |     |        |                    |                | ... |\n| wp_catch        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09087627526182918000000 |         529691 |     False |     |     |     |        |                    |                | ... |\n| date_published  | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| arx_method      | varchar   | 5,828,705 | 0.000277076983652457950 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| imp_rec         | varchar   | 5,828,705 | 0.017320656989845945000 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _typex          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _freqx          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal   | varchar   | 5,828,705 | 0.026497995695441784000 | 0.00310806602838881000000 |          18116 |     False |     |     |     |        |                    |                | ... |"}, "doc.dbt_transforms.dbt_profiler_results__analytics_base_noaa__trips": {"name": "dbt_profiler_results__analytics_base_noaa__trips", "resource_type": "doc", "package_name": "dbt_transforms", "path": "dbt_profiler/analytics/base_noaa__trips.md", "original_file_path": "docs/dbt_profiler/analytics/base_noaa__trips.md", "unique_id": "doc.dbt_transforms.dbt_profiler_results__analytics_base_noaa__trips", "block_contents": "| column_name    | data_type | row_count |     not_null_proportion |      distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | ----------------------- | ------------------------ | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| prim2_common   | varchar   | 3,739,116 | 0.158339297309845420000 | 0.0001278377028153178500 |            478 |     False |     |     |     |        |                    |                | ... |\n| prim1_common   | varchar   | 3,739,116 | 0.599395418596267100000 | 0.0001615355073231213000 |            604 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0159152591147212340000 |          59509 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 3,739,116 | 0.996369462728623600000 | 0.1074633683469568700000 |         401818 |     False |     |     |     |        |                    |                | ... |\n| add_hrs        | varchar   | 3,739,116 | 0.670955648340409900000 | 0.0000203256598618497000 |             76 |     False |     |     |     |        |                    |                | ... |\n| area           | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000072209581088150245 |             27 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 3,739,116 | 0.996368660399944800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| catch          | varchar   | 3,739,116 | 0.995809169867958100000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| cntrbtrs       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000109651586096820740 |             41 |     False |     |     |     |        |                    |                | ... |\n| cnty           | varchar   | 3,739,116 | 0.995829495527820000000 | 0.0000240698603627167500 |             90 |     False |     |     |     |        |                    |                | ... |\n| cnty_res       | varchar   | 3,739,116 | 0.995773599963199800000 | 0.0001305121317445085900 |            488 |     False |     |     |     |        |                    |                | ... |\n| coastal        | varchar   | 3,739,116 | 0.995013527261523800000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| ffdays2        | varchar   | 3,739,116 | 0.994734584324209200000 | 0.0000184535596114161740 |             69 |     False |     |     |     |        |                    |                | ... |\n| ffdays12       | varchar   | 3,739,116 | 0.994839689381126400000 | 0.0000962794414508670000 |            360 |     False |     |     |     |        |                    |                | ... |\n| hrsf           | varchar   | 3,739,116 | 0.994899061703354500000 | 0.0000494769351900288700 |            185 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.9839569031824634000000 |        3679129 |     False |     |     |     |        |                    |                | ... |\n| intsite        | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0007795960328591036000 |           2915 |     False |     |     |     |        |                    |                | ... |\n| mode_f         | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ2       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| num_typ3       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000339652474007225260 |            127 |     False |     |     |     |        |                    |                | ... |\n| num_typ4       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| reg_res        | varchar   | 3,739,116 | 0.990181369072262000000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000050814149654624250 |             19 |     False |     |     |     |        |                    |                | ... |\n| st_res         | varchar   | 3,739,116 | 0.995574355007975200000 | 0.0000181861167184971000 |             68 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| telefon        | varchar   | 3,739,116 | 0.742506250140407500000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| year           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000115000443955202240 |             43 |     False |     |     |     |        |                    |                | ... |\n| asg_code       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0884286553292275600000 |         330645 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0000034767576079479747 |             13 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 3,739,116 | 0.996350474283226300000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| prt_code       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.6123369801846211000000 |        2289599 |     False |     |     |     |        |                    |                | ... |\n| celltype       | varchar   | 3,739,116 | 0.626421325254418400000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| fshinsp_a      | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000794305391969652800 |            297 |     False |     |     |     |        |                    |                | ... |\n| num_fish_a     | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000861166115199421500 |            322 |     False |     |     |     |        |                    |                | ... |\n| fl_reg         | varchar   | 3,739,116 | 0.833113762718246800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| add_ph         | varchar   | 3,739,116 | 0.920073889122455700000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| county         | varchar   | 3,739,116 | 0.681102699140652500000 | 0.0001783844095770230000 |            667 |     False |     |     |     |        |                    |                | ... |\n| date1          | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0002091403422627166400 |            782 |     False |     |     |     |        |                    |                | ... |\n| dist           | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| f_by_p         | varchar   | 3,739,116 | 0.983669402072575500000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| gear           | varchar   | 3,739,116 | 0.988198012578374100000 | 0.0000042790862867052000 |             16 |     False |     |     |     |        |                    |                | ... |\n| prim1          | varchar   | 3,739,116 | 0.700596879048416800000 | 0.0001650122649310692700 |            617 |     False |     |     |     |        |                    |                | ... |\n| prim2          | varchar   | 3,739,116 | 0.359161630716993000000 | 0.0001289074743869941400 |            482 |     False |     |     |     |        |                    |                | ... |\n| pvt_res        | varchar   | 3,739,116 | 0.825190499572626200000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| rig            | varchar   | 3,739,116 | 0.162039904619166670000 | 0.0000021395431433526000 |              8 |     False |     |     |     |        |                    |                | ... |\n| sep_fish       | varchar   | 3,739,116 | 0.983034492644785600000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| time           | varchar   | 3,739,116 | 0.988584735001535100000 | 0.0004418156591023118700 |           1652 |     False |     |     |     |        |                    |                | ... |\n| age            | varchar   | 3,739,116 | 0.302461062989219930000 | 0.0000278140608635837970 |            104 |     False |     |     |     |        |                    |                | ... |\n| wp_int         | varchar   | 3,739,116 | 1.000000000000000000000 | 0.1420346413430340300000 |         531084 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 3,739,116 | 0.995916147025125800000 | 0.0157133397305673320000 |          58754 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| leader         | varchar   | 3,739,116 | 0.996365451085229800000 | 0.8424172986342227000000 |        3149896 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| first          | varchar   | 3,739,116 | 0.713186485789689400000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ6       | varchar   | 3,739,116 | 0.879159940477909800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| on_list        | varchar   | 3,739,116 | 0.235640723636281940000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| party          | varchar   | 3,739,116 | 0.700982264257113200000 | 0.0000288838324352600980 |            108 |     False |     |     |     |        |                    |                | ... |\n| zip            | varchar   | 3,739,116 | 0.908805717715096300000 | 0.0113821020797429120000 |          42559 |     False |     |     |     |        |                    |                | ... |\n| area_nc        | varchar   | 3,739,116 | 0.144625360646741100000 | 0.0000085581725734104000 |             32 |     False |     |     |     |        |                    |                | ... |\n| boat_hrs       | varchar   | 3,739,116 | 0.341199363699869140000 | 0.0000377094479015895700 |            141 |     False |     |     |     |        |                    |                | ... |\n| mode2001       | varchar   | 3,739,116 | 0.389019490168264370000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| muni_res       | varchar   | 3,739,116 | 0.000106442271381791840 | 0.0000173837880397398740 |             65 |     False |     |     |     |        |                    |                | ... |\n| num_typ9       | varchar   | 3,739,116 | 0.186856465538913470000 | 0.0000251396319343930500 |             94 |     False |     |     |     |        |                    |                | ... |\n| new_list       | varchar   | 3,739,116 | 0.143402344297422190000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| mode_asg       | varchar   | 3,739,116 | 0.377604760055585350000 | 0.0000018721002504335250 |              7 |     False |     |     |     |        |                    |                | ... |\n| tsn1           | varchar   | 3,739,116 | 0.317040979739596200000 | 0.0001206167447065028200 |            451 |     False |     |     |     |        |                    |                | ... |\n| tsn2           | varchar   | 3,739,116 | 0.129391546023177680000 | 0.0000976166559154623700 |            365 |     False |     |     |     |        |                    |                | ... |\n| distkeys       | varchar   | 3,739,116 | 0.173429495099911320000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| license        | varchar   | 3,739,116 | 0.099345406775291270000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| monitor        | varchar   | 3,739,116 | 0.116959998031620310000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| compflag       | varchar   | 3,739,116 | 0.012953329075642478000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| art_reef       | varchar   | 3,739,116 | 0.174222463277416360000 | 0.0000125698159671965250 |             47 |     False |     |     |     |        |                    |                | ... |\n| gender         | varchar   | 3,739,116 | 0.211273199333746280000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| tourn          | varchar   | 3,739,116 | 0.103942482661677260000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| turtle         | varchar   | 3,739,116 | 0.116515775386481720000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| date           | varchar   | 3,739,116 | 0.042832049072561540000 | 0.0001781169666841039400 |            666 |     False |     |     |     |        |                    |                | ... |\n| region         | varchar   | 3,739,116 | 0.279464450955787400000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| strat_interval | varchar   | 3,739,116 | 0.279235252396555800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| reefcode       | varchar   | 3,739,116 | 0.017981255462521090000 | 0.0000609769795855491000 |            228 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal  | varchar   | 3,739,116 | 0.024187267792708224000 | 0.0048629141219475410000 |          18183 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 3,739,116 | 0.016037480516785250000 | 0.0000002674428929190750 |              1 |     False |     |     |     |        |                    |                | ... |\n| muni_trp       | varchar   | 3,739,116 | 0.000011232601502601149 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| arx_method     | varchar   | 3,739,116 | 0.000223582258480346700 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| reef_code      | varchar   | 3,739,116 | 0.000052418807012138700 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| reef           | varchar   | 3,739,116 | 0.014351787962716321000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |"}, "doc.dbt_transforms.dbt_profiler_results__raw_size": {"name": "dbt_profiler_results__raw_size", "resource_type": "doc", "package_name": "dbt_transforms", "path": "dbt_profiler/raw/size.md", "original_file_path": "docs/dbt_profiler/raw/size.md", "unique_id": "doc.dbt_transforms.dbt_profiler_results__raw_size", "block_contents": "| column_name    | data_type | row_count |  not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | -------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| year           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000584181982197393750 |             43 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000258126922366290240 |             19 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000067928137464813220 |              5 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 7,360,720 | 1.000000000000000000 | 0.33438073992761580000000 |        2461283 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000081513764957775870 |              6 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 7,360,720 | 0.885231336064950200 | 0.00000163027529915551730 |             12 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 7,360,720 | 0.999908568726972300 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| sp_code        | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011221728309187145000 |            826 |     False |     |     |     |        |                    |                | ... |\n| lngth          | varchar   | 7,360,720 | 0.803923121651142800 | 0.00412962318903585500000 |          30397 |     False |     |     |     |        |                    |                | ... |\n| wgt            | varchar   | 7,360,720 | 0.797549560369094300 | 0.04404392505081025000000 |         324195 |     False |     |     |     |        |                    |                | ... |\n| lngth_imp      | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| wgt_imp        | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000027171254985925290 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.04937071373452597000000 |         363404 |     False |     |     |     |        |                    |                | ... |\n| common         | varchar   | 7,360,720 | 0.811367637948461600 | 0.00011194557054201220000 |            824 |     False |     |     |     |        |                    |                | ... |\n| wp_size        | varchar   | 7,360,720 | 0.999651936223630200 | 0.11588879892184460000000 |         853025 |     False |     |     |     |        |                    |                | ... |\n| l_in_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00001847645339042919800 |            136 |     False |     |     |     |        |                    |                | ... |\n| l_cm_bin       | varchar   | 7,360,720 | 0.803923121651142800 | 0.00004211544522818420000 |            310 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 7,360,720 | 0.999999864143725100 | 0.00770549620145855300000 |          56718 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 7,360,720 | 1.000000000000000000 | 0.00000054342509971850580 |              4 |     False |     |     |     |        |                    |                | ... |\n| wgt_unadj      | varchar   | 7,360,720 | 0.393738248432218600 | 0.00767968350922192400000 |          56528 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 7,360,720 | 0.025260164766490234 | 0.00000013585627492962645 |              1 |     False |     |     |     |        |                    |                | ... |"}, "doc.dbt_transforms.dbt_profiler_results__raw_catch": {"name": "dbt_profiler_results__raw_catch", "resource_type": "doc", "package_name": "dbt_transforms", "path": "dbt_profiler/raw/catch.md", "original_file_path": "docs/dbt_profiler/raw/catch.md", "unique_id": "doc.dbt_transforms.dbt_profiler_results__raw_catch", "block_contents": "| column_name     | data_type | row_count |     not_null_proportion |       distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| --------------- | --------- | --------- | ----------------------- | ------------------------- | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| common          | varchar   | 5,828,705 | 0.763023347381622500000 | 0.00015835421418651313000 |            923 |     False |     |     |     |        |                    |                | ... |\n| strat_id        | varchar   | 5,828,705 | 1.000000000000000000000 | 0.01001920666769033600000 |          58399 |     False |     |     |     |        |                    |                | ... |\n| psu_id          | varchar   | 5,828,705 | 1.000000000000000000000 | 0.06868523968874733000000 |         400346 |     False |     |     |     |        |                    |                | ... |\n| year            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000754884661344157950 |             44 |     False |     |     |     |        |                    |                | ... |\n| st              | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000343129391520071770 |             20 |     False |     |     |     |        |                    |                | ... |\n| mode_fx         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| area_x          | varchar   | 5,828,705 | 0.999999142176521200000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| id_code         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.62853498332820070000000 |        3663545 |     False |     |     |     |        |                    |                | ... |\n| sub_reg         | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000120095287032025120 |              7 |     False |     |     |     |        |                    |                | ... |\n| wave            | varchar   | 5,828,705 | 1.000000000000000000000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| kod             | varchar   | 5,828,705 | 0.999968432095980200000 | 0.00000051469408728010770 |              3 |     False |     |     |     |        |                    |                | ... |\n| sp_code         | varchar   | 5,828,705 | 0.763023862075709800000 | 0.00015921203766531330000 |            928 |     False |     |     |     |        |                    |                | ... |\n| claim           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.04044895049586486000000 |         235765 |     False |     |     |     |        |                    |                | ... |\n| release         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00215553883752909100000 |          12564 |     False |     |     |     |        |                    |                | ... |\n| harvest         | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00054317382677627360000 |           3166 |     False |     |     |     |        |                    |                | ... |\n| claim_unadj     | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00005918982003721238000 |            345 |     False |     |     |     |        |                    |                | ... |\n| harvest_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00004340586802728908000 |            253 |     False |     |     |     |        |                    |                | ... |\n| release_unadj   | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00003259729219440682000 |            190 |     False |     |     |     |        |                    |                | ... |\n| tot_len_a       | varchar   | 5,828,705 | 0.999999828435304200000 | 0.06841725563397015000000 |         398784 |     False |     |     |     |        |                    |                | ... |\n| wgt_a           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.07045218449037993000000 |         410645 |     False |     |     |     |        |                    |                | ... |\n| tot_len_b1      | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00888996784019778000000 |          51817 |     False |     |     |     |        |                    |                | ... |\n| wgt_b1          | varchar   | 5,828,705 | 0.999999828435304200000 | 0.01413624467184391700000 |          82396 |     False |     |     |     |        |                    |                | ... |\n| region          | varchar   | 5,828,705 | 0.305074969482929700000 | 0.00000154408226184032300 |              9 |     False |     |     |     |        |                    |                | ... |\n| month           | varchar   | 5,828,705 | 0.999999828435304200000 | 0.00000223034104488046650 |             13 |     False |     |     |     |        |                    |                | ... |\n| tot_cat         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.05636054663943363000000 |         328509 |     False |     |     |     |        |                    |                | ... |\n| wgt_ab1         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.08132080796677821000000 |         473995 |     False |     |     |     |        |                    |                | ... |\n| tot_len         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.07187891650032040000000 |         418961 |     False |     |     |     |        |                    |                | ... |\n| landing         | varchar   | 5,828,705 | 0.999999656870608400000 | 0.04195082784254821500000 |         244519 |     False |     |     |     |        |                    |                | ... |\n| var_id          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.01006964668824378600000 |          58693 |     False |     |     |     |        |                    |                | ... |\n| alt_flag        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000034312939152007176 |              2 |     False |     |     |     |        |                    |                | ... |\n| strat_interval  | varchar   | 5,828,705 | 0.007694505040141850000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| fl_reg          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000102938817456021540 |              6 |     False |     |     |     |        |                    |                | ... |\n| wp_catch_precal | varchar   | 5,828,705 | 0.822431054582450100000 | 0.03737571210071534000000 |         217852 |     False |     |     |     |        |                    |                | ... |\n| wp_int          | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09078465971429331000000 |         529157 |     False |     |     |     |        |                    |                | ... |\n| wp_catch        | varchar   | 5,828,705 | 0.999999656870608400000 | 0.09087627526182918000000 |         529691 |     False |     |     |     |        |                    |                | ... |\n| date_published  | varchar   | 5,828,705 | 0.999999656870608400000 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| arx_method      | varchar   | 5,828,705 | 0.000277076983652457950 | 0.00000068625878304014350 |              4 |     False |     |     |     |        |                    |                | ... |\n| imp_rec         | varchar   | 5,828,705 | 0.017320656989845945000 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _typex          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| _freqx          | varchar   | 5,828,705 | 0.000005146940872801077 | 0.00000017156469576003588 |              1 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal   | varchar   | 5,828,705 | 0.026497995695441784000 | 0.00310806602838881000000 |          18116 |     False |     |     |     |        |                    |                | ... |"}, "doc.dbt_transforms.dbt_profiler_results__raw_trip": {"name": "dbt_profiler_results__raw_trip", "resource_type": "doc", "package_name": "dbt_transforms", "path": "dbt_profiler/raw/trip.md", "original_file_path": "docs/dbt_profiler/raw/trip.md", "unique_id": "doc.dbt_transforms.dbt_profiler_results__raw_trip", "block_contents": "| column_name    | data_type | row_count |     not_null_proportion |      distinct_proportion | distinct_count | is_unique | min | max | avg | median | std_dev_population | std_dev_sample | ... |\n| -------------- | --------- | --------- | ----------------------- | ------------------------ | -------------- | --------- | --- | --- | --- | ------ | ------------------ | -------------- | --- |\n| prim2_common   | varchar   | 3,739,116 | 0.158339297309845420000 | 0.0001278377028153178500 |            478 |     False |     |     |     |        |                    |                | ... |\n| prim1_common   | varchar   | 3,739,116 | 0.599395418596267100000 | 0.0001615355073231213000 |            604 |     False |     |     |     |        |                    |                | ... |\n| strat_id       | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0159152591147212340000 |          59509 |     False |     |     |     |        |                    |                | ... |\n| psu_id         | varchar   | 3,739,116 | 0.996369462728623600000 | 0.1074633683469568700000 |         401818 |     False |     |     |     |        |                    |                | ... |\n| add_hrs        | varchar   | 3,739,116 | 0.670955648340409900000 | 0.0000203256598618497000 |             76 |     False |     |     |     |        |                    |                | ... |\n| area           | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000072209581088150245 |             27 |     False |     |     |     |        |                    |                | ... |\n| area_x         | varchar   | 3,739,116 | 0.996368660399944800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| catch          | varchar   | 3,739,116 | 0.995809169867958100000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| cntrbtrs       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000109651586096820740 |             41 |     False |     |     |     |        |                    |                | ... |\n| cnty           | varchar   | 3,739,116 | 0.995829495527820000000 | 0.0000240698603627167500 |             90 |     False |     |     |     |        |                    |                | ... |\n| cnty_res       | varchar   | 3,739,116 | 0.995773599963199800000 | 0.0001305121317445085900 |            488 |     False |     |     |     |        |                    |                | ... |\n| coastal        | varchar   | 3,739,116 | 0.995013527261523800000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| ffdays2        | varchar   | 3,739,116 | 0.994734584324209200000 | 0.0000184535596114161740 |             69 |     False |     |     |     |        |                    |                | ... |\n| ffdays12       | varchar   | 3,739,116 | 0.994839689381126400000 | 0.0000962794414508670000 |            360 |     False |     |     |     |        |                    |                | ... |\n| hrsf           | varchar   | 3,739,116 | 0.994899061703354500000 | 0.0000494769351900288700 |            185 |     False |     |     |     |        |                    |                | ... |\n| id_code        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.9839569031824634000000 |        3679129 |     False |     |     |     |        |                    |                | ... |\n| intsite        | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0007795960328591036000 |           2915 |     False |     |     |     |        |                    |                | ... |\n| mode_f         | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| mode_fx        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ2       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| num_typ3       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000339652474007225260 |            127 |     False |     |     |     |        |                    |                | ... |\n| num_typ4       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| reg_res        | varchar   | 3,739,116 | 0.990181369072262000000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| st             | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000050814149654624250 |             19 |     False |     |     |     |        |                    |                | ... |\n| st_res         | varchar   | 3,739,116 | 0.995574355007975200000 | 0.0000181861167184971000 |             68 |     False |     |     |     |        |                    |                | ... |\n| sub_reg        | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| telefon        | varchar   | 3,739,116 | 0.742506250140407500000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| wave           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| year           | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000115000443955202240 |             43 |     False |     |     |     |        |                    |                | ... |\n| asg_code       | varchar   | 3,739,116 | 0.995830030413605700000 | 0.0884286553292275600000 |         330645 |     False |     |     |     |        |                    |                | ... |\n| month          | varchar   | 3,739,116 | 0.996369462728623600000 | 0.0000034767576079479747 |             13 |     False |     |     |     |        |                    |                | ... |\n| kod            | varchar   | 3,739,116 | 0.996350474283226300000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| prt_code       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.6123369801846211000000 |        2289599 |     False |     |     |     |        |                    |                | ... |\n| celltype       | varchar   | 3,739,116 | 0.626421325254418400000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| fshinsp_a      | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000794305391969652800 |            297 |     False |     |     |     |        |                    |                | ... |\n| num_fish_a     | varchar   | 3,739,116 | 0.244830328879874270000 | 0.0000861166115199421500 |            322 |     False |     |     |     |        |                    |                | ... |\n| fl_reg         | varchar   | 3,739,116 | 0.833113762718246800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| add_ph         | varchar   | 3,739,116 | 0.920073889122455700000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| county         | varchar   | 3,739,116 | 0.681102699140652500000 | 0.0001783844095770230000 |            667 |     False |     |     |     |        |                    |                | ... |\n| date1          | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0002091403422627166400 |            782 |     False |     |     |     |        |                    |                | ... |\n| dist           | varchar   | 3,739,116 | 0.988585537330213900000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| f_by_p         | varchar   | 3,739,116 | 0.983669402072575500000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| gear           | varchar   | 3,739,116 | 0.988198012578374100000 | 0.0000042790862867052000 |             16 |     False |     |     |     |        |                    |                | ... |\n| prim1          | varchar   | 3,739,116 | 0.700596879048416800000 | 0.0001650122649310692700 |            617 |     False |     |     |     |        |                    |                | ... |\n| prim2          | varchar   | 3,739,116 | 0.359161630716993000000 | 0.0001289074743869941400 |            482 |     False |     |     |     |        |                    |                | ... |\n| pvt_res        | varchar   | 3,739,116 | 0.825190499572626200000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| rig            | varchar   | 3,739,116 | 0.162039904619166670000 | 0.0000021395431433526000 |              8 |     False |     |     |     |        |                    |                | ... |\n| sep_fish       | varchar   | 3,739,116 | 0.983034492644785600000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |\n| time           | varchar   | 3,739,116 | 0.988584735001535100000 | 0.0004418156591023118700 |           1652 |     False |     |     |     |        |                    |                | ... |\n| age            | varchar   | 3,739,116 | 0.302461062989219930000 | 0.0000278140608635837970 |            104 |     False |     |     |     |        |                    |                | ... |\n| wp_int         | varchar   | 3,739,116 | 1.000000000000000000000 | 0.1420346413430340300000 |         531084 |     False |     |     |     |        |                    |                | ... |\n| var_id         | varchar   | 3,739,116 | 0.995916147025125800000 | 0.0157133397305673320000 |          58754 |     False |     |     |     |        |                    |                | ... |\n| alt_flag       | varchar   | 3,739,116 | 0.996365451085229800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| leader         | varchar   | 3,739,116 | 0.996365451085229800000 | 0.8424172986342227000000 |        3149896 |     False |     |     |     |        |                    |                | ... |\n| date_published | varchar   | 3,739,116 | 1.000000000000000000000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| first          | varchar   | 3,739,116 | 0.713186485789689400000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| num_typ6       | varchar   | 3,739,116 | 0.879159940477909800000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| on_list        | varchar   | 3,739,116 | 0.235640723636281940000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| party          | varchar   | 3,739,116 | 0.700982264257113200000 | 0.0000288838324352600980 |            108 |     False |     |     |     |        |                    |                | ... |\n| zip            | varchar   | 3,739,116 | 0.908805717715096300000 | 0.0113821020797429120000 |          42559 |     False |     |     |     |        |                    |                | ... |\n| area_nc        | varchar   | 3,739,116 | 0.144625360646741100000 | 0.0000085581725734104000 |             32 |     False |     |     |     |        |                    |                | ... |\n| boat_hrs       | varchar   | 3,739,116 | 0.341199363699869140000 | 0.0000377094479015895700 |            141 |     False |     |     |     |        |                    |                | ... |\n| mode2001       | varchar   | 3,739,116 | 0.389019490168264370000 | 0.0000026744289291907500 |             10 |     False |     |     |     |        |                    |                | ... |\n| muni_res       | varchar   | 3,739,116 | 0.000106442271381791840 | 0.0000173837880397398740 |             65 |     False |     |     |     |        |                    |                | ... |\n| num_typ9       | varchar   | 3,739,116 | 0.186856465538913470000 | 0.0000251396319343930500 |             94 |     False |     |     |     |        |                    |                | ... |\n| new_list       | varchar   | 3,739,116 | 0.143402344297422190000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| mode_asg       | varchar   | 3,739,116 | 0.377604760055585350000 | 0.0000018721002504335250 |              7 |     False |     |     |     |        |                    |                | ... |\n| tsn1           | varchar   | 3,739,116 | 0.317040979739596200000 | 0.0001206167447065028200 |            451 |     False |     |     |     |        |                    |                | ... |\n| tsn2           | varchar   | 3,739,116 | 0.129391546023177680000 | 0.0000976166559154623700 |            365 |     False |     |     |     |        |                    |                | ... |\n| distkeys       | varchar   | 3,739,116 | 0.173429495099911320000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| license        | varchar   | 3,739,116 | 0.099345406775291270000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| monitor        | varchar   | 3,739,116 | 0.116959998031620310000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| compflag       | varchar   | 3,739,116 | 0.012953329075642478000 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| art_reef       | varchar   | 3,739,116 | 0.174222463277416360000 | 0.0000125698159671965250 |             47 |     False |     |     |     |        |                    |                | ... |\n| gender         | varchar   | 3,739,116 | 0.211273199333746280000 | 0.0000013372144645953750 |              5 |     False |     |     |     |        |                    |                | ... |\n| tourn          | varchar   | 3,739,116 | 0.103942482661677260000 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| turtle         | varchar   | 3,739,116 | 0.116515775386481720000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| date           | varchar   | 3,739,116 | 0.042832049072561540000 | 0.0001781169666841039400 |            666 |     False |     |     |     |        |                    |                | ... |\n| region         | varchar   | 3,739,116 | 0.279464450955787400000 | 0.0000024069860362716750 |              9 |     False |     |     |     |        |                    |                | ... |\n| strat_interval | varchar   | 3,739,116 | 0.279235252396555800000 | 0.0000016046573575144500 |              6 |     False |     |     |     |        |                    |                | ... |\n| reefcode       | varchar   | 3,739,116 | 0.017981255462521090000 | 0.0000609769795855491000 |            228 |     False |     |     |     |        |                    |                | ... |\n| wp_int_precal  | varchar   | 3,739,116 | 0.024187267792708224000 | 0.0048629141219475410000 |          18183 |     False |     |     |     |        |                    |                | ... |\n| imp_rec        | varchar   | 3,739,116 | 0.016037480516785250000 | 0.0000002674428929190750 |              1 |     False |     |     |     |        |                    |                | ... |\n| muni_trp       | varchar   | 3,739,116 | 0.000011232601502601149 | 0.0000005348857858381500 |              2 |     False |     |     |     |        |                    |                | ... |\n| arx_method     | varchar   | 3,739,116 | 0.000223582258480346700 | 0.0000010697715716763000 |              4 |     False |     |     |     |        |                    |                | ... |\n| reef_code      | varchar   | 3,739,116 | 0.000052418807012138700 | 0.0000056163007513005745 |             21 |     False |     |     |     |        |                    |                | ... |\n| reef           | varchar   | 3,739,116 | 0.014351787962716321000 | 0.0000008023286787572250 |              3 |     False |     |     |     |        |                    |                | ... |"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_transforms.season_catches": ["model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.top_species"], "model.dbt_transforms.top_species": ["model.dbt_transforms.stg_noaa__sizes"], "model.dbt_transforms.trip_details": ["model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.stg_noaa__catches", "model.dbt_transforms.stg_noaa__sizes"], "model.dbt_transforms.region_catches": ["model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.top_species"], "model.dbt_transforms.method_catches": ["model.dbt_transforms.int_trips_fips_join", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.top_species"], "model.dbt_transforms.int_trips_fips_join": ["model.dbt_transforms.stg_noaa__trips", "seed.dbt_transforms.county_fips_codes", "seed.dbt_transforms.state_fips_codes"], "model.dbt_transforms.stg_noaa__sizes": ["model.dbt_transforms.base_noaa__sizes"], "model.dbt_transforms.stg_noaa__catches": ["model.dbt_transforms.base_noaa__catches"], "model.dbt_transforms.stg_noaa__trips": ["model.dbt_transforms.base_noaa__trips"], "model.dbt_transforms.base_noaa__catches": ["source.dbt_transforms.raw.catch"], "model.dbt_transforms.base_noaa__sizes": ["source.dbt_transforms.raw.size"], "model.dbt_transforms.base_noaa__trips": ["source.dbt_transforms.raw.trip"], "analysis.dbt_transforms.generate_yaml_file_staging_models": ["model.dbt_transforms.stg_noaa__catches", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.stg_noaa__trips"], "analysis.dbt_transforms.generate_staging_models": ["source.dbt_transforms.raw.catch", "source.dbt_transforms.raw.size", "source.dbt_transforms.raw.trip"], "analysis.dbt_transforms.generate_yaml_file_base_models": ["model.dbt_transforms.base_noaa__catches", "model.dbt_transforms.base_noaa__sizes", "model.dbt_transforms.base_noaa__trips"], "analysis.dbt_transforms.generate_yaml_file_sources": [], "analysis.dbt_transforms.information_schema_queries": [], "analysis.dbt_transforms.merge_duplicate_column_names": ["source.dbt_transforms.raw.size"], "analysis.dbt_transforms.source_profiler": ["source.dbt_transforms.raw.catch"], "analysis.dbt_transforms.adhoc_queries": ["model.dbt_transforms.base_noaa__catches", "model.dbt_transforms.base_noaa__sizes", "model.dbt_transforms.base_noaa__trips", "model.dbt_transforms.stg_noaa__catches", "model.dbt_transforms.stg_noaa__sizes", "model.dbt_transforms.stg_noaa__trips", "source.dbt_transforms.raw.catch", "source.dbt_transforms.raw.size", "source.dbt_transforms.raw.trip"], "seed.dbt_transforms.county_fips_codes": [], "seed.dbt_transforms.state_fips_codes": [], "test.dbt_transforms.unique_stg_noaa__trips_trip_id.15bb77a9de": ["model.dbt_transforms.stg_noaa__trips"], "test.dbt_transforms.not_null_stg_noaa__trips_trip_id.718263be21": ["model.dbt_transforms.stg_noaa__trips"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.32c7e5b173": ["model.dbt_transforms.stg_noaa__trips"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.ae4bd30101": ["model.dbt_transforms.stg_noaa__trips"], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year.c15b2ce1b2": ["model.dbt_transforms.stg_noaa__trips"], "test.dbt_transforms.unique_stg_noaa__catches_catch_id.56754d28a3": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.not_null_stg_noaa__catches_catch_id.7603e1e6a1": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.7c0c7bd69c": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year.1c7b6d880b": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name.cdf30988b4": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught.c1f86bd118": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm.ec0cdda650": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year.ea7f3d6e05": ["model.dbt_transforms.stg_noaa__catches"], "test.dbt_transforms.unique_stg_noaa__sizes_size_id.05b5a2e641": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.not_null_stg_noaa__sizes_size_id.0f6052fe92": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.a4ffba5c5a": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.9eede4301f": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name.37f4556c80": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg.be668c8a6e": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm.9cee64e486": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm.ee2978697c": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in.1754ca6676": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year.896904c4ca": ["model.dbt_transforms.stg_noaa__sizes"], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year.b5d6cb5fbd": ["model.dbt_transforms.base_noaa__catches"], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year.3b7dcbbb9b": ["model.dbt_transforms.base_noaa__sizes"], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year.91756b9da8": ["model.dbt_transforms.base_noaa__trips"], "source.dbt_transforms.raw.catch": [], "source.dbt_transforms.raw.size": [], "source.dbt_transforms.raw.trip": []}, "child_map": {"model.dbt_transforms.season_catches": [], "model.dbt_transforms.top_species": ["model.dbt_transforms.method_catches", "model.dbt_transforms.region_catches", "model.dbt_transforms.season_catches"], "model.dbt_transforms.trip_details": [], "model.dbt_transforms.region_catches": [], "model.dbt_transforms.method_catches": [], "model.dbt_transforms.int_trips_fips_join": ["model.dbt_transforms.method_catches", "model.dbt_transforms.region_catches", "model.dbt_transforms.season_catches", "model.dbt_transforms.trip_details"], "model.dbt_transforms.stg_noaa__sizes": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_yaml_file_staging_models", "model.dbt_transforms.method_catches", "model.dbt_transforms.region_catches", "model.dbt_transforms.season_catches", "model.dbt_transforms.top_species", "model.dbt_transforms.trip_details", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm.ee2978697c", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in.1754ca6676", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm.9cee64e486", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg.be668c8a6e", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name.37f4556c80", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.a4ffba5c5a", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.9eede4301f", "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year.896904c4ca", "test.dbt_transforms.not_null_stg_noaa__sizes_size_id.0f6052fe92", "test.dbt_transforms.unique_stg_noaa__sizes_size_id.05b5a2e641"], "model.dbt_transforms.stg_noaa__catches": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_yaml_file_staging_models", "model.dbt_transforms.trip_details", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name.cdf30988b4", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.7c0c7bd69c", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year.1c7b6d880b", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm.ec0cdda650", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught.c1f86bd118", "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year.ea7f3d6e05", "test.dbt_transforms.not_null_stg_noaa__catches_catch_id.7603e1e6a1", "test.dbt_transforms.unique_stg_noaa__catches_catch_id.56754d28a3"], "model.dbt_transforms.stg_noaa__trips": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_yaml_file_staging_models", "model.dbt_transforms.int_trips_fips_join", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.32c7e5b173", "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.ae4bd30101", "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year.c15b2ce1b2", "test.dbt_transforms.not_null_stg_noaa__trips_trip_id.718263be21", "test.dbt_transforms.unique_stg_noaa__trips_trip_id.15bb77a9de"], "model.dbt_transforms.base_noaa__catches": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_yaml_file_base_models", "model.dbt_transforms.stg_noaa__catches", "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year.b5d6cb5fbd"], "model.dbt_transforms.base_noaa__sizes": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_yaml_file_base_models", "model.dbt_transforms.stg_noaa__sizes", "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year.3b7dcbbb9b"], "model.dbt_transforms.base_noaa__trips": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_yaml_file_base_models", "model.dbt_transforms.stg_noaa__trips", "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year.91756b9da8"], "analysis.dbt_transforms.generate_yaml_file_staging_models": [], "analysis.dbt_transforms.generate_staging_models": [], "analysis.dbt_transforms.generate_yaml_file_base_models": [], "analysis.dbt_transforms.generate_yaml_file_sources": [], "analysis.dbt_transforms.information_schema_queries": [], "analysis.dbt_transforms.merge_duplicate_column_names": [], "analysis.dbt_transforms.source_profiler": [], "analysis.dbt_transforms.adhoc_queries": [], "seed.dbt_transforms.county_fips_codes": ["model.dbt_transforms.int_trips_fips_join"], "seed.dbt_transforms.state_fips_codes": ["model.dbt_transforms.int_trips_fips_join"], "test.dbt_transforms.unique_stg_noaa__trips_trip_id.15bb77a9de": [], "test.dbt_transforms.not_null_stg_noaa__trips_trip_id.718263be21": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_id.32c7e5b173": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__trips_0_75__survey_year.ae4bd30101": [], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__trips_survey_id__survey_year.c15b2ce1b2": [], "test.dbt_transforms.unique_stg_noaa__catches_catch_id.56754d28a3": [], "test.dbt_transforms.not_null_stg_noaa__catches_catch_id.7603e1e6a1": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_id.7c0c7bd69c": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__survey_year.1c7b6d880b": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__species_common_name.cdf30988b4": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_number_fish_caught.c1f86bd118": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__catches_0_75__total_length_fish_harvested_mm.ec0cdda650": [], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__catches_survey_id__species_common_name__total_number_fish_caught__total_length_fish_harvested_mm__survey_year.ea7f3d6e05": [], "test.dbt_transforms.unique_stg_noaa__sizes_size_id.05b5a2e641": [], "test.dbt_transforms.not_null_stg_noaa__sizes_size_id.0f6052fe92": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_id.a4ffba5c5a": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__survey_year.9eede4301f": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__species_common_name.37f4556c80": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_weight_kg.be668c8a6e": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_mm.9cee64e486": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_cm.ee2978697c": [], "test.dbt_transforms.dbt_utils_not_null_proportion_stg_noaa__sizes_0_75__fish_length_in.1754ca6676": [], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_stg_noaa__sizes_survey_id__species_common_name__fish_weight_kg__fish_length_mm__survey_year.896904c4ca": [], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__catches_id_code__common__tot_cat__tot_len__year.b5d6cb5fbd": [], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__sizes_id_code__common__wgt__lngth__year.3b7dcbbb9b": [], "test.dbt_transforms.dbt_utils_unique_combination_of_columns_base_noaa__trips_id_code__year.91756b9da8": [], "source.dbt_transforms.raw.catch": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_staging_models", "analysis.dbt_transforms.source_profiler", "model.dbt_transforms.base_noaa__catches"], "source.dbt_transforms.raw.size": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_staging_models", "analysis.dbt_transforms.merge_duplicate_column_names", "model.dbt_transforms.base_noaa__sizes"], "source.dbt_transforms.raw.trip": ["analysis.dbt_transforms.adhoc_queries", "analysis.dbt_transforms.generate_staging_models", "model.dbt_transforms.base_noaa__trips"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}